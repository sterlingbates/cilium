
include/bpf/builtins.h,1152
#define __BPF_BUILTINS__5,122
# define lock_xadd(10,189
#define __align_stack_8	20,683
#define __it_bwd(23,757
#define __it_fwd(24,804
#define __it_set(27,887
#define __it_xor(28,945
#define __it_mob(29,1042
#define __it_mof(30,1131
__bpf_memset_builtin(37,1307
static __always_inline void __bpf_memzero(45,1485
__bpf_no_builtin_memset(127,4212
#define __builtin_memset	134,4400
static __always_inline __nobuiltin(136,4450
__bpf_memcpy_builtin(146,4731
static __always_inline void __bpf_memcpy(152,4869
__bpf_no_builtin_memcpy(240,7873
#define __builtin_memcpy	247,8068
static __always_inline __nobuiltin(249,8118
__bpf_memcmp_builtin(256,8300
static __always_inline __u64 __bpf_memcmp(270,8932
__bpf_no_builtin_memcmp(346,11344
#define __builtin_memcmp	354,11556
static __always_inline __nobuiltin(359,11731
__bpf_memmove_builtin(367,11929
static __always_inline void __bpf_memmove_bwd(373,12070
static __always_inline void __bpf_memmove_fwd(379,12252
__bpf_no_builtin_memmove(459,15171
#define __builtin_memmove	466,15368
static __always_inline void __bpf_memmove(468,15420
static __always_inline __nobuiltin(485,16032

include/bpf/tailcall.h,155
#define __BPF_TAILCALL_H_5,123
tail_call_static(11,237
tail_call_dynamic(36,1125
# define tail_call_static(51,1647
# define tail_call_dynamic(52,1709

include/bpf/compiler.h,845
#define __BPF_COMPILER_H_5,123
# define __section(10,190
# define __maybe_unused	14,278
# define offsetof(18,356
# define field_sizeof(22,435
# define __packed	26,513
#  define __nobuiltin(31,611
#  define __nobuiltin(33,674
# define likely(38,730
# define unlikely(42,802
# define always_succeeds(46,924
#undef __always_inline	49,970
#define __always_inline	50,1025
# define __stringify(53,1109
# define __fetch(57,1161
# define __aligned(61,1222
# define build_bug_on(65,1302
# define __throw_build_bug(69,1395
# define __printf(73,1466
# define barrier(77,1557
# define barrier_data(81,1636
static __always_inline void bpf_barrier(84,1709
# define ARRAY_SIZE(94,1947
# define __READ_ONCE(98,2028
# define __WRITE_ONCE(102,2110
# define READ_ONCE(108,2269
# define WRITE_ONCE(115,2408
# define fallthrough	123,2575

include/bpf/api.h,26
#define __BPF_API__5,117

include/bpf/helpers_sock.h,35
#define __BPF_HELPERS_SOCK__5,126

include/bpf/ctx/ctx.h,31
#define __BPF_CTX_CTX_H_5,122

include/bpf/ctx/common.h,228
#define __BPF_CTX_COMMON_H_5,125
#define __ctx_skb	13,251
#define __ctx_xdp	14,272
static __always_inline bool ctx_no_room(16,294
static __always_inline bool ctx_is_skb(21,412
static __always_inline bool ctx_is_xdp(26,493

include/bpf/ctx/sock.h,122
#define __BPF_CTX_SOCK_H_5,123
#define __ctx_sock 9,180
#undef ctx_event_output10,213
#define ctx_event_output 11,237

include/bpf/ctx/unspec.h,34
#define __BPF_CTX_UNSPEC_H_5,125

include/bpf/ctx/xdp.h,1438
#define __BPF_CTX_XDP_H_5,122
#define __section_entry	10,206
#define __ctx_buff	12,248
#define __ctx_is	13,276
#define CTX_ACT_OK	22,448
#define CTX_ACT_DROP	23,478
#define CTX_ACT_TX	24,510
#define CTX_ACT_REDIRECT	25,557
#define CTX_DIRECT_WRITE_OK	27,597
#define META_PIVOT	30,673
#define __CTX_OFF_MAX	34,848
xdp_load_bytes(37,920
xdp_store_bytes(65,1746
#define ctx_load_bytes	90,2440
#define ctx_store_bytes	91,2480
#define ctx_change_type	97,2648
#define ctx_change_tail	98,2696
#define ctx_pull_data(100,2745
#define ctx_get_tunnel_key	102,2818
#define ctx_set_tunnel_key	103,2871
#define ctx_get_tunnel_opt	105,2925
#define ctx_event_output	107,2979
#define ctx_adjust_meta	109,3023
#define get_hash(111,3066
#define get_hash_recalc(112,3099
#define DEFINE_FUNC_CTX_POINTER(114,3144
DEFINE_FUNC_CTX_POINTER(130,3693
#undef DEFINE_FUNC_CTX_POINTER135,3863
__csum_replace_by_4(144,4091
l3_csum_replace(150,4247
#define CSUM_MANGLED_0	183,5138
l4_csum_replace(186,5223
ctx_change_proto(226,6344
ctx_adjust_troom(264,7402
ctx_adjust_hroom(270,7548
ctx_redirect(332,9346
ctx_redirect_peer(341,9561
ctx_full_len(350,9813
ctx_wire_len(368,10304
	__uint(374,10384
	__uint(375,10426
	__uint(376,10458
	__uint(377,10491
	__uint(378,10529
} cilium_xdp_scratch __section_maps_btf;379,10554
ctx_store_meta(382,10639
ctx_load_meta(392,10958
ctx_get_protocol(403,11279
ctx_get_ifindex(415,11518

include/bpf/ctx/skb.h,1189
#define __BPF_CTX_SKB_H_5,122
#define __section_entry 7,148
#define __ctx_buff	9,189
#define __ctx_is	10,219
# define TC_ACT_OK	16,315
# define TC_ACT_SHOT	20,365
# define TC_ACT_REDIRECT	24,421
#define CTX_ACT_OK	27,456
#define CTX_ACT_DROP	28,486
#define CTX_ACT_TX	29,520
#define CTX_ACT_REDIRECT	30,556
#define CTX_DIRECT_WRITE_OK	33,654
#define META_PIVOT	35,685
#define ctx_load_bytes	37,741
#define ctx_store_bytes	38,780
#define ctx_adjust_hroom	40,822
#define ctx_change_type	42,864
#define ctx_change_proto	43,905
#define ctx_change_tail	44,947
#define ctx_pull_data	46,989
#define ctx_get_tunnel_key	48,1027
#define ctx_set_tunnel_key	49,1073
#define ctx_get_tunnel_opt	51,1120
#define ctx_set_tunnel_opt	52,1166
#define ctx_event_output	54,1213
#define ctx_adjust_meta	56,1256
#define get_hash(62,1515
#define get_hash_recalc(63,1548
#define DEFINE_FUNC_CTX_POINTER(65,1592
DEFINE_FUNC_CTX_POINTER(81,2145
#undef DEFINE_FUNC_CTX_POINTER86,2315
ctx_redirect_peer(95,2553
ctx_adjust_troom(101,2727
ctx_full_len(107,2892
ctx_wire_len(113,3001
ctx_store_meta(119,3114
ctx_load_meta(125,3252
ctx_get_protocol(131,3383
ctx_get_ifindex(137,3508

include/bpf/stddef.h,100
#define NULL 5,110
#define __BPF_STDDEF_H_9,167
#define bool	12,193
	false	15,220
	true	16,232

include/bpf/access.h,89
#define __BPF_ACCESS_H_5,121
map_array_get_32(11,234
# define map_array_get_32(35,968

include/bpf/csum.h,269
#define __BPF_CSUM_H_5,119
static __always_inline __sum16 csum_fold(10,186
static __always_inline __wsum csum_unfold(17,349
static __always_inline __wsum csum_add(22,432
static __always_inline __wsum csum_sub(28,553
static __always_inline __wsum csum_diff(33,658

include/bpf/errno.h,388
#define __BPF_ERRNO__5,119
# define EPERM	10,222
# define ENOENT	13,262
# define ENXIO	16,302
# define ENOMEM	19,342
# define EFAULT	22,384
# define EINVAL	25,426
# define ENOTSUP	28,469
# define EADDRINUSE	31,515
# define ECONNRESET	34,564
# define ENOBUFS	37,611
# define ENOTCONN	40,656
# define ECONNREFUSED	43,706
# define EHOSTUNREACH	46,760
# define ENOTSUPP	49,810

include/bpf/loader.h,450
#define __BPF_LOADER__5,120
#define __uint(9,170
#define __type(10,214
#define __array(11,260
#define PIN_NONE	13,310
#define PIN_OBJECT_NS	14,330
#define PIN_GLOBAL_NS	15,355
#define LIBBPF_PIN_BY_NAME 17,381
struct bpf_elf_map 19,411
	__u32 type;20,432
	__u32 size_key;21,445
	__u32 size_value;22,462
	__u32 max_elem;23,481
	__u32 flags;24,498
	__u32 id;25,512
	__u32 pinning;26,523
	__u32 inner_id;27,539
	__u32 inner_idx;28,556

include/bpf/types_mapper.h,703
#define __BPF_TYPES_MAPPER__5,126
typedef __signed__ char __s8;7,156
typedef unsigned char __u8;8,186
typedef __signed__ short __s16;10,215
typedef unsigned short __u16;11,247
typedef __signed__ int __s32;13,278
typedef unsigned int __u32;14,308
typedef __signed__ long long __s64;16,337
typedef unsigned long long __u64;17,373
typedef __u16 __le16;19,408
typedef __u16 __be16;20,430
typedef __u32 __le32;22,453
typedef __u32 __be32;23,475
typedef __u64 __le64;25,498
typedef __u64 __be64;26,520
typedef __u16 __sum16;28,543
typedef __u32 __wsum;29,566
typedef __u64 __aligned_u64;31,589
typedef __u64 __net_cookie;33,619
typedef __u64 __sock_cookie;34,647
#define UINT8_MAX 36,677

include/bpf/section.h,194
#define __BPF_SECTION__5,121
# define __section_tail(10,192
# define __section_license	14,307
# define __section_maps	18,387
# define __section_maps_btf	22,466
# define BPF_LICENSE(26,542

include/bpf/helpers.h,302
#define __BPF_HELPERS__5,121
# define BPF_FUNC(13,231
# define BPF_STUB(18,356
# define BPF_FUNC_REMAP(23,491
#define jiffies	43,1088
static __printf(53,1346
struct bpf_fib_lookup_padded 74,2027
	struct bpf_fib_lookup l;75,2058
	__u8 pad[pad76,2084
static inline int try_set_retval(103,2908

include/bpf/verifier.h,82
#define __BPF_VERIFIER__5,122
static __always_inline void relax_verifier(13,337

include/bpf/helpers_xdp.h,34
#define __BPF_HELPERS_XDP__5,125

include/bpf/helpers_skb.h,34
#define __BPF_HELPERS_SKB__5,125

include/linux/tcp.h,1023
#define _LINUX_TCP_H20,739
struct tcphdr 24,787
	__be16	source;25,803
	__be16	dest;26,819
	__be32	seq;27,833
	__be32	ack_seq;28,846
	__u16	res1:res130,901
		doff:doff31,916
		fin:fin32,926
		syn:syn33,935
		rst:rst34,944
		psh:psh35,953
		ack:ack36,962
		urg:urg37,971
		ece:ece38,980
		cwr:cwr39,989
	__u16	doff:doff41,1035
		res1:res142,1050
		cwr:cwr43,1060
		ece:ece44,1069
		urg:urg45,1078
		ack:ack46,1087
		psh:psh47,1096
		rst:rst48,1105
		syn:syn49,1114
		fin:fin50,1123
	__be16	window;54,1193
	__sum16	check;55,1209
	__be16	urg_ptr;56,1225
union tcp_word_hdr 64,1435
	struct tcphdr hdr;65,1457
	__be32 		  words[words66,1477
#define tcp_flag_word(69,1504
	TCP_FLAG_CWR 72,1583
	TCP_FLAG_ECE 73,1635
	TCP_FLAG_URG 74,1687
	TCP_FLAG_ACK 75,1739
	TCP_FLAG_PSH 76,1791
	TCP_FLAG_RST 77,1843
	TCP_FLAG_SYN 78,1895
	TCP_FLAG_FIN 79,1947
	TCP_RESERVED_BITS 80,1999
	TCP_DATA_OFFSET 81,2056
#define TCP_MSS_DEFAULT	87,2147
#define TCP_MSS_DESIRED	88,2208

include/linux/icmp.h,1617
#define _LINUX_ICMP_H20,742
#define ICMP_ECHOREPLY	24,791
#define ICMP_DEST_UNREACH	25,836
#define ICMP_SOURCE_QUENCH	26,894
#define ICMP_REDIRECT	27,944
#define ICMP_ECHO	28,999
#define ICMP_TIME_EXCEEDED	29,1041
#define ICMP_PARAMETERPROB	30,1092
#define ICMP_TIMESTAMP	31,1147
#define ICMP_TIMESTAMPREPLY	32,1199
#define ICMP_INFO_REQUEST	33,1253
#define ICMP_INFO_REPLY	34,1309
#define ICMP_ADDRESS	35,1362
#define ICMP_ADDRESSREPLY	36,1415
#define NR_ICMP_TYPES	37,1470
#define ICMP_NET_UNREACH	41,1523
#define ICMP_HOST_UNREACH	42,1577
#define ICMP_PROT_UNREACH	43,1629
#define ICMP_PORT_UNREACH	44,1685
#define ICMP_FRAG_NEEDED	45,1737
#define ICMP_SR_FAILED	46,1798
#define ICMP_NET_UNKNOWN	47,1851
#define ICMP_HOST_UNKNOWN	48,1878
#define ICMP_HOST_ISOLATED	49,1906
#define ICMP_NET_ANO	50,1935
#define ICMP_HOST_ANO	51,1959
#define ICMP_NET_UNR_TOS	52,1985
#define ICMP_HOST_UNR_TOS	53,2013
#define ICMP_PKT_FILTERED	54,2042
#define ICMP_PREC_VIOLATION	55,2093
#define ICMP_PREC_CUTOFF	56,2151
#define NR_ICMP_UNREACH	57,2204
#define ICMP_REDIR_NET	60,2303
#define ICMP_REDIR_HOST	61,2350
#define ICMP_REDIR_NETTOS	62,2398
#define ICMP_REDIR_HOSTTOS	63,2454
#define ICMP_EXC_TTL	66,2543
#define ICMP_EXC_FRAGTIME	67,2593
struct icmphdr 70,2658
  __u8		type;71,2675
  __u8		code;72,2689
  __sum16	checksum;73,2703
		__be16	id;76,2743
		__be16	sequence;77,2756
	} echo;78,2775
	__be32	gateway;79,2784
		__be16	__unused;81,2811
		__be16	mtu;82,2830
	} frag;83,2844
  } un;84,2853
#define ICMP_FILTER	92,2908
struct icmp_filter 94,2933
	__u32		data;95,2954

include/linux/bpf_common.h,1059
#define __LINUX_BPF_COMMON_H__4,138
#define BPF_CLASS(7,196
#define		BPF_LD	8,236
#define		BPF_LDX	9,258
#define		BPF_ST	10,281
#define		BPF_STX	11,303
#define		BPF_ALU	12,326
#define		BPF_JMP	13,349
#define		BPF_RET	14,372
#define		BPF_MISC 15,395
#define BPF_SIZE(18,446
#define		BPF_W	19,486
#define		BPF_H	20,507
#define		BPF_B	21,528
#define BPF_MODE(22,549
#define		BPF_IMM	23,589
#define		BPF_ABS	24,612
#define		BPF_IND	25,635
#define		BPF_MEM	26,658
#define		BPF_LEN	27,681
#define		BPF_MSH	28,704
#define BPF_OP(31,749
#define		BPF_ADD	32,789
#define		BPF_SUB	33,812
#define		BPF_MUL	34,835
#define		BPF_DIV	35,858
#define		BPF_OR	36,881
#define		BPF_AND	37,903
#define		BPF_LSH	38,926
#define		BPF_RSH	39,949
#define		BPF_NEG	40,972
#define		BPF_MOD	41,995
#define		BPF_XOR	42,1018
#define		BPF_JA	44,1042
#define		BPF_JEQ	45,1064
#define		BPF_JGT	46,1087
#define		BPF_JGE	47,1110
#define		BPF_JSET 48,1133
#define BPF_SRC(49,1163
#define		BPF_K	50,1203
#define		BPF_X	51,1224
#define BPF_MAXINSNS 54,1267

include/linux/if_packet.h,312
#define __LINUX_IF_PACKET_H4,135
#define PACKET_HOST	6,164
#define PACKET_BROADCAST	7,201
#define PACKET_MULTICAST	8,243
#define PACKET_OTHERHOST	9,287
#define PACKET_OUTGOING	10,338
#define PACKET_LOOPBACK	11,393
#define PACKET_USER	12,452
#define PACKET_KERNEL	13,496
#define PACKET_FASTROUTE	15,623

include/linux/byteorder/big_endian.h,2057
#define _LINUX_BYTEORDER_BIG_ENDIAN_H4,145
#define __BIG_ENDIAN 7,205
#define __BIG_ENDIAN_BITFIELD10,268
#define __constant_htonl(16,356
#define __constant_ntohl(17,405
#define __constant_htons(18,454
#define __constant_ntohs(19,503
#define __constant_cpu_to_le64(20,552
#define __constant_le64_to_cpu(21,620
#define __constant_cpu_to_le32(22,693
#define __constant_le32_to_cpu(23,761
#define __constant_cpu_to_le16(24,834
#define __constant_le16_to_cpu(25,902
#define __constant_cpu_to_be64(26,975
#define __constant_be64_to_cpu(27,1030
#define __constant_cpu_to_be32(28,1085
#define __constant_be32_to_cpu(29,1140
#define __constant_cpu_to_be16(30,1195
#define __constant_be16_to_cpu(31,1250
#define __cpu_to_le64(32,1305
#define __le64_to_cpu(33,1354
#define __cpu_to_le32(34,1408
#define __le32_to_cpu(35,1457
#define __cpu_to_le16(36,1511
#define __le16_to_cpu(37,1560
#define __cpu_to_be64(38,1614
#define __be64_to_cpu(39,1660
#define __cpu_to_be32(40,1706
#define __be32_to_cpu(41,1752
#define __cpu_to_be16(42,1798
#define __be16_to_cpu(43,1844
static __inline__ __le64 __cpu_to_le64p(45,1891
static __inline__ __u64 __le64_to_cpup(49,1981
static __inline__ __le32 __cpu_to_le32p(53,2072
static __inline__ __u32 __le32_to_cpup(57,2162
static __inline__ __le16 __cpu_to_le16p(61,2253
static __inline__ __u16 __le16_to_cpup(65,2343
static __inline__ __be64 __cpu_to_be64p(69,2434
static __inline__ __u64 __be64_to_cpup(73,2514
static __inline__ __be32 __cpu_to_be32p(77,2593
static __inline__ __u32 __be32_to_cpup(81,2673
static __inline__ __be16 __cpu_to_be16p(85,2752
static __inline__ __u16 __be16_to_cpup(89,2832
#define __cpu_to_le64s(93,2911
#define __le64_to_cpus(94,2952
#define __cpu_to_le32s(95,2993
#define __le32_to_cpus(96,3034
#define __cpu_to_le16s(97,3075
#define __le16_to_cpus(98,3116
#define __cpu_to_be64s(99,3157
#define __be64_to_cpus(100,3211
#define __cpu_to_be32s(101,3265
#define __be32_to_cpus(102,3319
#define __cpu_to_be16s(103,3373
#define __be16_to_cpus(104,3427

include/linux/byteorder/little_endian.h,2066
#define _LINUX_BYTEORDER_LITTLE_ENDIAN_H4,148
#define __LITTLE_ENDIAN 7,214
#define __LITTLE_ENDIAN_BITFIELD10,283
#define __constant_htonl(16,374
#define __constant_ntohl(17,436
#define __constant_htons(18,496
#define __constant_ntohs(19,558
#define __constant_cpu_to_le64(20,618
#define __constant_le64_to_cpu(21,673
#define __constant_cpu_to_le32(22,728
#define __constant_le32_to_cpu(23,783
#define __constant_cpu_to_le16(24,838
#define __constant_le16_to_cpu(25,893
#define __constant_cpu_to_be64(26,948
#define __constant_be64_to_cpu(27,1016
#define __constant_cpu_to_be32(28,1089
#define __constant_be32_to_cpu(29,1157
#define __constant_cpu_to_be16(30,1230
#define __constant_be16_to_cpu(31,1298
#define __cpu_to_le64(32,1371
#define __le64_to_cpu(33,1417
#define __cpu_to_le32(34,1463
#define __le32_to_cpu(35,1509
#define __cpu_to_le16(36,1555
#define __le16_to_cpu(37,1601
#define __cpu_to_be64(38,1647
#define __be64_to_cpu(39,1696
#define __cpu_to_be32(40,1750
#define __be32_to_cpu(41,1799
#define __cpu_to_be16(42,1853
#define __be16_to_cpu(43,1902
static __inline__ __le64 __cpu_to_le64p(45,1957
static __inline__ __u64 __le64_to_cpup(49,2037
static __inline__ __le32 __cpu_to_le32p(53,2116
static __inline__ __u32 __le32_to_cpup(57,2196
static __inline__ __le16 __cpu_to_le16p(61,2275
static __inline__ __u16 __le16_to_cpup(65,2355
static __inline__ __be64 __cpu_to_be64p(69,2434
static __inline__ __u64 __be64_to_cpup(73,2524
static __inline__ __be32 __cpu_to_be32p(77,2615
static __inline__ __u32 __be32_to_cpup(81,2705
static __inline__ __be16 __cpu_to_be16p(85,2796
static __inline__ __u16 __be16_to_cpup(89,2886
#define __cpu_to_le64s(93,2977
#define __le64_to_cpus(94,3031
#define __cpu_to_le32s(95,3085
#define __le32_to_cpus(96,3139
#define __cpu_to_le16s(97,3193
#define __le16_to_cpus(98,3247
#define __cpu_to_be64s(99,3301
#define __be64_to_cpus(100,3342
#define __cpu_to_be32s(101,3383
#define __be32_to_cpus(102,3424
#define __cpu_to_be16s(103,3465
#define __be16_to_cpus(104,3506

include/linux/byteorder.h,33
#define __ASM_BYTEORDER_H_6,169

include/linux/in.h,4226
#define _LINUX_IN_H21,803
  IPPROTO_IP 27,900
#define IPPROTO_IP	28,949
  IPPROTO_ICMP 29,980
#define IPPROTO_ICMP	30,1041
  IPPROTO_IGMP 31,1076
#define IPPROTO_IGMP	32,1138
  IPPROTO_IPIP 33,1173
#define IPPROTO_IPIP	34,1241
  IPPROTO_TCP 35,1276
#define IPPROTO_TCP	36,1332
  IPPROTO_EGP 37,1365
#define IPPROTO_EGP	38,1418
  IPPROTO_PUP 39,1451
#define IPPROTO_PUP	40,1494
  IPPROTO_UDP 41,1527
#define IPPROTO_UDP	42,1578
  IPPROTO_IDP 43,1611
#define IPPROTO_IDP	44,1657
  IPPROTO_TP 45,1690
#define IPPROTO_TP	46,1746
  IPPROTO_DCCP 47,1777
#define IPPROTO_DCCP	48,1842
  IPPROTO_IPV6 49,1877
#define IPPROTO_IPV6	50,1930
  IPPROTO_RSVP 51,1965
#define IPPROTO_RSVP	52,2009
  IPPROTO_GRE 53,2044
#define IPPROTO_GRE	54,2105
  IPPROTO_ESP 55,2138
#define IPPROTO_ESP	56,2205
  IPPROTO_AH 57,2238
#define IPPROTO_AH	58,2295
  IPPROTO_MTP 59,2326
#define IPPROTO_MTP	60,2383
  IPPROTO_BEETPH 61,2416
#define IPPROTO_BEETPH	62,2479
  IPPROTO_ENCAP 63,2518
#define IPPROTO_ENCAP	64,2570
  IPPROTO_PIM 65,2607
#define IPPROTO_PIM	66,2666
  IPPROTO_COMP 67,2699
#define IPPROTO_COMP	68,2757
  IPPROTO_SCTP 69,2792
#define IPPROTO_SCTP	70,2855
  IPPROTO_UDPLITE 71,2890
#define IPPROTO_UDPLITE	72,2943
  IPPROTO_MPLS 73,2984
#define IPPROTO_MPLS	74,3036
  IPPROTO_RAW 75,3071
#define IPPROTO_RAW	76,3116
  IPPROTO_MAX77,3149
struct in_addr 81,3191
	__be32	s_addr;82,3208
#define IP_TOS	85,3228
#define IP_TTL	86,3246
#define IP_HDRINCL	87,3264
#define IP_OPTIONS	88,3285
#define IP_ROUTER_ALERT	89,3306
#define IP_RECVOPTS	90,3332
#define IP_RETOPTS	91,3354
#define IP_PKTINFO	92,3375
#define IP_PKTOPTIONS	93,3396
#define IP_MTU_DISCOVER	94,3420
#define IP_RECVERR	95,3447
#define IP_RECVTTL	96,3469
#define	IP_RECVTOS	97,3491
#define IP_MTU	98,3513
#define IP_FREEBIND	99,3532
#define IP_IPSEC_POLICY	100,3555
#define IP_XFRM_POLICY	101,3582
#define IP_PASSSEC	102,3608
#define IP_TRANSPARENT	103,3630
#define IP_RECVRETOPTS	106,3681
#define IP_ORIGDSTADDR 109,3748
#define IP_RECVORIGDSTADDR 110,3780
#define IP_MINTTL 112,3825
#define IP_NODEFRAG 113,3852
#define IP_CHECKSUM	114,3879
#define IP_BIND_ADDRESS_NO_PORT	115,3902
#define IP_PMTUDISC_DONT	118,3967
#define IP_PMTUDISC_WANT	119,4022
#define IP_PMTUDISC_DO	120,4076
#define IP_PMTUDISC_PROBE	121,4120
#define IP_PMTUDISC_INTERFACE	126,4373
#define IP_PMTUDISC_OMIT	130,4527
#define IP_MULTICAST_IF	132,4556
#define IP_MULTICAST_TTL 133,4585
#define IP_MULTICAST_LOOP 134,4615
#define IP_ADD_MEMBERSHIP	135,4646
#define IP_DROP_MEMBERSHIP	136,4676
#define IP_UNBLOCK_SOURCE	137,4707
#define IP_BLOCK_SOURCE	138,4737
#define IP_ADD_SOURCE_MEMBERSHIP	139,4766
#define IP_DROP_SOURCE_MEMBERSHIP	140,4802
#define IP_MSFILTER	141,4839
#define MCAST_JOIN_GROUP	142,4864
#define MCAST_BLOCK_SOURCE	143,4893
#define MCAST_UNBLOCK_SOURCE	144,4924
#define MCAST_LEAVE_GROUP	145,4957
#define MCAST_JOIN_SOURCE_GROUP	146,4987
#define MCAST_LEAVE_SOURCE_GROUP	147,5023
#define MCAST_MSFILTER	148,5059
#define IP_MULTICAST_ALL	149,5087
#define IP_UNICAST_IF	150,5116
#define MCAST_EXCLUDE	152,5144
#define MCAST_INCLUDE	153,5168
#define IP_DEFAULT_MULTICAST_TTL 156,5242
#define IP_DEFAULT_MULTICAST_LOOP 157,5284
#define	IN_CLASSA(166,5538
#define	IN_CLASSA_NET	167,5599
#define	IN_CLASSA_NSHIFT	168,5633
#define	IN_CLASSA_HOST	169,5661
#define	IN_CLASSA_MAX	170,5715
#define	IN_CLASSB(172,5743
#define	IN_CLASSB_NET	173,5813
#define	IN_CLASSB_NSHIFT	174,5847
#define	IN_CLASSB_HOST	175,5875
#define	IN_CLASSB_MAX	176,5929
#define	IN_CLASSC(178,5959
#define	IN_CLASSC_NET	179,6029
#define	IN_CLASSC_NSHIFT	180,6063
#define	IN_CLASSC_HOST	181,6090
#define	IN_CLASSD(183,6145
#define	IN_MULTICAST(184,6215
#define IN_MULTICAST_NET	185,6253
#define	IN_EXPERIMENTAL(187,6290
#define	IN_BADCLASS(188,6365
#define	INADDR_ANY	191,6458
#define	INADDR_BROADCAST	194,6548
#define	INADDR_NONE	197,6649
#define	IN_LOOPBACKNET	200,6750
#define	INADDR_LOOPBACK	203,6833
#define	IN_LOOPBACK(204,6887
#define INADDR_UNSPEC_GROUP 207,6995
#define INADDR_ALLHOSTS_GROUP 208,7056
#define INADDR_ALLRTRS_GROUP 209,7117
#define INADDR_MAX_LOCAL_GROUP 210,7177

include/linux/icmpv6.h,3634
#define _LINUX_ICMPV6_H4,131
struct icmp6hdr 9,205
	__u8		icmp6_type;11,224
	__u8		icmp6_code;12,243
	__sum16		icmp6_cksum;13,262
		__be32			un_data32[un_data3217,296
		__be16			un_data16[un_data1618,321
		__u8			un_data8[un_data819,346
		struct icmpv6_echo 21,369
			__be16		identifier;22,392
			__be16		sequence;23,415
		} u_echo;24,436
                struct icmpv6_nd_advt 26,449
                        __u32		reserved:reserved28,527
                        		override:override29,570
                        		solicited:solicited30,608
                        		router:router31,647
					reserved2:reserved232,683
                        __u32		router:router34,739
					solicited:solicited35,780
                        		override:override36,798
                        		reserved:reserved37,836
                } u_nd_advt;41,932
                struct icmpv6_nd_ra 43,962
			__u8		hop_limit;44,1000
			__u8		reserved:reserved46,1058
					router_pref:router_pref47,1079
					home_agent:home_agent48,1099
					other:other49,1118
					managed:managed50,1132
			__u8		managed:managed53,1186
					other:other54,1206
					home_agent:home_agent55,1220
					router_pref:router_pref56,1239
					reserved:reserved57,1259
			__be16		rt_lifetime;61,1327
                } u_nd_ra;62,1351
	} icmp6_dataun;64,1379
#define icmp6_identifier	66,1397
#define icmp6_sequence	67,1453
#define icmp6_pointer	68,1506
#define icmp6_mtu	69,1555
#define icmp6_unused	70,1600
#define icmp6_maxdelay	71,1648
#define icmp6_router	72,1698
#define icmp6_solicited	73,1750
#define icmp6_override	74,1808
#define icmp6_ndiscreserved	75,1864
#define icmp6_hop_limit	76,1924
#define icmp6_addrconf_managed	77,1980
#define icmp6_addrconf_other	78,2040
#define icmp6_rt_lifetime	79,2096
#define icmp6_router_pref	80,2155
#define ICMPV6_ROUTER_PREF_LOW	84,2219
#define ICMPV6_ROUTER_PREF_MEDIUM	85,2255
#define ICMPV6_ROUTER_PREF_HIGH	86,2293
#define ICMPV6_ROUTER_PREF_INVALID	87,2330
#define ICMPV6_DEST_UNREACH	89,2370
#define ICMPV6_PKT_TOOBIG	90,2401
#define ICMPV6_TIME_EXCEED	91,2430
#define ICMPV6_PARAMPROB	92,2460
#define ICMPV6_INFOMSG_MASK	94,2489
#define ICMPV6_ECHO_REQUEST	96,2524
#define ICMPV6_ECHO_REPLY	97,2557
#define ICMPV6_MGM_QUERY	98,2588
#define ICMPV6_MGM_REPORT 99,2618
#define ICMPV6_MGM_REDUCTION 100,2655
#define ICMPV6_NI_QUERY	102,2693
#define ICMPV6_NI_REPLY	103,2723
#define ICMPV6_MLD2_REPORT	105,2754
#define ICMPV6_DHAAD_REQUEST	107,2787
#define ICMPV6_DHAAD_REPLY	108,2821
#define ICMPV6_MOBILE_PREFIX_SOL	109,2853
#define ICMPV6_MOBILE_PREFIX_ADV	110,2890
#define ICMPV6_NOROUTE	115,2972
#define ICMPV6_ADM_PROHIBITED	116,2999
#define ICMPV6_NOT_NEIGHBOUR	117,3032
#define ICMPV6_ADDR_UNREACH	118,3064
#define ICMPV6_PORT_UNREACH	119,3095
#define ICMPV6_POLICY_FAIL	120,3126
#define ICMPV6_REJECT_ROUTE	121,3156
#define ICMPV6_EXC_HOPLIMIT	126,3222
#define ICMPV6_EXC_FRAGTIME	127,3253
#define ICMPV6_HDR_FIELD	132,3323
#define ICMPV6_UNK_NEXTHDR	133,3351
#define ICMPV6_UNK_OPTION	134,3381
#define ICMPV6_FILTER	140,3453
#define ICMPV6_FILTER_BLOCK	146,3505
#define ICMPV6_FILTER_PASS	147,3536
#define ICMPV6_FILTER_BLOCKOTHERS	148,3566
#define ICMPV6_FILTER_PASSONLY	149,3602
struct icmp6_filter 151,3637
	__u32		data[data152,3659
#define MLD2_MODE_IS_INCLUDE	158,3712
#define MLD2_MODE_IS_EXCLUDE	159,3743
#define MLD2_CHANGE_TO_INCLUDE	160,3774
#define MLD2_CHANGE_TO_EXCLUDE	161,3807
#define MLD2_ALLOW_NEW_SOURCES	162,3840
#define MLD2_BLOCK_OLD_SOURCES	163,3873
#define MLD2_ALL_MCR_INIT 165,3907

include/linux/bpf.h,31907
#define __LINUX_BPF_H__10,382
#define BPF_JMP32	18,549
#define BPF_ALU64	19,601
#define BPF_DW	22,681
#define BPF_ATOMIC	23,729
#define BPF_XADD	24,800
#define BPF_MOV	27,878
#define BPF_ARSH	28,921
#define BPF_END	31,1026
#define BPF_TO_LE	32,1087
#define BPF_TO_BE	33,1141
#define BPF_FROM_LE	34,1192
#define BPF_FROM_BE	35,1222
#define BPF_JNE	38,1273
#define BPF_JLT	39,1309
#define BPF_JLE	40,1357
#define BPF_JSGT	41,1406
#define BPF_JSGE	42,1463
#define BPF_JSLT	43,1521
#define BPF_JSLE	44,1568
#define BPF_CALL	45,1616
#define BPF_EXIT	46,1658
#define BPF_FETCH	49,1753
#define BPF_XCHG	50,1829
#define BPF_CMPXCHG	51,1887
	BPF_REG_0 55,1988
	BPF_REG_1,56,2004
	BPF_REG_2,57,2016
	BPF_REG_3,58,2028
	BPF_REG_4,59,2040
	BPF_REG_5,60,2052
	BPF_REG_6,61,2064
	BPF_REG_7,62,2076
	BPF_REG_8,63,2088
	BPF_REG_9,64,2100
	BPF_REG_10,65,2112
	__MAX_BPF_REG,66,2125
#define MAX_BPF_REG	70,2212
struct bpf_insn 72,2247
	__u8	code;73,2265
	__u8	dst_reg:dst_reg74,2291
	__u8	src_reg:src_reg75,2328
	__s16	off;76,2367
	__s32	imm;77,2400
struct bpf_lpm_trie_key 81,2495
	__u32	prefixlen;82,2521
	__u8	data[data83,2584
struct bpf_cgroup_storage_key 86,2624
	__u64	cgroup_inode_id;87,2656
	__u32	attach_type;88,2702
union bpf_iter_link_info 91,2776
		__u32	map_fd;93,2813
	} map;94,2829
enum bpf_cmd 841,28981
	BPF_MAP_CREATE,842,28996
	BPF_MAP_LOOKUP_ELEM,843,29013
	BPF_MAP_UPDATE_ELEM,844,29035
	BPF_MAP_DELETE_ELEM,845,29057
	BPF_MAP_GET_NEXT_KEY,846,29079
	BPF_PROG_LOAD,847,29102
	BPF_OBJ_PIN,848,29118
	BPF_OBJ_GET,849,29132
	BPF_PROG_ATTACH,850,29146
	BPF_PROG_DETACH,851,29164
	BPF_PROG_TEST_RUN,852,29182
	BPF_PROG_RUN 853,29202
	BPF_PROG_GET_NEXT_ID,854,29237
	BPF_MAP_GET_NEXT_ID,855,29260
	BPF_PROG_GET_FD_BY_ID,856,29282
	BPF_MAP_GET_FD_BY_ID,857,29306
	BPF_OBJ_GET_INFO_BY_FD,858,29329
	BPF_PROG_QUERY,859,29354
	BPF_RAW_TRACEPOINT_OPEN,860,29371
	BPF_BTF_LOAD,861,29397
	BPF_BTF_GET_FD_BY_ID,862,29412
	BPF_TASK_FD_QUERY,863,29435
	BPF_MAP_LOOKUP_AND_DELETE_ELEM,864,29455
	BPF_MAP_FREEZE,865,29488
	BPF_BTF_GET_NEXT_ID,866,29505
	BPF_MAP_LOOKUP_BATCH,867,29527
	BPF_MAP_LOOKUP_AND_DELETE_BATCH,868,29550
	BPF_MAP_UPDATE_BATCH,869,29584
	BPF_MAP_DELETE_BATCH,870,29607
	BPF_LINK_CREATE,871,29630
	BPF_LINK_UPDATE,872,29648
	BPF_LINK_GET_FD_BY_ID,873,29666
	BPF_LINK_GET_NEXT_ID,874,29690
	BPF_ENABLE_STATS,875,29713
	BPF_ITER_CREATE,876,29732
	BPF_LINK_DETACH,877,29750
	BPF_PROG_BIND_MAP,878,29768
enum bpf_map_type 881,29792
	BPF_MAP_TYPE_UNSPEC,882,29812
	BPF_MAP_TYPE_HASH,883,29834
	BPF_MAP_TYPE_ARRAY,884,29854
	BPF_MAP_TYPE_PROG_ARRAY,885,29875
	BPF_MAP_TYPE_PERF_EVENT_ARRAY,886,29901
	BPF_MAP_TYPE_PERCPU_HASH,887,29933
	BPF_MAP_TYPE_PERCPU_ARRAY,888,29960
	BPF_MAP_TYPE_STACK_TRACE,889,29988
	BPF_MAP_TYPE_CGROUP_ARRAY,890,30015
	BPF_MAP_TYPE_LRU_HASH,891,30043
	BPF_MAP_TYPE_LRU_PERCPU_HASH,892,30067
	BPF_MAP_TYPE_LPM_TRIE,893,30098
	BPF_MAP_TYPE_ARRAY_OF_MAPS,894,30122
	BPF_MAP_TYPE_HASH_OF_MAPS,895,30151
	BPF_MAP_TYPE_DEVMAP,896,30179
	BPF_MAP_TYPE_SOCKMAP,897,30201
	BPF_MAP_TYPE_CPUMAP,898,30224
	BPF_MAP_TYPE_XSKMAP,899,30246
	BPF_MAP_TYPE_SOCKHASH,900,30268
	BPF_MAP_TYPE_CGROUP_STORAGE,901,30292
	BPF_MAP_TYPE_REUSEPORT_SOCKARRAY,902,30322
	BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE,903,30357
	BPF_MAP_TYPE_QUEUE,904,30394
	BPF_MAP_TYPE_STACK,905,30415
	BPF_MAP_TYPE_SK_STORAGE,906,30436
	BPF_MAP_TYPE_DEVMAP_HASH,907,30462
	BPF_MAP_TYPE_STRUCT_OPS,908,30489
	BPF_MAP_TYPE_RINGBUF,909,30515
	BPF_MAP_TYPE_INODE_STORAGE,910,30538
	BPF_MAP_TYPE_TASK_STORAGE,911,30567
	BPF_MAP_TYPE_BLOOM_FILTER,912,30595
enum bpf_prog_type 923,31046
	BPF_PROG_TYPE_UNSPEC,924,31067
	BPF_PROG_TYPE_SOCKET_FILTER,925,31090
	BPF_PROG_TYPE_KPROBE,926,31120
	BPF_PROG_TYPE_SCHED_CLS,927,31143
	BPF_PROG_TYPE_SCHED_ACT,928,31169
	BPF_PROG_TYPE_TRACEPOINT,929,31195
	BPF_PROG_TYPE_XDP,930,31222
	BPF_PROG_TYPE_PERF_EVENT,931,31242
	BPF_PROG_TYPE_CGROUP_SKB,932,31269
	BPF_PROG_TYPE_CGROUP_SOCK,933,31296
	BPF_PROG_TYPE_LWT_IN,934,31324
	BPF_PROG_TYPE_LWT_OUT,935,31347
	BPF_PROG_TYPE_LWT_XMIT,936,31371
	BPF_PROG_TYPE_SOCK_OPS,937,31396
	BPF_PROG_TYPE_SK_SKB,938,31421
	BPF_PROG_TYPE_CGROUP_DEVICE,939,31444
	BPF_PROG_TYPE_SK_MSG,940,31474
	BPF_PROG_TYPE_RAW_TRACEPOINT,941,31497
	BPF_PROG_TYPE_CGROUP_SOCK_ADDR,942,31528
	BPF_PROG_TYPE_LWT_SEG6LOCAL,943,31561
	BPF_PROG_TYPE_LIRC_MODE2,944,31591
	BPF_PROG_TYPE_SK_REUSEPORT,945,31618
	BPF_PROG_TYPE_FLOW_DISSECTOR,946,31647
	BPF_PROG_TYPE_CGROUP_SYSCTL,947,31678
	BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE,948,31708
	BPF_PROG_TYPE_CGROUP_SOCKOPT,949,31748
	BPF_PROG_TYPE_TRACING,950,31779
	BPF_PROG_TYPE_STRUCT_OPS,951,31803
	BPF_PROG_TYPE_EXT,952,31830
	BPF_PROG_TYPE_LSM,953,31850
	BPF_PROG_TYPE_SK_LOOKUP,954,31870
	BPF_PROG_TYPE_SYSCALL,955,31896
enum bpf_attach_type 958,31966
	BPF_CGROUP_INET_INGRESS,959,31989
	BPF_CGROUP_INET_EGRESS,960,32015
	BPF_CGROUP_INET_SOCK_CREATE,961,32040
	BPF_CGROUP_SOCK_OPS,962,32070
	BPF_SK_SKB_STREAM_PARSER,963,32092
	BPF_SK_SKB_STREAM_VERDICT,964,32119
	BPF_CGROUP_DEVICE,965,32147
	BPF_SK_MSG_VERDICT,966,32167
	BPF_CGROUP_INET4_BIND,967,32188
	BPF_CGROUP_INET6_BIND,968,32212
	BPF_CGROUP_INET4_CONNECT,969,32236
	BPF_CGROUP_INET6_CONNECT,970,32263
	BPF_CGROUP_INET4_POST_BIND,971,32290
	BPF_CGROUP_INET6_POST_BIND,972,32319
	BPF_CGROUP_UDP4_SENDMSG,973,32348
	BPF_CGROUP_UDP6_SENDMSG,974,32374
	BPF_LIRC_MODE2,975,32400
	BPF_FLOW_DISSECTOR,976,32417
	BPF_CGROUP_SYSCTL,977,32438
	BPF_CGROUP_UDP4_RECVMSG,978,32458
	BPF_CGROUP_UDP6_RECVMSG,979,32484
	BPF_CGROUP_GETSOCKOPT,980,32510
	BPF_CGROUP_SETSOCKOPT,981,32534
	BPF_TRACE_RAW_TP,982,32558
	BPF_TRACE_FENTRY,983,32577
	BPF_TRACE_FEXIT,984,32596
	BPF_MODIFY_RETURN,985,32614
	BPF_LSM_MAC,986,32634
	BPF_TRACE_ITER,987,32648
	BPF_CGROUP_INET4_GETPEERNAME,988,32665
	BPF_CGROUP_INET6_GETPEERNAME,989,32696
	BPF_CGROUP_INET4_GETSOCKNAME,990,32727
	BPF_CGROUP_INET6_GETSOCKNAME,991,32758
	BPF_XDP_DEVMAP,992,32789
	BPF_CGROUP_INET_SOCK_RELEASE,993,32806
	BPF_XDP_CPUMAP,994,32837
	BPF_SK_LOOKUP,995,32854
	BPF_XDP,996,32870
	BPF_SK_SKB_VERDICT,997,32880
	BPF_SK_REUSEPORT_SELECT,998,32901
	BPF_SK_REUSEPORT_SELECT_OR_MIGRATE,999,32927
	BPF_PERF_EVENT,1000,32964
	BPF_TRACE_KPROBE_MULTI,1001,32981
	__MAX_BPF_ATTACH_TYPE1002,33006
#define MAX_BPF_ATTACH_TYPE 1005,33033
enum bpf_link_type 1007,33084
	BPF_LINK_TYPE_UNSPEC 1008,33105
	BPF_LINK_TYPE_RAW_TRACEPOINT 1009,33132
	BPF_LINK_TYPE_TRACING 1010,33167
	BPF_LINK_TYPE_CGROUP 1011,33195
	BPF_LINK_TYPE_ITER 1012,33222
	BPF_LINK_TYPE_NETNS 1013,33247
	BPF_LINK_TYPE_XDP 1014,33273
	BPF_LINK_TYPE_PERF_EVENT 1015,33297
	BPF_LINK_TYPE_KPROBE_MULTI 1016,33328
	MAX_BPF_LINK_TYPE,1018,33362
#define BPF_F_ALLOW_OVERRIDE	1065,35411
#define BPF_F_ALLOW_MULTI	1066,35450
#define BPF_F_REPLACE	1067,35486
#define BPF_F_STRICT_ALIGNMENT	1074,35759
#define BPF_F_ANY_ALIGNMENT	1088,36392
#define BPF_F_TEST_RND_HI32	1106,37462
#define BPF_F_TEST_STATE_FREQ	1109,37562
#define BPF_F_SLEEPABLE	1117,37926
#define BPF_F_XDP_HAS_FRAGS	1122,38073
#define BPF_F_KPROBE_MULTI_RETURN	1127,38244
#define BPF_PSEUDO_MAP_FD	1140,38613
#define BPF_PSEUDO_MAP_IDX	1141,38641
#define BPF_PSEUDO_MAP_VALUE	1151,38930
#define BPF_PSEUDO_MAP_IDX_VALUE	1152,38962
#define BPF_PSEUDO_BTF_ID	1163,39321
#define BPF_PSEUDO_FUNC	1172,39583
#define BPF_PSEUDO_CALL	1177,39724
#define BPF_PSEUDO_KFUNC_CALL	1181,39875
	BPF_ANY	1185,39959
	BPF_NOEXIST	1186,40018
	BPF_EXIST	1187,40080
	BPF_F_LOCK	1188,40126
	BPF_F_NO_PREALLOC	1193,40234
	BPF_F_NO_COMMON_LRU	1200,40511
	BPF_F_NUMA_NODE	1202,40589
	BPF_F_RDONLY	1205,40677
	BPF_F_WRONLY	1206,40705
	BPF_F_STACK_BUILD_ID	1209,40801
	BPF_F_ZERO_SEED	1212,40917
	BPF_F_RDONLY_PROG	1215,41005
	BPF_F_WRONLY_PROG	1216,41037
	BPF_F_CLONE	1219,41126
	BPF_F_MMAPABLE	1222,41190
	BPF_F_PRESERVE_ELEMS	1225,41261
	BPF_F_INNER_MAP	1228,41378
#define BPF_F_QUERY_EFFECTIVE	1237,41667
#define BPF_F_TEST_RUN_ON_CPU	1242,41812
#define BPF_F_TEST_XDP_LIVE_FRAMES	1244,41914
enum bpf_stats_type 1247,41992
	BPF_STATS_RUN_TIME 1249,42053
enum bpf_stack_build_id_status 1252,42082
	BPF_STACK_BUILD_ID_EMPTY 1254,42180
	BPF_STACK_BUILD_ID_VALID 1256,42249
	BPF_STACK_BUILD_ID_IP 1258,42325
#define BPF_BUILD_ID_SIZE 1261,42357
struct bpf_stack_build_id 1262,42386
	__s32		status;1263,42414
	unsigned char	build_id[build_id1264,42430
		__u64	offset;1266,42483
		__u64	ip;1267,42499
#define BPF_OBJ_NAME_LEN 1271,42519
union bpf_attr 1273,42549
		__u32	map_type;1275,42630
		__u32	key_size;1276,42679
		__u32	value_size;1277,42724
		__u32	max_entries;1278,42773
		__u32	map_flags;1279,42831
		__u32	inner_map_fd;1282,42914
		__u32	numa_node;1283,42971
		char	map_name[map_name1286,43064
		__u32	map_ifindex;1287,43099
		__u32	btf_fd;1288,43157
		__u32	btf_key_type_id;1289,43211
		__u32	btf_value_type_id;1290,43265
		__u32	btf_vmlinux_value_type_id;1291,43323
		__u64	map_extra;1301,43660
		__u32		map_fd;1305,43749
		__aligned_u64	key;1306,43766
			__aligned_u64 value;1308,43797
			__aligned_u64 next_key;1309,43821
		__u64		flags;1311,43853
		__aligned_u64	in_batch;1315,43930
		__aligned_u64	out_batch;1318,44020
		__aligned_u64	keys;1319,44078
		__aligned_u64	values;1320,44100
		__u32		count;1321,44124
		__u32		map_fd;1326,44255
		__u64		elem_flags;1327,44272
		__u64		flags;1328,44293
	} batch;1329,44309
		__u32		prog_type;1332,44383
		__u32		insn_cnt;1333,44435
		__aligned_u64	insns;1334,44454
		__aligned_u64	license;1335,44477
		__u32		log_level;1336,44502
		__u32		log_size;1337,44556
		__aligned_u64	log_buf;1338,44601
		__u32		kern_version;1339,44653
		__u32		prog_flags;1340,44691
		char		prog_name[prog_name1341,44712
		__u32		prog_ifindex;1342,44749
		__u32		expected_attach_type;1347,44984
		__u32		prog_btf_fd;1348,45015
		__u32		func_info_rec_size;1349,45072
		__aligned_u64	func_info;1350,45136
		__u32		func_info_cnt;1351,45179
		__u32		line_info_rec_size;1352,45241
		__aligned_u64	line_info;1353,45305
		__u32		line_info_cnt;1354,45348
		__u32		attach_btf_id;1355,45410
			__u32		attach_prog_fd;1358,45530
			__u32		attach_btf_obj_fd;1360,45621
		__u32		core_relo_cnt;1362,45655
		__aligned_u64	fd_array;1363,45709
		__aligned_u64	core_relos;1364,45754
		__u32		core_relo_rec_size;1365,45782
		__aligned_u64	pathname;1369,45911
		__u32		bpf_fd;1370,45937
		__u32		file_flags;1371,45954
		__u32		target_fd;1375,46053
		__u32		attach_bpf_fd;1376,46109
		__u32		attach_type;1377,46162
		__u32		attach_flags;1378,46184
		__u32		replace_bpf_fd;1379,46207
		__u32		prog_fd;1386,46404
		__u32		retval;1387,46422
		__u32		data_size_in;1388,46439
		__u32		data_size_out;1389,46490
		__aligned_u64	data_in;1393,46620
		__aligned_u64	data_out;1394,46645
		__u32		repeat;1395,46671
		__u32		duration;1396,46688
		__u32		ctx_size_in;1397,46707
		__u32		ctx_size_out;1398,46756
		__aligned_u64	ctx_in;1402,46883
		__aligned_u64	ctx_out;1403,46907
		__u32		flags;1404,46932
		__u32		cpu;1405,46948
		__u32		batch_size;1406,46962
	} test;1407,46983
			__u32		start_id;1411,47059
			__u32		prog_id;1412,47079
			__u32		map_id;1413,47098
			__u32		btf_id;1414,47116
			__u32		link_id;1415,47134
		__u32		next_id;1417,47158
		__u32		open_flags;1418,47176
		__u32		bpf_fd;1422,47266
		__u32		info_len;1423,47283
		__aligned_u64	info;1424,47302
	} info;1425,47324
		__u32		target_fd;1428,47398
		__u32		attach_type;1429,47450
		__u32		query_flags;1430,47472
		__u32		attach_flags;1431,47494
		__aligned_u64	prog_ids;1432,47517
		__u32		prog_cnt;1433,47543
	} query;1434,47562
		__u64 name;1437,47646
		__u32 prog_fd;1438,47660
	} raw_tracepoint;1439,47677
		__aligned_u64	btf;1442,47747
		__aligned_u64	btf_log_buf;1443,47768
		__u32		btf_size;1444,47797
		__u32		btf_log_size;1445,47816
		__u32		btf_log_level;1446,47839
		__u32		pid;1450,47878
		__u32		fd;1451,47910
		__u32		flags;1452,47940
		__u32		buf_len;1453,47976
		__aligned_u64	buf;1454,48022
		__u32		prog_id;1459,48165
		__u32		fd_type;1460,48205
		__u64		probe_offset;1461,48251
		__u64		probe_addr;1462,48301
	} task_fd_query;1463,48347
		__u32		prog_fd;1466,48421
			__u32		target_fd;1468,48478
			__u32		target_ifindex;1469,48525
		__u32		attach_type;1471,48577
		__u32		flags;1472,48617
			__u32		target_btf_id;1474,48662
				__aligned_u64	iter_info;1476,48735
				__u32		iter_info_len;1477,48795
				__u64		bpf_cookie;1484,49031
			} perf_event;1485,49054
				__u32		flags;1487,49083
				__u32		cnt;1488,49101
				__aligned_u64	syms;1489,49117
				__aligned_u64	addrs;1490,49141
				__aligned_u64	cookies;1491,49166
			} kprobe_multi;1492,49193
	} link_create;1494,49217
		__u32		link_fd;1497,49289
		__u32		new_prog_fd;1499,49364
		__u32		flags;1500,49386
		__u32		old_prog_fd;1503,49518
	} link_update;1504,49540
		__u32		link_fd;1507,49567
	} link_detach;1508,49585
		__u32		type;1511,49658
	} enable_stats;1512,49673
		__u32		link_fd;1515,49746
		__u32		flags;1516,49764
	} iter_create;1517,49780
		__u32		prog_fd;1520,49854
		__u32		map_fd;1521,49872
		__u32		flags;1522,49889
	} prog_bind_map;1523,49924
#define __BPF_FUNC_MAPPER(5148,204748
#define __BPF_ENUM_FN(5348,209667
enum bpf_func_id 5349,209707
	__BPF_FUNC_MAPPER(5350,209726
	__BPF_FUNC_MAPPER(__BPF_ENUM_FN)5350,209726
	__BPF_FUNC_MAX_ID,5351,209760
#undef __BPF_ENUM_FN5353,209783
	BPF_F_RECOMPUTE_CSUM	5359,209911
	BPF_F_INVALIDATE_HASH	5360,209949
	BPF_F_HDR_FIELD_MASK	5367,210122
	BPF_F_PSEUDO_HDR	5372,210204
	BPF_F_MARK_MANGLED_0	5373,210238
	BPF_F_MARK_ENFORCE	5374,210276
	BPF_F_INGRESS	5379,210382
	BPF_F_TUNINFO_IPV6	5384,210498
	BPF_F_SKIP_FIELD_MASK	5389,210611
	BPF_F_USER_STACK	5390,210646
	BPF_F_FAST_STACK_CMP	5392,210727
	BPF_F_REUSE_STACKID	5393,210765
	BPF_F_USER_BUILD_ID	5395,210848
	BPF_F_ZERO_CSUM_TX	5400,210938
	BPF_F_DONT_FRAGMENT	5401,210974
	BPF_F_SEQ_NUMBER	5402,211011
	BPF_F_INDEX_MASK	5409,211161
	BPF_F_CURRENT_CPU	5410,211197
	BPF_F_CTXLEN_MASK	5412,211297
	BPF_F_CURRENT_NETNS	5417,211382
	BPF_CSUM_LEVEL_QUERY,5422,211464
	BPF_CSUM_LEVEL_INC,5423,211487
	BPF_CSUM_LEVEL_DEC,5424,211508
	BPF_CSUM_LEVEL_RESET,5425,211529
	BPF_F_ADJ_ROOM_FIXED_GSO	5430,211601
	BPF_F_ADJ_ROOM_ENCAP_L3_IPV4	5431,211642
	BPF_F_ADJ_ROOM_ENCAP_L3_IPV6	5432,211687
	BPF_F_ADJ_ROOM_ENCAP_L4_GRE	5433,211732
	BPF_F_ADJ_ROOM_ENCAP_L4_UDP	5434,211776
	BPF_F_ADJ_ROOM_NO_CSUM_RESET	5435,211820
	BPF_F_ADJ_ROOM_ENCAP_L2_ETH	5436,211865
	BPF_ADJ_ROOM_ENCAP_L2_MASK	5440,211920
	BPF_ADJ_ROOM_ENCAP_L2_SHIFT	5441,211956
#define BPF_F_ADJ_ROOM_ENCAP_L2(5444,211995
	BPF_F_SYSCTL_BASE_NAME	5450,212170
	BPF_LOCAL_STORAGE_GET_F_CREATE	5455,212267
	BPF_SK_STORAGE_GET_F_CREATE 5459,212452
	BPF_F_GET_BRANCH_RECORDS_SIZE	5464,212569
	BPF_RB_NO_WAKEUP	5471,212734
	BPF_RB_FORCE_WAKEUP	5472,212768
	BPF_RB_AVAIL_DATA 5477,212855
	BPF_RB_RING_SIZE 5478,212879
	BPF_RB_CONS_POS 5479,212902
	BPF_RB_PROD_POS 5480,212924
	BPF_RINGBUF_BUSY_BIT	5485,212989
	BPF_RINGBUF_DISCARD_BIT	5486,213026
	BPF_RINGBUF_HDR_SZ	5487,213066
	BPF_SK_LOOKUP_F_REPLACE	5492,213160
	BPF_SK_LOOKUP_F_NO_REUSEPORT	5493,213201
enum bpf_adj_room_mode 5497,213298
	BPF_ADJ_ROOM_NET,5498,213323
	BPF_ADJ_ROOM_MAC,5499,213342
enum bpf_hdr_start_off 5503,213421
	BPF_HDR_START_MAC,5504,213446
	BPF_HDR_START_NET,5505,213466
enum bpf_lwt_encap_mode 5509,213551
	BPF_LWT_ENCAP_SEG6,5510,213577
	BPF_LWT_ENCAP_SEG6_INLINE,5511,213598
	BPF_LWT_ENCAP_IP,5512,213626
	BPF_F_BPRM_SECUREEXEC	5517,213697
	BPF_F_BROADCAST	5522,213786
	BPF_F_EXCLUDE_INGRESS	5523,213819
#define __bpf_md_ptr(5526,213861
	BPF_SKB_TSTAMP_UNSPEC,5533,213980
	BPF_SKB_TSTAMP_DELIVERY_MONO,5534,214004
struct __sk_buff 5544,214384
	__u32 len;5545,214403
	__u32 pkt_type;5546,214415
	__u32 mark;5547,214432
	__u32 queue_mapping;5548,214445
	__u32 protocol;5549,214467
	__u32 vlan_present;5550,214484
	__u32 vlan_tci;5551,214505
	__u32 vlan_proto;5552,214522
	__u32 priority;5553,214541
	__u32 ingress_ifindex;5554,214558
	__u32 ifindex;5555,214582
	__u32 tc_index;5556,214598
	__u32 cb[cb5557,214615
	__u32 hash;5558,214629
	__u32 tc_classid;5559,214642
	__u32 data;5560,214661
	__u32 data_end;5561,214674
	__u32 napi_id;5562,214691
	__u32 family;5565,214771
	__u32 remote_ip4;5566,214786
	__u32 local_ip4;5567,214840
	__u32 remote_ip6[remote_ip65568,214893
	__u32 local_ip6[local_ip65569,214950
	__u32 remote_port;5570,215006
	__u32 local_port;5571,215061
	__u32 data_meta;5574,215130
	__bpf_md_ptr(5575,215148
	__u64 tstamp;5576,215198
	__u32 wire_len;5577,215213
	__u32 gso_segs;5578,215230
	__bpf_md_ptr(5579,215247
	__u32 gso_size;5580,215285
	__u8  tstamp_type;5581,215302
	__u32 5582,215322
	__u64 hwtstamp;5583,215362
struct bpf_tunnel_key 5586,215383
	__u32 tunnel_id;5587,215407
		__u32 remote_ipv4;5589,215434
		__u32 remote_ipv6[remote_ipv65590,215455
	__u8 tunnel_tos;5592,215483
	__u8 tunnel_ttl;5593,215501
	__u16 tunnel_ext;5594,215519
	__u32 tunnel_label;5595,215565
		__u32 local_ipv4;5597,215595
		__u32 local_ipv6[local_ipv65598,215615
struct bpf_xfrm_state 5605,215762
	__u32 reqid;5606,215786
	__u32 spi;5607,215800
	__u16 family;5608,215847
	__u16 ext;5609,215862
		__u32 remote_ipv4;5611,215910
		__u32 remote_ipv6[remote_ipv65612,215966
enum bpf_ret_code 5623,216307
	BPF_OK 5624,216327
	BPF_DROP 5626,216358
	BPF_REDIRECT 5628,216393
	BPF_LWT_REROUTE 5637,216759
struct bpf_sock 5640,216787
	__u32 bound_dev_if;5641,216805
	__u32 family;5642,216826
	__u32 type;5643,216841
	__u32 protocol;5644,216854
	__u32 mark;5645,216871
	__u32 priority;5646,216884
	__u32 src_ip4;5648,216952
	__u32 src_ip6[src_ip65649,216968
	__u32 src_port;5650,216987
	__be16 dst_port;5651,217027
	__u16 5652,217070
	__u32 dst_ip4;5653,217102
	__u32 dst_ip6[dst_ip65654,217118
	__u32 state;5655,217137
	__s32 rx_queue_mapping;5656,217151
struct bpf_tcp_sock 5659,217180
	__u32 snd_cwnd;5660,217202
	__u32 srtt_us;5661,217253
	__u32 rtt_min;5662,217315
	__u32 snd_ssthresh;5663,217331
	__u32 rcv_nxt;5664,217385
	__u32 snd_nxt;5665,217438
	__u32 snd_una;5666,217484
	__u32 mss_cache;5667,217537
	__u32 ecn_flags;5668,217603
	__u32 rate_delivered;5669,217646
	__u32 rate_interval_us;5670,217712
	__u32 packets_out;5671,217775
	__u32 retrans_out;5672,217831
	__u32 total_retrans;5673,217884
	__u32 segs_in;5674,217952
	__u32 data_segs_in;5677,218044
	__u32 segs_out;5680,218149
	__u32 data_segs_out;5683,218249
	__u32 lost_out;5686,218358
	__u32 sacked_out;5687,218397
	__u64 bytes_received;5688,218439
	__u64 bytes_acked;5692,218579
	__u32 dsack_dups;5696,218713
	__u32 delivered;5699,218820
	__u32 delivered_ce;5700,218887
	__u32 icsk_retransmits;5701,218957
struct bpf_sock_tuple 5704,219029
			__be32 saddr;5707,219073
			__be32 daddr;5708,219090
			__be16 sport;5709,219107
			__be16 dport;5710,219124
		} ipv4;5711,219141
			__be32 saddr[saddr5713,219162
			__be32 daddr[daddr5714,219182
			__be16 sport;5715,219202
			__be16 dport;5716,219219
		} ipv6;5717,219236
struct bpf_xdp_sock 5721,219254
	__u32 queue_id;5722,219276
#define XDP_PACKET_HEADROOM 5725,219297
enum xdp_action 5732,219594
	XDP_ABORTED 5733,219612
	XDP_DROP,5734,219630
	XDP_PASS,5735,219641
	XDP_TX,5736,219652
	XDP_REDIRECT,5737,219661
struct xdp_md 5743,219789
	__u32 data;5744,219805
	__u32 data_end;5745,219818
	__u32 data_meta;5746,219835
	__u32 ingress_ifindex;5748,219904
	__u32 rx_queue_index;5749,219952
	__u32 egress_ifindex;5751,220001
struct bpf_devmap_val 5759,220219
	__u32 ifindex;5760,220243
		int   fd;5762,220289
		__u32 id;5763,220329
	} bpf_prog;5764,220368
struct bpf_cpumap_val 5772,220551
	__u32 qsize;5773,220575
		int   fd;5775,220636
		__u32 id;5776,220675
	} bpf_prog;5777,220713
enum sk_action 5780,220730
	SK_DROP 5781,220747
	SK_PASS,5782,220761
struct sk_msg_md 5788,220888
	__bpf_md_ptr(5789,220907
	__bpf_md_ptr(5790,220936
	__u32 family;5792,220970
	__u32 remote_ip4;5793,220985
	__u32 local_ip4;5794,221039
	__u32 remote_ip6[remote_ip65795,221092
	__u32 local_ip6[local_ip65796,221149
	__u32 remote_port;5797,221205
	__u32 local_port;5798,221260
	__u32 size;5799,221311
	__bpf_md_ptr(5801,221353
struct sk_reuseport_md 5804,221416
	__bpf_md_ptr(5809,221528
	__bpf_md_ptr(5811,221596
	__u32 len;5818,221876
	__u32 eth_protocol;5823,222003
	__u32 ip_protocol;5824,222024
	__u32 bind_inany;5825,222093
	__u32 hash;5826,222153
	__bpf_md_ptr(5839,222831
	__bpf_md_ptr(5840,222869
#define BPF_TAG_SIZE	5843,222921
struct bpf_prog_info 5845,222945
	__u32 type;5846,222968
	__u32 id;5847,222981
	__u8  tag[tag5848,222992
	__u32 jited_prog_len;5849,223018
	__u32 xlated_prog_len;5850,223041
	__aligned_u64 jited_prog_insns;5851,223065
	__aligned_u64 xlated_prog_insns;5852,223098
	__u64 load_time;5853,223132
	__u32 created_by_uid;5854,223174
	__u32 nr_map_ids;5855,223197
	__aligned_u64 map_ids;5856,223216
	char name[name5857,223240
	__u32 ifindex;5858,223270
	__u32 gpl_compatible:gpl_compatible5859,223286
	__u32 5860,223311
	__u64 netns_dev;5861,223343
	__u64 netns_ino;5862,223361
	__u32 nr_jited_ksyms;5863,223379
	__u32 nr_jited_func_lens;5864,223402
	__aligned_u64 jited_ksyms;5865,223429
	__aligned_u64 jited_func_lens;5866,223457
	__u32 btf_id;5867,223489
	__u32 func_info_rec_size;5868,223504
	__aligned_u64 func_info;5869,223531
	__u32 nr_func_info;5870,223557
	__u32 nr_line_info;5871,223578
	__aligned_u64 line_info;5872,223599
	__aligned_u64 jited_line_info;5873,223625
	__u32 nr_jited_line_info;5874,223657
	__u32 line_info_rec_size;5875,223684
	__u32 jited_line_info_rec_size;5876,223711
	__u32 nr_prog_tags;5877,223744
	__aligned_u64 prog_tags;5878,223765
	__u64 run_time_ns;5879,223791
	__u64 run_cnt;5880,223811
	__u64 recursion_misses;5881,223827
	__u32 verified_insns;5882,223852
struct bpf_map_info 5885,223907
	__u32 type;5886,223929
	__u32 id;5887,223942
	__u32 key_size;5888,223953
	__u32 value_size;5889,223970
	__u32 max_entries;5890,223989
	__u32 map_flags;5891,224009
	char  name[name5892,224027
	__u32 ifindex;5893,224058
	__u32 btf_vmlinux_value_type_id;5894,224074
	__u64 netns_dev;5895,224108
	__u64 netns_ino;5896,224126
	__u32 btf_id;5897,224144
	__u32 btf_key_type_id;5898,224159
	__u32 btf_value_type_id;5899,224183
	__u32 5900,224209
	__u64 map_extra;5901,224241
struct bpf_btf_info 5904,224291
	__aligned_u64 btf;5905,224313
	__u32 btf_size;5906,224333
	__u32 id;5907,224350
	__aligned_u64 name;5908,224361
	__u32 name_len;5909,224382
	__u32 kernel_btf;5910,224399
struct bpf_link_info 5913,224450
	__u32 type;5914,224473
	__u32 id;5915,224486
	__u32 prog_id;5916,224497
			__aligned_u64 tp_name;5919,224533
			__u32 tp_name_len;5920,224592
		} raw_tracepoint;5921,224651
			__u32 attach_type;5923,224682
			__u32 target_obj_id;5924,224704
			__u32 target_btf_id;5925,224780
		} tracing;5926,224840
			__u64 cgroup_id;5928,224864
			__u32 attach_type;5929,224884
		} cgroup;5930,224906
			__aligned_u64 target_name;5932,224929
			__u32 target_name_len;5933,224996
					__u32 map_id;5936,225086
				} map;5937,225105
		} iter;5939,225122
			__u32 netns_ino;5941,225144
			__u32 attach_type;5942,225164
		} netns;5943,225186
			__u32 ifindex;5945,225208
		} xdp;5946,225226
struct bpf_sock_addr 5954,225446
	__u32 user_family;5955,225469
	__u32 user_ip4;5956,225529
	__u32 user_ip6[user_ip65959,225636
	__u32 user_port;5962,225749
	__u32 family;5965,225855
	__u32 type;5966,225910
	__u32 protocol;5967,225963
	__u32 msg_src_ip4;5968,226020
	__u32 msg_src_ip6[msg_src_ip65971,226129
	__bpf_md_ptr(5974,226245
struct bpf_sock_ops 5983,226605
	__u32 op;5984,226627
		__u32 args[args5986,226647
		__u32 reply;5987,226704
		__u32 replylong[replylong5988,226754
	__u32 family;5990,226819
	__u32 remote_ip4;5991,226834
	__u32 local_ip4;5992,226888
	__u32 remote_ip6[remote_ip65993,226941
	__u32 local_ip6[local_ip65994,226998
	__u32 remote_port;5995,227054
	__u32 local_port;5996,227109
	__u32 is_fullsock;5997,227160
	__u32 snd_cwnd;6001,227296
	__u32 srtt_us;6002,227313
	__u32 bpf_sock_ops_cb_flags;6003,227363
	__u32 state;6004,227433
	__u32 rtt_min;6005,227447
	__u32 snd_ssthresh;6006,227463
	__u32 rcv_nxt;6007,227484
	__u32 snd_nxt;6008,227500
	__u32 snd_una;6009,227516
	__u32 mss_cache;6010,227532
	__u32 ecn_flags;6011,227550
	__u32 rate_delivered;6012,227568
	__u32 rate_interval_us;6013,227591
	__u32 packets_out;6014,227616
	__u32 retrans_out;6015,227636
	__u32 total_retrans;6016,227656
	__u32 segs_in;6017,227678
	__u32 data_segs_in;6018,227694
	__u32 segs_out;6019,227715
	__u32 data_segs_out;6020,227732
	__u32 lost_out;6021,227754
	__u32 sacked_out;6022,227771
	__u32 sk_txhash;6023,227790
	__u64 bytes_received;6024,227808
	__u64 bytes_acked;6025,227831
	__bpf_md_ptr(6026,227851
	__bpf_md_ptr(6041,228466
	__bpf_md_ptr(6042,228499
	__u32 skb_len;6043,228536
	__u32 skb_tcp_flags;6047,228654
	BPF_SOCK_OPS_RTO_CB_FLAG	6061,229040
	BPF_SOCK_OPS_RETRANS_CB_FLAG	6062,229076
	BPF_SOCK_OPS_STATE_CB_FLAG	6063,229116
	BPF_SOCK_OPS_RTT_CB_FLAG	6064,229154
	BPF_SOCK_OPS_PARSE_ALL_HDR_OPT_CB_FLAG	6083,230046
	BPF_SOCK_OPS_PARSE_UNKNOWN_HDR_OPT_CB_FLAG 6092,230432
	BPF_SOCK_OPS_WRITE_HDR_OPT_CB_FLAG 6107,231117
	BPF_SOCK_OPS_ALL_CB_FLAGS 6109,231210
	BPF_SOCK_OPS_VOID,6116,231351
	BPF_SOCK_OPS_TIMEOUT_INIT,6117,231371
	BPF_SOCK_OPS_RWND_INIT,6120,231492
	BPF_SOCK_OPS_TCP_CONNECT_CB,6124,231637
	BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB,6127,231754
	BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB,6131,231881
	BPF_SOCK_OPS_NEEDS_ECN,6135,232009
	BPF_SOCK_OPS_BASE_RTT,6138,232100
	BPF_SOCK_OPS_RTO_CB,6145,232372
	BPF_SOCK_OPS_RETRANS_CB,6150,232551
	BPF_SOCK_OPS_STATE_CB,6156,232766
	BPF_SOCK_OPS_TCP_LISTEN_CB,6160,232882
	BPF_SOCK_OPS_RTT_CB,6163,232999
	BPF_SOCK_OPS_PARSE_HDR_OPT_CB,6165,233055
	BPF_SOCK_OPS_HDR_OPT_LEN_CB,6179,233460
	BPF_SOCK_OPS_WRITE_HDR_OPT_CB,6196,233972
	BPF_TCP_ESTABLISHED 6230,234977
	BPF_TCP_SYN_SENT,6231,235003
	BPF_TCP_SYN_RECV,6232,235022
	BPF_TCP_FIN_WAIT1,6233,235041
	BPF_TCP_FIN_WAIT2,6234,235061
	BPF_TCP_TIME_WAIT,6235,235081
	BPF_TCP_CLOSE,6236,235101
	BPF_TCP_CLOSE_WAIT,6237,235117
	BPF_TCP_LAST_ACK,6238,235138
	BPF_TCP_LISTEN,6239,235157
	BPF_TCP_CLOSING,6240,235174
	BPF_TCP_NEW_SYN_RECV,6241,235216
	BPF_TCP_MAX_STATES	6243,235240
	TCP_BPF_IW	6247,235295
	TCP_BPF_SNDCWND_CLAMP	6248,235356
	TCP_BPF_DELACK_MAX	6249,235411
	TCP_BPF_RTO_MIN	6250,235468
	TCP_BPF_SYN	6283,236746
	TCP_BPF_SYN_IP	6284,236794
	TCP_BPF_SYN_MAC 6285,236856
	BPF_LOAD_HDR_OPT_TCP_SYN 6289,236943
	BPF_WRITE_HDR_TCP_CURRENT_MSS 6296,237089
	BPF_WRITE_HDR_TCP_SYNACK_COOKIE 6303,237313
struct bpf_perf_event_value 6308,237425
	__u64 counter;6309,237455
	__u64 enabled;6310,237471
	__u64 running;6311,237487
	BPF_DEVCG_ACC_MKNOD	6315,237514
	BPF_DEVCG_ACC_READ	6316,237550
	BPF_DEVCG_ACC_WRITE	6317,237585
	BPF_DEVCG_DEV_BLOCK	6321,237632
	BPF_DEVCG_DEV_CHAR	6322,237668
struct bpf_cgroup_dev_ctx 6325,237707
	__u32 access_type;6327,237807
	__u32 major;6328,237827
	__u32 minor;6329,237841
struct bpf_raw_tracepoint_args 6332,237859
	__u64 args[args6333,237892
	BPF_FIB_LOOKUP_DIRECT 6340,238063
	BPF_FIB_LOOKUP_OUTPUT 6341,238100
	BPF_FIB_LKUP_RET_SUCCESS,6345,238148
	BPF_FIB_LKUP_RET_BLACKHOLE,6346,238204
	BPF_FIB_LKUP_RET_UNREACHABLE,6347,238277
	BPF_FIB_LKUP_RET_PROHIBIT,6348,238351
	BPF_FIB_LKUP_RET_NOT_FWDED,6349,238422
	BPF_FIB_LKUP_RET_FWD_DISABLED,6350,238484
	BPF_FIB_LKUP_RET_UNSUPP_LWT,6351,238555
	BPF_FIB_LKUP_RET_NO_NEIGH,6352,238620
	BPF_FIB_LKUP_RET_FRAG_NEEDED,6353,238683
struct bpf_fib_lookup 6356,238755
	__u8	family;6360,238887
	__u8	l4_protocol;6363,238964
	__be16	sport;6364,238983
	__be16	dport;6365,238998
		__u16	tot_len;6369,239072
		__u16	mtu_result;6372,239164
	__u32	ifindex;6377,239272
		__u8	tos;6381,239323
		__be32	flowinfo;6382,239351
		__u32	rt_metric;6385,239463
		__be32		ipv4_src;6389,239496
		__u32		ipv6_src[ipv6_src6390,239516
		__be32		ipv4_dst;6398,239763
		__u32		ipv6_dst[ipv6_dst6399,239783
	__be16	h_vlan_proto;6403,239855
	__be16	h_vlan_TCI;6404,239877
	__u8	smac[smac6405,239897
	__u8	dmac[dmac6406,239931
struct bpf_redir_neigh 6409,239969
	__u32 nh_family;6411,240047
		__be32		ipv4_nh;6414,240142
		__u32		ipv6_nh[ipv6_nh6415,240161
enum  bpf_check_mtu_flags 6420,240246
	BPF_MTU_CHK_SEGS 6421,240274
enum bpf_check_mtu_ret 6424,240310
	BPF_MTU_CHK_RET_SUCCESS,6425,240335
	BPF_MTU_CHK_RET_FRAG_NEEDED,6426,240400
	BPF_MTU_CHK_RET_SEGS_TOOBIG,6427,240467
enum bpf_task_fd_type 6430,240542
	BPF_FD_TYPE_RAW_TRACEPOINT,6431,240566
	BPF_FD_TYPE_TRACEPOINT,6432,240609
	BPF_FD_TYPE_KPROBE,6433,240649
	BPF_FD_TYPE_KRETPROBE,6434,240703
	BPF_FD_TYPE_UPROBE,6435,240760
	BPF_FD_TYPE_URETPROBE,6436,240806
	BPF_FLOW_DISSECTOR_F_PARSE_1ST_FRAG	6440,240866
	BPF_FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL	6441,240917
	BPF_FLOW_DISSECTOR_F_STOP_AT_ENCAP	6442,240972
struct bpf_flow_keys 6445,241026
	__u16	nhoff;6446,241049
	__u16	thoff;6447,241063
	__u16	addr_proto;6448,241077
	__u8	is_frag;6449,241127
	__u8	is_first_frag;6450,241142
	__u8	is_encap;6451,241163
	__u8	ip_proto;6452,241179
	__be16	n_proto;6453,241195
	__be16	sport;6454,241212
	__be16	dport;6455,241227
			__be32	ipv4_src;6458,241262
			__be32	ipv4_dst;6459,241282
			__u32	ipv6_src[ipv6_src6462,241318
			__u32	ipv6_dst[ipv6_dst6463,241370
	__u32	flags;6466,241431
	__be32	flow_label;6467,241445
struct bpf_func_info 6470,241469
	__u32	insn_off;6471,241492
	__u32	type_id;6472,241509
#define BPF_LINE_INFO_LINE_NUM(6475,241529
#define BPF_LINE_INFO_LINE_COL(6476,241589
struct bpf_line_info 6478,241652
	__u32	insn_off;6479,241675
	__u32	file_name_off;6480,241692
	__u32	line_off;6481,241714
	__u32	line_col;6482,241731
struct bpf_spin_lock 6485,241752
	__u32	val;6486,241775
struct bpf_timer 6489,241791
	__u64 6490,241810
	__u64 6491,241822
struct bpf_sysctl 6494,241866
	__u32	write;6495,241886
	__u32	file_pos;6498,242002
struct bpf_sockopt 6503,242126
	__bpf_md_ptr(6504,242147
	__bpf_md_ptr(6505,242185
	__bpf_md_ptr(6506,242216
	__s32	level;6508,242252
	__s32	optname;6509,242266
	__s32	optlen;6510,242282
	__s32	retval;6511,242297
struct bpf_pidns_info 6514,242316
	__u32 pid;6515,242340
	__u32 tgid;6516,242352
struct bpf_sk_lookup 6520,242447
		__bpf_md_ptr(6522,242479
		__u64 cookie;6523,242540
	__u32 family;6526,242616
	__u32 protocol;6527,242674
	__u32 remote_ip4;6528,242737
	__u32 remote_ip6[remote_ip66529,242781
	__be16 remote_port;6530,242828
	__u16 6531,242874
	__u32 local_ip4;6532,242906
	__u32 local_ip6[local_ip66533,242949
	__u32 local_port;6534,242995
	__u32 ingress_ifindex;6535,243036
struct btf_ptr 6546,243537
	void *ptr;ptr6547,243554
	__u32 type_id;6548,243566
	__u32 flags;6549,243582
	BTF_F_COMPACT	6562,244020
	BTF_F_NONAME	6563,244050
	BTF_F_PTR_RAW	6564,244079
	BTF_F_ZERO	6565,244109
enum bpf_core_relo_kind 6572,244330
	BPF_CORE_FIELD_BYTE_OFFSET 6573,244356
	BPF_CORE_FIELD_BYTE_SIZE 6574,244418
	BPF_CORE_FIELD_EXISTS 6575,244482
	BPF_CORE_FIELD_SIGNED 6576,244559
	BPF_CORE_FIELD_LSHIFT_U64 6577,244647
	BPF_CORE_FIELD_RSHIFT_U64 6578,244723
	BPF_CORE_TYPE_ID_LOCAL 6579,244800
	BPF_CORE_TYPE_ID_TARGET 6580,244872
	BPF_CORE_TYPE_EXISTS 6581,244941
	BPF_CORE_TYPE_SIZE 6582,245017
	BPF_CORE_ENUMVAL_EXISTS 6583,245080
	BPF_CORE_ENUMVAL_VALUE 6584,245162
struct bpf_core_relo 6635,247291
	__u32 insn_off;6636,247314
	__u32 type_id;6637,247331
	__u32 access_str_off;6638,247347
	enum bpf_core_relo_kind kind;6639,247370

include/linux/types.h,29
#define _LINUX_TYPES_H5,120

include/linux/swab.h,1005
#define _LINUX_SWAB_H4,129
#define ___constant_swab16(12,334
#define ___constant_swab32(16,464
#define ___constant_swab64(22,703
#define ___constant_swahw32(32,1203
#define ___constant_swahb32(36,1344
static __inline__  __u16 __fswab16(46,1671
static __inline__  __u32 __fswab32(57,1890
static __inline__  __u64 __fswab64(68,2108
static __inline__  __u32 __fswahw32(83,2486
static __inline__  __u32 __fswahb32(92,2636
#define __swab16(105,2867
#define __swab32(114,3057
#define __swab64(123,3247
#define __swahw32(134,3481
#define __swahb32(145,3730
static __inline__ __u16 __swab16p(154,3964
static __inline__ __u32 __swab32p(167,4226
static __inline__ __u64 __swab64p(180,4488
static __inline__ __u32 __swahw32p(195,4802
static __inline__ __u32 __swahb32p(210,5142
static __inline__ void __swab16s(223,5392
static __inline__ void __swab32s(235,5621
static __inline__ void __swab64s(248,5851
static __inline__ void __swahw32s(263,6132
static __inline__ void __swahb32s(278,6444

include/linux/udp.h,373
#define _LINUX_UDP_H20,739
struct udphdr 24,787
	__be16	source;25,803
	__be16	dest;26,819
	__be16	len;27,833
	__sum16	check;28,846
#define UDP_CORK	32,891
#define UDP_ENCAP	33,955
#define UDP_NO_CHECK6_TX 34,1029
#define UDP_NO_CHECK6_RX 35,1099
#define UDP_ENCAP_ESPINUDP_NON_IKE	38,1201
#define UDP_ENCAP_ESPINUDP	39,1277
#define UDP_ENCAP_L2TPINUDP	40,1343

include/linux/in6.h,2543
#define _LINUX_IN6_H24,705
struct in6_addr 32,787
		__u8		u6_addr8[u6_addr834,814
		__be16		u6_addr16[u6_addr1635,836
		__be32		u6_addr32[u6_addr3236,860
	} in6_u;37,884
#define s6_addr	38,894
#define s6_addr16	39,927
#define s6_addr32	40,962
#define IPV6_FLOWINFO_FLOWLABEL	51,1228
#define IPV6_FLOWINFO_PRIORITY	52,1272
#define IPV6_PRIORITY_UNCHARACTERIZED	55,1353
#define IPV6_PRIORITY_FILLER	56,1398
#define IPV6_PRIORITY_UNATTENDED	57,1435
#define IPV6_PRIORITY_RESERVED1	58,1475
#define IPV6_PRIORITY_BULK	59,1515
#define IPV6_PRIORITY_RESERVED2	60,1550
#define IPV6_PRIORITY_INTERACTIVE	61,1590
#define IPV6_PRIORITY_CONTROL	62,1631
#define IPV6_PRIORITY_8	63,1669
#define IPV6_PRIORITY_9	64,1702
#define IPV6_PRIORITY_10	65,1735
#define IPV6_PRIORITY_11	66,1768
#define IPV6_PRIORITY_12	67,1801
#define IPV6_PRIORITY_13	68,1834
#define IPV6_PRIORITY_14	69,1867
#define IPV6_PRIORITY_15	70,1900
#define IPPROTO_HOPOPTS	75,1967
#define IPPROTO_ROUTING	76,2024
#define IPPROTO_FRAGMENT	77,2079
#define IPPROTO_ICMPV6	78,2139
#define IPPROTO_NONE	79,2181
#define IPPROTO_DSTOPTS	80,2233
#define IPPROTO_MH	81,2292
#define IPV6_TLV_PAD1	86,2373
#define IPV6_TLV_PADN	87,2398
#define IPV6_TLV_ROUTERALERT	88,2423
#define IPV6_TLV_JUMBO	89,2454
#define IPV6_TLV_HAO	90,2482
#define IPV6_ADDRFORM	95,2565
#define IPV6_2292PKTINFO	96,2590
#define IPV6_2292HOPOPTS	97,2617
#define IPV6_2292DSTOPTS	98,2644
#define IPV6_2292RTHDR	99,2671
#define IPV6_2292PKTOPTIONS	100,2697
#define IPV6_CHECKSUM	101,2727
#define IPV6_2292HOPLIMIT	102,2752
#define IPV6_NEXTHOP	103,2780
#define IPV6_AUTHHDR	104,2804
#define IPV6_FLOWINFO	105,2844
#define IPV6_UNICAST_HOPS	107,2871
#define IPV6_MULTICAST_IF	108,2900
#define IPV6_MULTICAST_HOPS	109,2929
#define IPV6_MULTICAST_LOOP	110,2960
#define IPV6_ADD_MEMBERSHIP	111,2991
#define IPV6_DROP_MEMBERSHIP	112,3022
#define IPV6_ROUTER_ALERT	113,3054
#define IPV6_MTU_DISCOVER	114,3083
#define IPV6_MTU	115,3112
#define IPV6_RECVERR	116,3133
#define IPV6_V6ONLY	117,3158
#define IPV6_JOIN_ANYCAST	118,3182
#define IPV6_LEAVE_ANYCAST	119,3211
#define IPV6_PMTUDISC_DONT	122,3273
#define IPV6_PMTUDISC_WANT	123,3303
#define IPV6_PMTUDISC_DO	124,3333
#define IPV6_PMTUDISC_PROBE	125,3361
#define IPV6_PMTUDISC_INTERFACE	129,3505
#define IPV6_PMTUDISC_OMIT	133,3665
#define IPV6_FLOWLABEL_MGR	136,3712
#define IPV6_FLOWINFO_SEND	137,3742
#define IPV6_IPSEC_POLICY	139,3773
#define IPV6_XFRM_POLICY	140,3802
#define IPV6_HDRINCL	141,3830

include/linux/socket.h,2786
#define __ASM_GENERIC_SOCKET_H4,138
#define SOL_SOCKET	7,194
#define SO_DEBUG	9,216
#define SO_REUSEADDR	10,235
#define SO_TYPE	11,258
#define SO_ERROR	12,277
#define SO_DONTROUTE	13,296
#define SO_BROADCAST	14,319
#define SO_SNDBUF	15,342
#define SO_RCVBUF	16,362
#define SO_SNDBUFFORCE	17,382
#define SO_RCVBUFFORCE	18,408
#define SO_KEEPALIVE	19,434
#define SO_OOBINLINE	20,457
#define SO_NO_CHECK	21,481
#define SO_PRIORITY	22,504
#define SO_LINGER	23,527
#define SO_BSDCOMPAT	24,548
#define SO_REUSEPORT	25,572
#define SO_PASSCRED	27,652
#define SO_PEERCRED	28,675
#define SO_RCVLOWAT	29,698
#define SO_SNDLOWAT	30,721
#define SO_RCVTIMEO_OLD	31,744
#define SO_SNDTIMEO_OLD	32,771
#define SO_SECURITY_AUTHENTICATION	36,875
#define SO_SECURITY_ENCRYPTION_TRANSPORT	37,914
#define SO_SECURITY_ENCRYPTION_NETWORK	38,958
#define SO_BINDTODEVICE	40,1002
#define SO_ATTACH_FILTER	43,1053
#define SO_DETACH_FILTER	44,1081
#define SO_GET_FILTER	45,1109
#define SO_PEERNAME	47,1150
#define SO_ACCEPTCONN	49,1175
#define SO_PEERSEC	51,1202
#define SO_PASSSEC	52,1225
#define SO_MARK	54,1249
#define SO_PROTOCOL	56,1271
#define SO_DOMAIN	57,1295
#define SO_RXQ_OVFL 59,1318
#define SO_WIFI_STATUS	61,1354
#define SCM_WIFI_STATUS	62,1381
#define SO_PEEK_OFF	63,1420
#define SO_NOFCS	66,1512
#define SO_LOCK_FILTER	68,1534
#define SO_SELECT_ERR_QUEUE	70,1562
#define SO_BUSY_POLL	72,1594
#define SO_MAX_PACING_RATE	74,1620
#define SO_BPF_EXTENSIONS	76,1651
#define SO_INCOMING_CPU	78,1681
#define SO_ATTACH_BPF	80,1710
#define SO_DETACH_BPF	81,1736
#define SO_ATTACH_REUSEPORT_CBPF	83,1777
#define SO_ATTACH_REUSEPORT_EBPF	84,1813
#define SO_CNX_ADVICE	86,1850
#define SCM_TIMESTAMPING_OPT_STATS	88,1877
#define SO_MEMINFO	90,1916
#define SO_INCOMING_NAPI_ID	92,1940
#define SO_COOKIE	94,1972
#define SCM_TIMESTAMPING_PKTINFO	96,1995
#define SO_PEERGROUPS	98,2032
#define SO_ZEROCOPY	100,2059
#define SO_TXTIME	102,2084
#define SCM_TXTIME	103,2106
#define SO_BINDTOIFINDEX	105,2137
#define SO_TIMESTAMP_OLD 107,2166
#define SO_TIMESTAMPNS_OLD 108,2201
#define SO_TIMESTAMPING_OLD 109,2236
#define SO_TIMESTAMP_NEW 111,2272
#define SO_TIMESTAMPNS_NEW 112,2307
#define SO_TIMESTAMPING_NEW 113,2342
#define SO_RCVTIMEO_NEW 115,2378
#define SO_SNDTIMEO_NEW 116,2413
#define SO_DETACH_REUSEPORT_BPF 118,2449
#define SO_TIMESTAMP	124,2631
#define SO_TIMESTAMPNS	125,2670
#define SO_TIMESTAMPING	126,2713
#define SO_RCVTIMEO	128,2759
#define SO_SNDTIMEO	129,2796
#define SO_TIMESTAMP 131,2839
#define SO_TIMESTAMPNS 132,2942
#define SO_TIMESTAMPING 133,3051
#define SO_RCVTIMEO 135,3164
#define SO_SNDTIMEO 136,3264
#define SCM_TIMESTAMP 139,3372
#define SCM_TIMESTAMPNS 140,3417
#define SCM_TIMESTAMPING 141,3464

include/linux/if_arp.h,2598
#define _LINUX_IF_ARP_H26,1024
#define ARPHRD_NETROM	31,1116
#define ARPHRD_ETHER 32,1173
#define	ARPHRD_EETHER	33,1221
#define	ARPHRD_AX25	34,1274
#define	ARPHRD_PRONET	35,1318
#define	ARPHRD_CHAOS	36,1368
#define	ARPHRD_IEEE802	37,1409
#define	ARPHRD_ARCNET	38,1467
#define	ARPHRD_APPLETLK	39,1507
#define ARPHRD_DLCI	40,1552
#define ARPHRD_ATM	41,1600
#define ARPHRD_METRICOM	42,1637
#define	ARPHRD_IEEE1394	43,1700
#define ARPHRD_EUI64	44,1760
#define ARPHRD_INFINIBAND 45,1820
#define ARPHRD_SLIP	48,1909
#define ARPHRD_CSLIP	49,1933
#define ARPHRD_SLIP6	50,1958
#define ARPHRD_CSLIP6	51,1983
#define ARPHRD_RSRVD	52,2009
#define ARPHRD_ADAPT	53,2062
#define ARPHRD_ROSE	54,2087
#define ARPHRD_X25	55,2111
#define ARPHRD_HWX25	56,2154
#define ARPHRD_CAN	57,2215
#define ARPHRD_PPP	58,2274
#define ARPHRD_CISCO	59,2297
#define ARPHRD_HDLC	60,2343
#define ARPHRD_LAPB	61,2376
#define ARPHRD_DDCMP 62,2415
#define ARPHRD_RAWHDLC	63,2479
#define ARPHRD_TUNNEL	65,2525
#define ARPHRD_TUNNEL6	66,2572
#define ARPHRD_FRAD	67,2628
#define ARPHRD_SKIP	68,2699
#define ARPHRD_LOOPBACK	69,2741
#define ARPHRD_LOCALTLK 70,2793
#define ARPHRD_FDDI	71,2846
#define ARPHRD_BIF 72,2910
#define ARPHRD_SIT	73,2985
#define ARPHRD_IPDDP	74,3042
#define ARPHRD_IPGRE	75,3096
#define ARPHRD_PIMREG	76,3142
#define ARPHRD_HIPPI	77,3200
#define ARPHRD_ASH	78,3268
#define ARPHRD_ECONET	79,3316
#define ARPHRD_IRDA 80,3364
#define ARPHRD_FCPP	82,3466
#define ARPHRD_FCAL	83,3525
#define ARPHRD_FCPL	84,3585
#define ARPHRD_FCFABRIC	85,3641
#define ARPHRD_IEEE802_TR 87,3751
#define ARPHRD_IEEE80211 88,3812
#define ARPHRD_IEEE80211_PRISM 89,3862
#define ARPHRD_IEEE80211_RADIOTAP 90,3932
#define ARPHRD_IEEE802154	91,4006
#define ARPHRD_IEEE802154_MONITOR 92,4038
#define ARPHRD_PHONET	94,4113
#define ARPHRD_PHONET_PIPE 95,4165
#define ARPHRD_CAIF	96,4223
#define ARPHRD_IP6GRE	97,4271
#define ARPHRD_NETLINK	98,4319
#define ARPHRD_6LOWPAN	99,4369
#define ARPHRD_VOID	101,4433
#define ARPHRD_NONE	102,4496
#define	ARPOP_REQUEST	105,4579
#define	ARPOP_REPLY	106,4624
#define	ARPOP_RREQUEST	107,4665
#define	ARPOP_RREPLY	108,4712
#define	ARPOP_InREQUEST	109,4755
#define	ARPOP_InREPLY	110,4803
#define	ARPOP_NAK	111,4848
struct arphdr 118,4951
	__be16		ar_hrd;119,4967
	__be16		ar_pro;120,5018
	unsigned char	ar_hln;121,5069
	unsigned char	ar_pln;122,5126
	__be16		ar_op;123,5183
	unsigned char		ar_sha[ar_sha129,5317
	unsigned char		ar_sip[ar_sip130,5381
	unsigned char		ar_tha[ar_tha131,5434
	unsigned char		ar_tip[ar_tip132,5498

include/linux/if_ether.h,2726
#define _LINUX_IF_ETHER_H24,905
#define ETH_ALEN	33,1080
#define __ETH_HLEN	39,1416
#define ETH_ZLEN	40,1470
#define ETH_DATA_LEN	41,1527
#define ETH_FRAME_LEN	42,1584
#define ETH_FCS_LEN	43,1648
#define ETH_P_LOOP	49,1755
#define ETH_P_PUP	50,1813
#define ETH_P_PUPAT	51,1863
#define ETH_P_TSN	52,1925
#define ETH_P_IP	53,1980
#define ETH_P_X25	54,2036
#define ETH_P_ARP	55,2081
#define	ETH_P_BPQ	56,2139
#define ETH_P_IEEEPUP	57,2235
#define ETH_P_IEEEPUPAT	58,2298
#define ETH_P_BATMAN	59,2374
#define ETH_P_DEC 60,2474
#define ETH_P_DNA_DL 61,2549
#define ETH_P_DNA_RC 62,2624
#define ETH_P_DNA_RT 63,2699
#define ETH_P_LAT 64,2774
#define ETH_P_DIAG 65,2849
#define ETH_P_CUST 66,2924
#define ETH_P_SCA 67,2999
#define ETH_P_TEB	68,3074
#define ETH_P_RARP 69,3128
#define ETH_P_ATALK	70,3190
#define ETH_P_AARP	71,3239
#define ETH_P_8021Q	72,3288
#define ETH_P_IPX	73,3359
#define ETH_P_IPV6	74,3406
#define ETH_P_PAUSE	75,3459
#define ETH_P_SLOW	76,3526
#define ETH_P_WCCP	77,3590
#define ETH_P_MPLS_UC	79,3707
#define ETH_P_MPLS_MC	80,3765
#define ETH_P_ATMMPOA	81,3824
#define ETH_P_PPP_DISC	82,3883
#define ETH_P_PPP_SES	83,3949
#define ETH_P_LINK_CTL	84,4008
#define ETH_P_ATMFATE	85,4074
#define ETH_P_PAE	88,4164
#define ETH_P_AOE	89,4229
#define ETH_P_8021AD	90,4280
#define ETH_P_802_EX1	91,4345
#define ETH_P_TIPC	92,4410
#define ETH_P_8021AH	93,4451
#define ETH_P_MVRP	94,4523
#define ETH_P_1588	95,4593
#define ETH_P_PRP	96,4645
#define ETH_P_FCOE	97,4699
#define ETH_P_TDLS	98,4761
#define ETH_P_FIP	99,4807
#define ETH_P_80221	100,4868
#define ETH_P_LOOPBACK	101,4950
#define ETH_P_QINQ1	102,5028
#define ETH_P_QINQ2	103,5119
#define ETH_P_QINQ3	104,5210
#define ETH_P_EDSA	105,5301
#define ETH_P_AF_IUCV 106,5384
#define ETH_P_802_3_MIN	108,5471
#define ETH_P_802_3	115,5678
#define ETH_P_AX25	116,5741
#define ETH_P_ALL	117,5803
#define ETH_P_802_2	118,5864
#define ETH_P_SNAP	119,5913
#define ETH_P_DDCMP 120,5961
#define ETH_P_WAN_PPP 121,6036
#define ETH_P_PPP_MP 122,6111
#define ETH_P_LOCALTALK 123,6186
#define ETH_P_CAN	124,6247
#define ETH_P_CANFD	125,6308
#define ETH_P_PPPTALK	126,6371
#define ETH_P_TR_802_2	127,6436
#define ETH_P_MOBITEX	128,6488
#define ETH_P_CONTROL	129,6547
#define ETH_P_IRDA	130,6612
#define ETH_P_ECONET	131,6658
#define ETH_P_HDLC	132,6708
#define ETH_P_ARCNET	133,6755
#define ETH_P_DSA	134,6819
#define ETH_P_TRAILER	135,6876
#define ETH_P_PHONET	136,6935
#define ETH_P_IEEE802154 137,6999
#define ETH_P_CAIF	138,7058
#define ETH_P_XDSA	139,7117
struct ethhdr 145,7221
	unsigned char	h_dest[h_dest146,7237
	unsigned char	h_source[h_source147,7297
	__be16		h_proto;148,7356

include/linux/ipv6.h,3697
#define _IPV6_H4,123
#define IPV6_MIN_MTU	11,259
struct in6_pktinfo 20,423
	struct in6_addr	ipi6_addr;21,444
	int		ipi6_ifindex;22,472
struct ip6_mtuinfo 27,530
	struct sockaddr_in6	ip6m_addr;28,551
	__u32			ip6m_mtu;29,583
struct in6_ifreq 33,613
	struct in6_addr	ifr6_addr;34,632
	__u32		ifr6_prefixlen;35,660
	int		ifr6_ifindex;36,684
#define IPV6_SRCRT_STRICT	39,709
#define IPV6_SRCRT_TYPE_0	40,774
#define IPV6_SRCRT_TYPE_2	41,836
#define IPV6_SRCRT_TYPE_3	42,897
#define IPV6_SRCRT_TYPE_4	43,961
struct ipv6_rt_hdr 48,1047
	__u8		nexthdr;49,1068
	__u8		hdrlen;50,1084
	__u8		type;51,1099
	__u8		segments_left;52,1112
struct ipv6_opt_hdr 61,1198
	__u8 		nexthdr;62,1220
	__u8 		hdrlen;63,1237
#define ipv6_destopt_hdr 69,1358
#define ipv6_hopopt_hdr 70,1396
#define IPV6_OPT_ROUTERALERT_MLD	73,1478
struct rt0_hdr 79,1596
	struct ipv6_rt_hdr	rt_hdr;80,1613
	__u32			reserved;81,1641
	struct in6_addr		addr[addr82,1660
#define rt0_type	84,1688
struct rt2_hdr 91,1755
	struct ipv6_rt_hdr	rt_hdr;92,1772
	__u32			reserved;93,1800
	struct in6_addr		addr;94,1819
#define rt2_type	96,1844
struct ipv6_destopt_hao 103,1939
	__u8			type;104,1965
	__u8			length;105,1979
	struct in6_addr		addr;106,1995
struct ipv6hdr 116,2183
	__u8			priority:priority118,2238
				version:version119,2258
	__u8			version:version121,2310
				priority:priority122,2329
	__u8			flow_lbl[flow_lbl126,2396
	__be16			payload_len;128,2418
	__u8			nexthdr;129,2441
	__u8			hop_limit;130,2458
	struct	in6_addr	saddr;132,2478
	struct	in6_addr	daddr;133,2502
	DEVCONF_FORWARDING 139,2591
	DEVCONF_HOPLIMIT,140,2616
	DEVCONF_MTU6,141,2635
	DEVCONF_ACCEPT_RA,142,2650
	DEVCONF_ACCEPT_REDIRECTS,143,2670
	DEVCONF_AUTOCONF,144,2697
	DEVCONF_DAD_TRANSMITS,145,2716
	DEVCONF_RTR_SOLICITS,146,2740
	DEVCONF_RTR_SOLICIT_INTERVAL,147,2763
	DEVCONF_RTR_SOLICIT_DELAY,148,2794
	DEVCONF_USE_TEMPADDR,149,2822
	DEVCONF_TEMP_VALID_LFT,150,2845
	DEVCONF_TEMP_PREFERED_LFT,151,2870
	DEVCONF_REGEN_MAX_RETRY,152,2898
	DEVCONF_MAX_DESYNC_FACTOR,153,2924
	DEVCONF_MAX_ADDRESSES,154,2952
	DEVCONF_FORCE_MLD_VERSION,155,2976
	DEVCONF_ACCEPT_RA_DEFRTR,156,3004
	DEVCONF_ACCEPT_RA_PINFO,157,3031
	DEVCONF_ACCEPT_RA_RTR_PREF,158,3057
	DEVCONF_RTR_PROBE_INTERVAL,159,3086
	DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN,160,3115
	DEVCONF_PROXY_NDP,161,3152
	DEVCONF_OPTIMISTIC_DAD,162,3172
	DEVCONF_ACCEPT_SOURCE_ROUTE,163,3197
	DEVCONF_MC_FORWARDING,164,3227
	DEVCONF_DISABLE_IPV6,165,3251
	DEVCONF_ACCEPT_DAD,166,3274
	DEVCONF_FORCE_TLLAO,167,3295
	DEVCONF_NDISC_NOTIFY,168,3317
	DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL,169,3340
	DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL,170,3384
	DEVCONF_SUPPRESS_FRAG_NDISC,171,3428
	DEVCONF_ACCEPT_RA_FROM_LOCAL,172,3458
	DEVCONF_USE_OPTIMISTIC,173,3489
	DEVCONF_ACCEPT_RA_MTU,174,3514
	DEVCONF_STABLE_SECRET,175,3538
	DEVCONF_USE_OIF_ADDRS_ONLY,176,3562
	DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT,177,3591
	DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN,178,3625
	DEVCONF_DROP_UNICAST_IN_L2_MULTICAST,179,3663
	DEVCONF_DROP_UNSOLICITED_NA,180,3702
	DEVCONF_KEEP_ADDR_ON_DOWN,181,3732
	DEVCONF_RTR_SOLICIT_MAX_INTERVAL,182,3760
	DEVCONF_SEG6_ENABLED,183,3795
	DEVCONF_SEG6_REQUIRE_HMAC,184,3818
	DEVCONF_ENHANCED_DAD,185,3846
	DEVCONF_ADDR_GEN_MODE,186,3869
	DEVCONF_DISABLE_POLICY,187,3893
	DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN,188,3918
	DEVCONF_NDISC_TCLASS,189,3955
	DEVCONF_RPL_SEG_ENABLED,190,3978
	DEVCONF_RA_DEFRTR_METRIC,191,4004
	DEVCONF_IOAM6_ENABLED,192,4031
	DEVCONF_IOAM6_ID,193,4055
	DEVCONF_IOAM6_ID_WIDE,194,4074
	DEVCONF_NDISC_EVICT_NOCARRIER,195,4098
	DEVCONF_ACCEPT_UNTRACKED_NA,196,4130
	DEVCONF_MAX197,4160

include/linux/ip.h,2478
#define _LINUX_IP_H20,737
#define IPTOS_TOS_MASK	25,806
#define IPTOS_TOS(26,835
#define	IPTOS_LOWDELAY	27,882
#define	IPTOS_THROUGHPUT	28,911
#define	IPTOS_RELIABILITY	29,941
#define	IPTOS_MINCOST	30,972
#define IPTOS_PREC_MASK	32,1001
#define IPTOS_PREC(33,1031
#define IPTOS_PREC_NETCONTROL 34,1080
#define IPTOS_PREC_INTERNETCONTROL 35,1125
#define IPTOS_PREC_CRITIC_ECP 36,1170
#define IPTOS_PREC_FLASHOVERRIDE 37,1215
#define IPTOS_PREC_FLASH 38,1260
#define IPTOS_PREC_IMMEDIATE 39,1305
#define IPTOS_PREC_PRIORITY 40,1350
#define IPTOS_PREC_ROUTINE 41,1395
#define IPOPT_COPY	45,1459
#define IPOPT_CLASS_MASK	46,1484
#define IPOPT_NUMBER_MASK	47,1514
#define	IPOPT_COPIED(49,1546
#define	IPOPT_CLASS(50,1588
#define	IPOPT_NUMBER(51,1635
#define	IPOPT_CONTROL	53,1685
#define	IPOPT_RESERVED1	54,1713
#define	IPOPT_MEASUREMENT	55,1743
#define	IPOPT_RESERVED2	56,1774
#define IPOPT_END	58,1805
#define IPOPT_NOOP	59,1842
#define IPOPT_SEC	60,1880
#define IPOPT_LSRR	61,1928
#define IPOPT_TIMESTAMP	62,1977
#define IPOPT_CIPSO	63,2024
#define IPOPT_RR	64,2074
#define IPOPT_SID	65,2110
#define IPOPT_SSRR	66,2158
#define IPOPT_RA	67,2207
#define IPVERSION	69,2255
#define MAXTTL	70,2275
#define IPDEFTTL	71,2295
#define IPOPT_OPTVAL 73,2316
#define IPOPT_OLEN 74,2339
#define IPOPT_OFFSET 75,2362
#define IPOPT_MINOFF 76,2385
#define MAX_IPOPTLEN 77,2408
#define IPOPT_NOP 78,2432
#define IPOPT_EOL 79,2461
#define IPOPT_TS 80,2489
#define	IPOPT_TS_TSONLY	82,2524
#define	IPOPT_TS_TSANDADDR	83,2574
#define	IPOPT_TS_PRESPEC	84,2635
#define IPV4_BEET_PHMAXLEN 86,2693
struct iphdr 88,2723
	__u8	ihl:ihl90,2776
		version:version91,2789
	__u8	version:version93,2840
  		ihl:ihl94,2857
	__u8	tos;98,2919
	__be16	tot_len;99,2930
	__be16	id;100,2947
	__be16	frag_off;101,2959
	__u8	ttl;102,2977
	__u8	protocol;103,2988
	__sum16	check;104,3004
	__be32	saddr;105,3020
	__be32	daddr;106,3035
struct ip_auth_hdr 111,3085
	__u8  nexthdr;112,3106
	__u8  hdrlen;113,3122
	__be16 reserved;114,3182
	__be32 spi;115,3200
	__be32 seq_no;116,3213
	__u8  auth_data[auth_data117,3252
struct ip_esp_hdr 120,3332
	__be32 spi;121,3352
	__be32 seq_no;122,3365
	__u8  enc_data[enc_data123,3404
struct ip_comp_hdr 126,3483
	__u8 nexthdr;127,3504
	__u8 flags;128,3519
	__be16 cpi;129,3532
struct ip_beet_phdr 132,3549
	__u8 nexthdr;133,3571
	__u8 hdrlen;134,3586
	__u8 padlen;135,3600
	__u8 reserved;136,3614

ep_config.h,672
#define ___EP_CONFIG____11,284
#define LXC_IPV4 17,453
#define LXC_ID 25,695
#define SECLABEL 27,759
#define SECLABEL_NB 29,830
#define POLICY_VERDICT_LOG_FILTER 32,921
#define HOST_EP_ID 34,993
#define POLICY_MAP 36,1020
#define DEBUG39,1084
#define DROP_NOTIFY41,1105
#define TRACE_NOTIFY42,1125
#define CT_MAP_TCP6 43,1146
#define CT_MAP_ANY6 44,1192
#define CT_MAP_TCP4 45,1238
#define CT_MAP_ANY4 46,1284
#define CT_MAP_SIZE_TCP 47,1330
#define CT_MAP_SIZE_ANY 48,1359
#define CALLS_MAP 49,1388
#define CUSTOM_CALLS_MAP 50,1430
#define LOCAL_DELIVERY_METRICS51,1486
#define CONNTRACK_ACCOUNTING52,1517
#define DIRECT_ROUTING_DEV_IFINDEX 53,1546

bpf_sock.c,2397
#define SKIP_POLICY_MAP	10,197
#define SKIP_CALLS_MAP	11,223
#define SYS_REJECT	21,421
#define SYS_PROCEED	22,442
# define HOST_NETNS_COOKIE 25,491
static __always_inline __maybe_unused bool is_v4_loopback(28,551
static __always_inline __maybe_unused bool is_v6_loopback(34,739
ctx_dst_port(44,1044
ctx_src_port(52,1204
void ctx_set_port(60,1369
static __always_inline __maybe_unused bool task_in_extended_hostns(65,1465
ctx_in_hostns(76,1733
bool sock_is_health_check(93,2084
__u64 sock_select_slot(105,2357
bool sock_proto_enabled(112,2541
	__uint(127,2749
	__type(128,2787
	__type(129,2827
	__uint(130,2869
	__uint(131,2907
} LB4_REVERSE_NAT_SK_MAP __section_maps_btf;132,2958
static __always_inline int sock4_update_revnat(134,3004
sock4_skip_xlate(159,3709
sock4_wildcard_lookup(178,4183
sock4_wildcard_lookup_full(211,5236
sock4_skip_xlate_if_same_netns(259,7449
static __always_inline int __sock4_xlate_fwd(288,8097
__sock4_health_fwd(437,12656
__section(454,13076
static __always_inline int __sock4_post_bind(477,13501
__section(510,14427
static __always_inline void sock4_auto_bind(526,14697
static __always_inline int __sock4_pre_bind(532,14816
__section(554,15357
static __always_inline int __sock4_xlate_rev(571,15718
__section(614,16939
__section(628,17191
__section(636,17354
	__uint(649,17634
	__type(650,17672
	__type(651,17712
	__uint(652,17754
	__uint(653,17792
} LB6_REVERSE_NAT_SK_MAP __section_maps_btf;654,17843
static __always_inline int sock6_update_revnat(656,17889
static __always_inline void ctx_get_v6_address(681,18597
static __always_inline void ctx_get_v6_src_address(695,18905
static __always_inline void ctx_set_v6_address(709,19211
sock6_skip_xlate(723,19539
sock6_wildcard_lookup(742,20041
sock6_wildcard_lookup_full(775,21141
int sock6_xlate_v4_in_v6(800,21972
sock6_post_bind_v4_in_v6(832,22707
static __always_inline int __sock6_post_bind(852,23144
__section(880,23757
sock6_pre_bind_v4_in_v6(897,24049
static __always_inline void sock6_auto_bind(923,24640
static __always_inline int __sock6_pre_bind(932,24805
__section(955,25326
static __always_inline int __sock6_xlate_fwd(972,25682
__sock6_health_fwd(1086,28608
__section(1112,29211
sock6_xlate_rev_v4_in_v6(1135,29635
static __always_inline int __sock6_xlate_rev(1164,30270
__section(1208,31503
__section(1222,31750
__section(1230,31908

bpf_alignchecker.c,246
#define DEBUG4,94
#define TRACE_NOTIFY5,108
#define DROP_NOTIFY6,129
#define POLICY_VERDICT_NOTIFY7,149
#define ENABLE_CAPTURE8,179
#define TRACE_SOCK_NOTIFY9,202
#define __add_type(29,794
#define __expand(30,834
#define add_type(31,880

tests/xdp_nodeport_lb4_nat_backend.c,722
#define ETH_HLEN 10,244
#define ENABLE_IPV413,300
#define ENABLE_NODEPORT14,320
#define ENABLE_NODEPORT_ACCELERATION15,344
#define DISABLE_LOOPBACK_LB17,382
#define USE_BPF_PROG_FOR_INGRESS_POLICY20,481
#undef FORCE_LOCAL_POLICY_EVAL_AT_SOURCE21,521
#define CLIENT_IP	23,563
#define CLIENT_PORT	24,593
#define FRONTEND_IP	26,632
#define FRONTEND_PORT	27,664
#define LB_IP	29,700
#define LB_PORT	30,728
#define BACKEND_IP	32,764
#define BACKEND_PORT	33,795
static volatile const __u8 *client_mac client_mac41,930
static volatile const __u8 *lb_mac lb_mac42,980
#define FROM_XDP	44,1027
	__uint(47,1056
	__uint(48,1096
	__uint(49,1130
	__array(50,1155
PKTGEN(61,1370
SETUP(106,2287
CHECK(124,2815

tests/inter_cluster_snat_clusterip_backend_lxc.c,926
#define BACKEND_MAC	12,191
#define BACKEND_ROUTER_MAC	13,221
#define CLIENT_IP	14,257
#define BACKEND_IP	15,288
#define CLIENT_NODE_IP	16,320
#define BACKEND_PORT	17,356
#define CLIENT_INTER_CLUSTER_SNAT_PORT	18,391
#define CLIENT_CLUSTER_ID	19,442
#define CLIENT_IDENTITY	20,471
#define ENCAP_IFINDEX 27,625
#define LXC_IPV4 30,712
#define HAVE_LPM_TRIE_MAP_TYPE33,772
#define ENABLE_IPV436,865
#define TUNNEL_MODE39,930
#define ENABLE_NODEPORT42,1034
#define ENABLE_CLUSTER_AWARE_ADDRESSING45,1135
#undef CLUSTER_ID54,1381
#define CLUSTER_ID 55,1399
#undef EVENT_SOURCE60,1518
#define FROM_CONTAINER 71,1642
#define HANDLE_POLICY 72,1667
	__uint(75,1701
	__uint(76,1741
	__uint(77,1775
	__array(78,1800
pktgen_to_lxc(87,1991
pktgen_from_lxc(129,2826
PKTGEN(170,3636
SETUP(176,3774
CHECK(208,4596
PKTGEN(283,6644
SETUP(289,6789
CHECK(299,7033
PKTGEN(371,8950
SETUP(377,9088
CHECK(392,9548

tests/xdp_egressgw_reply.c,697
#define ETH_HLEN 10,244
#define ENABLE_IPV413,300
#define ENABLE_NODEPORT14,320
#define ENABLE_NODEPORT_ACCELERATION15,344
#define ENABLE_EGRESS_GATEWAY17,382
#define ENABLE_MASQUERADE18,412
#define TUNNEL_PROTOCOL	20,439
#define ENCAP_IFINDEX	21,486
#define DISABLE_LOOPBACK_LB23,513
#define USE_BPF_PROG_FOR_INGRESS_POLICY26,612
#define IPV4_DIRECT_ROUTING	28,653
#define MASQ_PORT	29,712
#define DIRECT_ROUTING_IFINDEX	30,770
#define ctx_redirect 32,805
#define fib_lookup 37,1011
mock_ctx_redirect(48,1335
mock_fib_lookup(58,1596
#define FROM_NETDEV	73,2001
	__uint(76,2033
	__uint(77,2073
	__uint(78,2107
	__array(79,2132
PKTGEN(89,2350
SETUP(114,2991
CHECK(146,3889

tests/tc_nodeport_test.c,507
#define LXC_IPV4 7,177
#undef QUIET_CT11,275
#define ETH_HLEN 17,421
#define ENABLE_IPV420,476
#define USE_BPF_PROG_FOR_INGRESS_POLICY23,567
#undef FORCE_LOCAL_POLICY_EVAL_AT_SOURCE24,607
#define ctx_redirect_peer 26,649
mock_ctx_redirect_peer(28,740
	__uint(41,1005
	__uint(42,1045
	__uint(43,1079
	__array(44,1104
static __always_inline int build_packet(59,1517
PKTGEN(107,2474
SETUP(116,2736
CHECK(136,3294
PKTGEN(182,4338
SETUP(235,5420
CHECK(244,5643
SETUP(291,6778
CHECK(318,7313

tests/tc_nodeport_lb6_dsr_lb.c,949
#define ETH_HLEN 10,244
#define ENABLE_IPV613,300
#define ENABLE_NODEPORT14,320
#define ENABLE_DSR15,344
#define DSR_ENCAP_GENEVE	16,363
#define DISABLE_LOOPBACK_LB18,391
#define USE_BPF_PROG_FOR_INGRESS_POLICY21,490
#undef FORCE_LOCAL_POLICY_EVAL_AT_SOURCE22,530
#define CLIENT_IP	24,572
#define CLIENT_PORT	25,636
#define FRONTEND_IP	27,675
#define FRONTEND_PORT	28,741
#define LB_IP	30,777
#define IPV6_DIRECT_ROUTING	31,838
#define BACKEND_IP	33,873
#define BACKEND_PORT	34,938
#define fib_lookup 36,979
static volatile const __u8 *client_mac client_mac38,1015
static volatile const __u8 lb_mac[lb_mac40,1111
static volatile const __u8 *remote_backend_mac remote_backend_mac41,1197
long mock_fib_lookup(43,1257
#define SECCTX_FROM_IPCACHE 59,1795
#define FROM_NETDEV	66,1895
#define TO_NETDEV	67,1917
	__uint(70,1947
	__uint(71,1987
	__uint(72,2021
	__array(73,2046
PKTGEN(86,2356
SETUP(133,3421
CHECK(152,3974

tests/mock_skb_metadata.h,350
#define ____BPF_TEST_MOCK_SKB_METADATA____5,140
struct mock_skb_meta 20,510
	__u32 cb[cb21,533
	__u32 _pad0;22,547
	__uint(26,574
	__uint(27,609
	__uint(28,643
	__uint(29,694
} mock_skb_meta_map __section_maps_btf;30,719
mock_skb_store_meta(33,803
mock_skb_load_meta(47,1088
#define ctx_store_meta 59,1318
#define ctx_load_meta 60,1361

tests/tc_l2_announcement.c,487
#define DEBUG7,141
#define NODE_MAC 10,192
#define SECCTX_FROM_IPCACHE 12,259
#define LXC_IPV4 15,352
#undef QUIET_CT19,450
#define ETH_HLEN 25,596
#define ENABLE_IPV428,652
#define ENABLE_L2_ANNOUNCEMENTS29,672
	__uint(34,737
	__uint(35,777
	__uint(36,811
	__array(37,836
static volatile const __u8 mac_bcast[mac_bcast53,1571
static __always_inline int build_packet(55,1653
PKTGEN(92,2471
SETUP(100,2671
CHECK(109,2891
PKTGEN(151,4020
SETUP(160,4272
CHECK(182,4823

tests/ipv6_test.c,478
static __be32 *dummy_map;dummy_map15,256
static __be32 match_dummy_prefix(16,282
#define PREFIX32 22,435
#define PREFIX31 23,456
#define PREFIX22 24,477
#define PREFIX11 25,498
#define PREFIX0 26,519
LPM_LOOKUP_FN(28,540
SETUP(69,1660
CHECK(75,1803
struct ipv6_authhdr 117,2650
	struct ipv6_opt_hdr opt;118,2672
	__u16 reserved;119,2698
	int spi;120,2715
	int seq;121,2725
	char icv[icv122,2735
PKTGEN(125,2752
SETUP(177,3937
CHECK(183,4067
CHECK(225,4901

tests/common.h,1729
#define ____BPF_TEST_COMMON____5,129
#define BPF_TEST17,449
#define ___bpf_concat(20,489
#define ___bpf_apply(23,552
#define ___bpf_nth(26,627
#define ___bpf_narg(29,734
#define __bpf_log_arg0(33,841
#define __bpf_log_arg1(34,890
#define __bpf_log_arg2(35,991
#define __bpf_log_arg3(37,1137
#define __bpf_log_arg4(39,1283
#define __bpf_log_arg5(41,1429
#define __bpf_log_arg6(43,1575
#define __bpf_log_arg7(45,1721
#define __bpf_log_arg8(47,1867
#define __bpf_log_arg9(49,2013
#define __bpf_log_arg10(51,2159
#define __bpf_log_arg11(53,2306
#define __bpf_log_arg12(55,2454
#define __bpf_log_arg(57,2602
#define TEST_ERROR 62,2795
#define TEST_PASS 63,2816
#define TEST_FAIL 64,2836
#define TEST_SKIP 65,2856
	__uint(70,2982
	__uint(71,3017
	__uint(72,3051
	__uint(73,3078
	__uint(74,3116
} suite_result_map __section_maps_btf;75,3141
#define PROTOBUF_WIRE_TYPE(80,3323
#define PROTOBUF_VARINT 82,3388
#define PROTOBUF_FIXED64 83,3414
#define PROTOBUF_LENGTH_DELIMITED 84,3441
#define MKR_TEST_RESULT 87,3504
#define MKR_SUITE_LOG	88,3577
#define MKR_TEST_NAME	91,3674
#define MKR_TEST_STATUS 92,3745
#define MKR_TEST_LOG	93,3808
#define MKR_LOG_FMT	96,3897
#define MKR_LOG_ARG	97,3966
#define test_log(106,4379
#define STRINGIZE(130,5213
#define STRINGIZE2(131,5248
#define LINE_STRING 132,5273
#define test_fail(135,5352
#define test_fail_now(143,5568
#define test_skip(152,5758
#define test_skip_now(160,5969
#define test_error(169,6190
#define test_fatal(176,6327
#define assert(183,6487
#define test_init(199,7244
#define TEST(217,7866
#define test_finish(252,9264
#define PKTGEN(256,9328
#define SETUP(257,9403
#define CHECK(258,9476
#define LPM_LOOKUP_FN(260,9550

tests/tc_nodeport_lb6_dsr_backend.c,992
#define ETH_HLEN 10,244
#define ENABLE_IPV613,300
#define ENABLE_NODEPORT14,320
#define ENABLE_DSR	15,344
#define DSR_ENCAP_GENEVE	16,366
#define ENABLE_HOST_ROUTING17,393
#define DISABLE_LOOPBACK_LB19,422
#define ENABLE_SKIP_FIB	20,450
#define USE_BPF_PROG_FOR_INGRESS_POLICY23,548
#undef FORCE_LOCAL_POLICY_EVAL_AT_SOURCE24,588
#define CLIENT_IP	26,630
#define CLIENT_PORT	27,693
#define FRONTEND_IP	29,731
#define FRONTEND_PORT	30,796
#define BACKEND_IP	32,831
#define BACKEND_PORT	33,895
static volatile const __u8 *client_mac client_mac35,935
static volatile const __u8 *node_mac node_mac36,985
static volatile const __u8 *backend_mac backend_mac37,1035
#define SECCTX_FROM_IPCACHE 39,1088
#define FROM_NETDEV	46,1194
#define TO_NETDEV	47,1216
	__uint(50,1246
	__uint(51,1286
	__uint(52,1320
	__array(53,1345
PKTGEN(66,1692
SETUP(126,3160
CHECK(143,3609
int build_reply(251,6779
int check_reply(297,7794
PKTGEN(354,9380
SETUP(360,9519
CHECK(369,9770

tests/ipsec_from_lxc_test.c,626
#define ROUTER_IP7,159
#undef ROUTER_IP9,209
#define NODE_ID 11,227
#define ENCRYPT_KEY 12,248
#define ENABLE_IPV413,270
#define ENABLE_IPV614,290
#define ENABLE_IPSEC15,310
#define TUNNEL_MODE16,331
#define HAVE_ENCAP17,351
#define ENCAP_IFINDEX 18,370
#define FROM_CONTAINER 24,443
	__uint(27,478
	__uint(28,518
	__uint(29,552
	__array(30,577
pktgen_from_lxc(38,732
PKTGEN(73,1431
SETUP(79,1570
CHECK(98,2151
PKTGEN(129,2848
SETUP(135,2981
CHECK(149,3341
PKTGEN(219,5233
SETUP(225,5378
CHECK(239,5820
PKTGEN(262,6402
SETUP(268,6549
CHECK(284,7063
PKTGEN(307,7647
SETUP(342,8423
CHECK(368,9196

tests/session_affinity_test.c,911
#define ENABLE_IPV48,160
#define ENABLE_NODEPORT9,180
#define ENABLE_NODEPORT_ACCELERATION10,204
#define ENABLE_SESSION_AFFINITY11,241
#define LB_SELECTION 14,355
#define fib_lookup 16,396
static const char fib_smac[fib_smac18,432
static const char fib_dmac[fib_dmac19,502
long mock_fib_lookup(21,573
	__uint(33,886
	__uint(34,926
	__uint(35,960
	__array(36,985
#define CLIENT_IP 43,1095
#define FRONTEND_IP 44,1131
#define BACKEND_IP1 45,1169
#define BACKEND_IP2 46,1207
#define FRONTEND_PORT 47,1245
#define BACKEND_PORT 48,1281
#define REV_NAT_INDEX 49,1318
#define BACKEND_ID1 50,1344
#define BACKEND_ID2 51,1366
static __always_inline int craft_packet(53,1390
#define SVC_KEY_VALUE(92,2227
#define BE_KEY_VALUE(106,2602
SETUP(114,2767
		struct lb4_key key;118,2852
		struct lb4_service value;119,2874
		__u32 key;128,3181
		struct lb4_backend value;129,3194
CHECK(177,4494

tests/builtin_test.h,716
static __always_inline __u32 __cmp_mem(9,269
static __always_inline void __cpy_mem(22,474
static void __fill_rnd(31,625
static __always_inline bool __corrupt_mem(40,756
static void __fill_cnt(51,953
#define test___builtin_memzero_single(60,1090
static void test___builtin_memzero(73,1515
#define test___builtin_memcpy_single(79,1644
static void test___builtin_memcpy(95,2192
#define test___builtin_memcmp_single(101,2317
static void test___builtin_memcmp(115,2765
#define test___builtin_memmove1_single(126,2979
#define test___builtin_memmove2_single(143,3565
#define test___builtin_memmove3_single(161,4207
#define test___builtin_memmove4_single(179,4876
static void test___builtin_memmove(195,5476

tests/mock_skb_metadata.c,43
PKTGEN(11,199
CHECK(22,460
CHECK(47,954

tests/wildcard_lookup.c,1220
#define ENABLE_IPV4 10,208
#define ENABLE_IPV6 11,230
#define ENABLE_HOST_SERVICES_TCP 13,253
#undef ENABLE_HEALTH_CHECK14,288
#define ENABLE_SOCKET_LB_HOST_ONLY 15,315
#define ENABLE_SOCKET_LB_TCP16,352
#define ENABLE_SOCKET_LB_UDP17,381
#define ENABLE_NODEPORT 19,411
#define BPF_HAVE_NETNS_COOKIE 21,438
#define HOST_NETNS_COOKIE 24,513
	NODEPORT_LOOKUP 31,598
	HOSTPORT_LOOKUP 32,620
	DONT_INCLUDE_REMOTE_HOSTS 36,653
	INCLUDE_REMOTE_HOSTS 37,685
	OTHER_NS 41,723
	HOST_NS 42,738
#define DONT_CARE(45,756
	NODEPORT_EXISTS 48,787
	HOSTPORT_EXISTS 49,829
	HOSTPORT_EXISTS_LOCALHOST 50,871
#define SVC_KEY_VALUE(53,927
#define SVC_KEY_VALUE_V6(65,1171
	HOST_IP 78,1418
static inline void __setup_v4(81,1445
	struct { struct lb4_key key;83,1483
	struct { struct lb4_key key; struct lb4_service value;83,1483
CHECK(104,2201
static inline void __setup_v6_ipcache(273,8346
static inline void __setup_v6_nodeport(278,8470
	struct { struct lb6_key key;281,8566
	struct { struct lb6_key key; struct lb6_service value;281,8566
static inline void __setup_v6_hostport(293,8965
	struct { struct lb6_key key;296,9061
	struct { struct lb6_key key; struct lb6_service value;296,9061
CHECK(312,9582

tests/config_replacement.h,1285
#define ___EP_CONFIG____10,303
#define LXC_IP_1 13,344
#define LXC_IP_2 16,511
#define LXC_IP 19,684
#define LXC_IPV4 23,764
#define LXC_ID 31,986
#define SECLABEL 35,1031
#define SECLABEL_NB 39,1084
#define POLICY_VERDICT_LOG_FILTER 43,1154
#define HOST_EP_ID 47,1222
#define POLICY_MAP 51,1275
#define DEBUG55,1346
#define DROP_NOTIFY58,1368
#define TRACE_NOTIFY59,1388
#define CT_MAP_TCP6 60,1409
#define CT_MAP_ANY6 61,1455
#define CT_MAP_TCP4 62,1501
#define CT_MAP_ANY4 63,1547
#define PER_CLUSTER_CT_TCP6 64,1593
#define PER_CLUSTER_CT_ANY6 65,1653
#define PER_CLUSTER_CT_TCP4 66,1713
#define PER_CLUSTER_CT_ANY4 67,1773
#define CT_MAP_SIZE_TCP 68,1833
#define CT_MAP_SIZE_ANY 69,1862
#define CALLS_MAP 70,1891
#define CUSTOM_CALLS_MAP 71,1933
#define LOCAL_DELIVERY_METRICS72,1989
#define CONNTRACK_ACCOUNTING73,2020
#define DIRECT_ROUTING_DEV_IFINDEX 74,2049
#define DEFINE_MAC(78,2118
#define NODE_MAC_1 83,2327
#define NODE_MAC_2 84,2397
#define NODE_MAC 85,2437
#define ROUTER_IP_1 89,2511
#define ROUTER_IP_2 90,2587
#define ROUTER_IP_3 91,2660
#define ROUTER_IP_4 92,2733
#define ROUTER_IP 93,2811
#define HOST_IP_1 97,2912
#define HOST_IP_2 98,2986
#define HOST_IP_3 99,3057
#define HOST_IP_4 100,3130
#define HOST_IP 101,3208

tests/bpf_ct_tests.c,235
#define ENABLE_IPV49,162
#define ENABLE_NODEPORT10,182
#undef EVENTS_MAP13,232
#define EVENTS_MAP 14,250
#define DEBUG15,285
__always_inline int mkpkt(22,402
static char pkt[pkt83,1624
CHECK(85,1647
	#define TEST_LOG167,3586

tests/tc_egressgw_snat.c,596
#define ETH_HLEN 11,276
#define ENABLE_IPV414,332
#define ENABLE_NODEPORT15,352
#define ENABLE_EGRESS_GATEWAY16,376
#define ENABLE_MASQUERADE_IPV417,406
#define ENCAP_IFINDEX	18,437
#define SECCTX_FROM_IPCACHE 20,464
#define ctx_redirect 22,495
mock_ctx_redirect(33,817
#define TO_NETDEV 42,1025
#define FROM_NETDEV 43,1045
	__uint(46,1077
	__uint(47,1117
	__uint(48,1151
	__array(49,1176
PKTGEN(60,1474
SETUP(68,1650
CHECK(80,1977
PKTGEN(94,2369
SETUP(103,2583
CHECK(115,2930
PKTGEN(127,3228
SETUP(135,3404
CHECK(144,3625
PKTGEN(162,4117
SETUP(170,4338
CHECK(183,4781

tests/tc_nodeport_l3_dev.c,772
#define ETH_HLEN	10,190
#define SECCTX_FROM_IPCACHE	11,210
#define ENABLE_HOST_ROUTING12,240
#define ENABLE_IPV413,268
#define ENABLE_IPV614,288
#define SKIP_ICMPV6_NS_HANDLING15,308
#define TEST_IP_LOCAL	17,341
#define TEST_IP_REMOTE	18,375
#define TEST_IPV6_LOCAL	19,410
#define TEST_IPV6_REMOTE	20,446
#define TEST_LXC_ID_LOCAL	21,482
__section(28,766
	__uint(35,899
	__uint(36,939
	__uint(37,973
	__array(38,1000
#define tail_call_dynamic 45,1137
mock_tail_call_dynamic(47,1229
static volatile const __u8 *ep_mac ep_mac53,1410
static volatile const __u8 *node_mac node_mac54,1456
	__uint(61,1564
	__uint(62,1604
	__uint(63,1638
	__array(64,1663
PKTGEN(71,1775
SETUP(122,3069
CHECK(146,3911
PKTGEN(215,5671
SETUP(265,6988
CHECK(289,7850

tests/inter_cluster_snat_clusterip_client_overlay.c,1490
#define ENCAP_IFINDEX 16,295
#define ENABLE_IPV419,381
#define TUNNEL_MODE22,446
#define ENABLE_NODEPORT25,550
#define ENABLE_CLUSTER_AWARE_ADDRESSING28,651
#define ENABLE_INTER_CLUSTER_SNAT31,770
#undef NODEPORT_PORT_MAX39,997
#undef NODEPORT_PORT_MIN_NAT40,1022
#undef NODEPORT_PORT_MAX_NAT41,1051
#define NODEPORT_PORT_MAX 42,1080
#define NODEPORT_PORT_MIN_NAT 43,1112
#define NODEPORT_PORT_MAX_NAT 44,1166
#undef CLUSTER_ID47,1285
#define CLUSTER_ID 48,1303
#define CLIENT_IFINDEX	53,1355
#define CLIENT_MAC	54,1385
#define CLIENT_ROUTER_MAC	55,1413
#define BACKEND_ROUTER_MAC	56,1447
#define CLIENT_IP	57,1484
#define BACKEND_IP	58,1514
#define CLIENT_NODE_IP	59,1545
#define BACKEND_NODE_IP	60,1580
#define CLIENT_PORT	61,1616
#define BACKEND_PORT	62,1676
#define BACKEND_CLUSTER_ID	63,1710
#define BACKEND_IDENTITY	64,1739
#undef IPV4_INTER_CLUSTER_SNAT66,1816
#define IPV4_INTER_CLUSTER_SNAT 67,1847
#define CLIENT_INTER_CLUSTER_SNAT_PORT 70,1961
#define skb_get_tunnel_key 73,2102
int mock_skb_get_tunnel_key(76,2177
#define DEBUG89,2540
#define _send_drop_notify 92,2577
int mock_send_drop_notify(95,2649
#define TO_OVERLAY 113,3097
#define FROM_OVERLAY 114,3118
	__uint(117,3151
	__uint(118,3191
	__uint(119,3225
	__array(120,3250
pktgen_to_overlay(129,3435
pktgen_from_overlay(171,4248
PKTGEN(212,5077
SETUP(218,5211
CHECK(228,5440
PKTGEN(307,7614
SETUP(313,7759
CHECK(323,8045
PKTGEN(403,10387
SETUP(409,10521
CHECK(419,10750

tests/xdp_nodeport_lb4_dsr_lb.c,894
#define ETH_HLEN 10,244
#define ENABLE_IPV413,300
#define ENABLE_NODEPORT14,320
#define ENABLE_NODEPORT_ACCELERATION15,344
#define ENABLE_DSR16,381
#define DISABLE_LOOPBACK_LB18,401
#define USE_BPF_PROG_FOR_INGRESS_POLICY21,500
#undef FORCE_LOCAL_POLICY_EVAL_AT_SOURCE22,540
#define CLIENT_IP	24,582
#define CLIENT_PORT	25,612
#define FRONTEND_IP	27,651
#define FRONTEND_PORT	28,683
#define LB_IP	30,719
#define IPV4_DIRECT_ROUTING	31,747
#define BACKEND_IP	33,782
#define BACKEND_PORT	34,813
#define fib_lookup 36,854
static volatile const __u8 *client_mac client_mac38,890
static volatile const __u8 lb_mac[lb_mac40,986
static volatile const __u8 *remote_backend_mac remote_backend_mac41,1072
long mock_fib_lookup(43,1132
#define FROM_NETDEV	64,1702
	__uint(67,1734
	__uint(68,1774
	__uint(69,1808
	__array(70,1833
PKTGEN(82,2105
SETUP(127,3024
CHECK(144,3495

tests/nodeport_geneve_dsr_lb_xdp.c,1502
#define ETH_HLEN 10,244
#define ENABLE_IPV413,300
#define ENABLE_NODEPORT14,320
#define ENABLE_NODEPORT_ACCELERATION15,344
#define ENABLE_DSR	16,381
#define DSR_ENCAP_IPIP	18,404
#define DSR_ENCAP_GENEVE	19,430
#define DSR_ENCAP_MODE	20,457
#define TUNNEL_PROTOCOL	22,499
#define ENCAP_IFINDEX	23,547
#define TUNNEL_MODE24,573
#define DISABLE_LOOPBACK_LB26,594
#define USE_BPF_PROG_FOR_INGRESS_POLICY29,693
#undef FORCE_LOCAL_POLICY_EVAL_AT_SOURCE30,733
#define CLIENT_IP	32,775
#define CLIENT_PORT	33,805
#define FRONTEND_IP_LOCAL	35,844
#define FRONTEND_IP_REMOTE	36,881
#define FRONTEND_PORT	37,919
#define LB_IP	39,955
#define IPV4_DIRECT_ROUTING	40,983
#define BACKEND_NODE_IP	41,1017
#define DIRECT_ROUTING_IFINDEX	43,1055
#define BACKEND_IP_LOCAL	45,1090
#define BACKEND_IP_REMOTE	46,1126
#define BACKEND_PORT	47,1163
#define fib_lookup 49,1204
static volatile const __u8 *client_mac client_mac51,1240
static volatile const __u8 lb_mac[lb_mac53,1336
static volatile const __u8 *node_mac node_mac54,1422
static volatile const __u8 *local_backend_mac local_backend_mac55,1472
static volatile const __u8 *backend_node_mac backend_node_mac56,1530
static bool fail_fib;58,1587
#define ctx_redirect 60,1610
mock_ctx_redirect(62,1691
long mock_fib_lookup(71,1909
#define FROM_NETDEV	95,2472
	__uint(98,2504
	__uint(99,2544
	__uint(100,2578
	__array(101,2603
PKTGEN(112,2842
SETUP(157,3813
CHECK(178,4485
PKTGEN(242,6263
SETUP(287,7215
CHECK(305,7786

tests/conntrack_test.c,339
#define ENABLE_IPV48,141
#define ENABLE_NODEPORT9,161
#define HAVE_LARGE_INSN_LIMIT10,185
static __u64 __now;15,266
#define ktime_get_ns(17,287
#define jiffies64(18,333
#undef CONNTRACK_ACCOUNTING21,428
#define REPORT_ALL_FLAGS 26,516
#define REPORT_NO_FLAGS 27,546
void advance_time(30,621
bool timeout_in(36,726
CHECK(41,834

tests/bpf_nat_tests.c,776
#define ENABLE_SCTP9,162
#define ENABLE_IPV410,182
#define ENABLE_NODEPORT11,202
#undef EVENTS_MAP14,252
#define EVENTS_MAP 15,270
#define DEBUG16,305
#define IP_ENDPOINT 23,406
#define IP_HOST 24,428
#define IP_ROUTER 25,450
#define IP_WORLD 26,472
static char pkt[pkt28,495
__always_inline int mk_icmp4_error_pkt(30,518
			__be16 sport;116,2608
			__be16 dport;117,2625
CHECK(144,3140
		__be16 sport;232,5491
		__be16 dport;233,5507
CHECK(253,6104
		__be16 sport;341,8455
		__be16 dport;342,8471
CHECK(362,9068
CHECK(466,11960
CHECK(519,13193
		__be16 sport;613,15798
		__be16 dport;614,15814
CHECK(634,16408
		__be16 sport;728,19022
		__be16 dport;729,19038
CHECK(749,19632
CHECK(859,22786
		__be16 sport;945,25080
		__be16 dport;946,25096

tests/tc_nodeport_lb4_nat_lb.c,1915
#define ETH_HLEN 10,244
#define ENABLE_IPV413,300
#define ENABLE_NODEPORT14,320
#define ENABLE_HOST_ROUTING15,344
#define DISABLE_LOOPBACK_LB17,373
#define USE_BPF_PROG_FOR_INGRESS_POLICY20,472
#undef FORCE_LOCAL_POLICY_EVAL_AT_SOURCE21,512
#define CLIENT_IP	23,554
#define CLIENT_PORT	24,584
#define CLIENT_IP_2	25,622
#define FRONTEND_IP_LOCAL	27,655
#define FRONTEND_IP_REMOTE	28,692
#define FRONTEND_PORT	29,730
#define LB_IP	31,766
#define IPV4_DIRECT_ROUTING	32,794
#define BACKEND_IP_LOCAL	34,829
#define BACKEND_IP_REMOTE	35,865
#define BACKEND_PORT	36,902
#define NATIVE_DEV_IFINDEX	38,943
#define DEFAULT_IFACE	39,973
#define BACKEND_IFACE	40,1015
#define SVC_EGRESS_IFACE	41,1041
#define fib_lookup 43,1070
static volatile const __u8 *client_mac client_mac45,1106
static volatile const __u8 lb_mac[lb_mac47,1202
static volatile const __u8 *node_mac node_mac48,1288
static volatile const __u8 *local_backend_mac local_backend_mac49,1338
static volatile const __u8 *remote_backend_mac remote_backend_mac50,1396
static __be16 nat_source_port;52,1456
static bool fail_fib;53,1487
#define fib_lookup 55,1510
long mock_fib_lookup(57,1546
#define ctx_redirect 81,2382
mock_ctx_redirect(84,2464
#define SECCTX_FROM_IPCACHE 112,3320
#define FROM_NETDEV	120,3446
#define TO_NETDEV	121,3468
	__uint(124,3498
	__uint(125,3538
	__uint(126,3572
	__array(127,3597
PKTGEN(139,3894
SETUP(184,4829
CHECK(205,5477
PKTGEN(259,6946
SETUP(304,7891
CHECK(313,8140
PKTGEN(369,9650
SETUP(414,10605
CHECK(423,10862
PKTGEN(479,12410
SETUP(524,13375
CHECK(533,13642
PKTGEN(590,15153
SETUP(635,16096
CHECK(650,16550
PKTGEN(707,18072
SETUP(752,18996
CHECK(769,19493
static __always_inline int build_reply(824,20941
static __always_inline int check_reply(868,21846
PKTGEN(923,23359
SETUP(929,23490
CHECK(938,23729
PKTGEN(948,24016
SETUP(954,24162
CHECK(965,24431

tests/ipsec_from_overlay_test.c,1111
#define ROUTER_IP7,159
#define SECLABEL8,177
#undef ROUTER_IP10,226
#undef SECLABEL11,243
#define NODE_ID 13,260
#define ENCRYPT_KEY 14,281
#define ENABLE_IPV415,303
#define ENABLE_IPV616,323
#define ENABLE_IPSEC17,343
#define TUNNEL_MODE18,364
#define HAVE_ENCAP19,384
#define ENCAP_IFINDEX 20,403
#define DEST_IFINDEX 21,427
#define DEST_LXC_ID 22,450
#define skb_change_type 24,475
int mock_skb_change_type(25,520
#define skb_get_tunnel_key 32,650
int mock_skb_get_tunnel_key(33,701
__section(44,983
	__uint(51,1116
	__uint(52,1156
	__uint(53,1190
	__array(54,1217
#define tail_call_dynamic 61,1348
mock_tail_call_dynamic(63,1440
static volatile const __u8 *DEST_EP_MAC DEST_EP_MAC69,1621
static volatile const __u8 *DEST_NODE_MAC DEST_NODE_MAC70,1674
#define FROM_OVERLAY 76,1782
#define ESP_SEQUENCE 77,1805
	__uint(80,1842
	__uint(81,1882
	__uint(82,1916
	__array(83,1941
PKTGEN(90,2065
SETUP(126,2853
CHECK(133,3056
PKTGEN(202,4877
SETUP(237,5684
CHECK(244,5887
PKTGEN(313,7780
SETUP(349,8570
CHECK(360,8932
PKTGEN(429,10756
SETUP(464,11565
CHECK(475,11943

tests/xdp_nodeport_lb6_dsr_lb.c,896
#define ETH_HLEN 10,244
#define ENABLE_IPV613,300
#define ENABLE_NODEPORT14,320
#define ENABLE_NODEPORT_ACCELERATION15,344
#define ENABLE_DSR16,381
#define DISABLE_LOOPBACK_LB18,401
#define USE_BPF_PROG_FOR_INGRESS_POLICY21,500
#undef FORCE_LOCAL_POLICY_EVAL_AT_SOURCE22,540
#define CLIENT_IP	24,582
#define CLIENT_PORT	25,646
#define FRONTEND_IP	27,685
#define FRONTEND_PORT	28,751
#define LB_IP	30,787
#define IPV6_DIRECT_ROUTING	31,848
#define BACKEND_IP	33,883
#define BACKEND_PORT	34,948
#define fib_lookup 36,989
static volatile const __u8 *client_mac client_mac38,1025
static volatile const __u8 lb_mac[lb_mac40,1121
static volatile const __u8 *remote_backend_mac remote_backend_mac41,1207
long mock_fib_lookup(43,1267
#define FROM_NETDEV	64,1873
	__uint(67,1905
	__uint(68,1945
	__uint(69,1979
	__array(70,2004
PKTGEN(82,2281
SETUP(129,3348
CHECK(148,3903

tests/tc_nodeport_lb4_dsr_backend.c,1385
#define ETH_HLEN 10,244
#define ENABLE_IPV413,300
#define ENABLE_NODEPORT14,320
#define ENABLE_DSR	15,344
#define DSR_ENCAP_GENEVE	16,366
#define ENABLE_HOST_ROUTING17,393
#define DISABLE_LOOPBACK_LB19,422
#define USE_BPF_PROG_FOR_INGRESS_POLICY22,521
#undef FORCE_LOCAL_POLICY_EVAL_AT_SOURCE23,561
#define CLIENT_IP	25,603
#define CLIENT_PORT	26,633
#define CLIENT_IP_2	27,671
#define FRONTEND_IP	29,704
#define FRONTEND_PORT	30,736
#define BACKEND_IP	32,772
#define BACKEND_PORT	33,803
#define NATIVE_DEV_IFINDEX	35,844
#define DEFAULT_IFACE	36,874
#define BACKEND_IFACE	37,916
#define SVC_EGRESS_IFACE	38,942
static volatile const __u8 *client_mac client_mac40,971
static volatile const __u8 *node_mac node_mac41,1021
static volatile const __u8 *backend_mac backend_mac42,1071
#define fib_lookup 44,1124
long mock_fib_lookup(46,1160
#define ctx_redirect 60,1623
mock_ctx_redirect(63,1705
#define SECCTX_FROM_IPCACHE 87,2386
#define FROM_NETDEV	94,2492
#define TO_NETDEV	95,2514
	__uint(98,2544
	__uint(99,2584
	__uint(100,2618
	__array(101,2643
PKTGEN(114,2990
SETUP(166,4124
CHECK(181,4543
static __always_inline int build_reply(278,7181
static __always_inline int check_reply(322,8073
PKTGEN(377,9528
SETUP(383,9667
CHECK(392,9912
PKTGEN(401,10177
SETUP(453,11331
CHECK(462,11584
PKTGEN(559,14242
SETUP(604,15199
CHECK(616,15595

tests/tc_nodeport_lb4_dsr_lb.c,947
#define ETH_HLEN 10,244
#define ENABLE_IPV413,300
#define ENABLE_NODEPORT14,320
#define ENABLE_DSR15,344
#define DSR_ENCAP_GENEVE	16,363
#define DISABLE_LOOPBACK_LB18,391
#define USE_BPF_PROG_FOR_INGRESS_POLICY21,490
#undef FORCE_LOCAL_POLICY_EVAL_AT_SOURCE22,530
#define CLIENT_IP	24,572
#define CLIENT_PORT	25,602
#define FRONTEND_IP	27,641
#define FRONTEND_PORT	28,673
#define LB_IP	30,709
#define IPV4_DIRECT_ROUTING	31,737
#define BACKEND_IP	33,772
#define BACKEND_PORT	34,803
#define fib_lookup 36,844
static volatile const __u8 *client_mac client_mac38,880
static volatile const __u8 lb_mac[lb_mac40,976
static volatile const __u8 *remote_backend_mac remote_backend_mac41,1062
long mock_fib_lookup(43,1122
#define SECCTX_FROM_IPCACHE 59,1624
#define FROM_NETDEV	66,1724
#define TO_NETDEV	67,1746
	__uint(70,1776
	__uint(71,1816
	__uint(72,1850
	__array(73,1875
PKTGEN(86,2180
SETUP(131,3097
CHECK(148,3566

tests/inter_cluster_snat_clusterip_backend_overlay.c,1431
#define ENCAP_IFINDEX 16,297
#define ENABLE_IPV419,383
#define TUNNEL_MODE22,448
#define ENABLE_NODEPORT25,552
#define ENABLE_CLUSTER_AWARE_ADDRESSING28,653
#define ENABLE_INTER_CLUSTER_SNAT31,772
#undef NODEPORT_PORT_MAX39,999
#undef NODEPORT_PORT_MIN_NAT40,1024
#undef NODEPORT_PORT_MAX_NAT41,1053
#define NODEPORT_PORT_MAX 42,1082
#define NODEPORT_PORT_MIN_NAT 43,1114
#define NODEPORT_PORT_MAX_NAT 44,1168
#undef CLUSTER_ID47,1287
#define CLUSTER_ID 48,1305
#define BACKEND_IFINDEX	53,1357
#define BACKEND_MAC	54,1388
#define BACKEND_ROUTER_MAC	55,1417
#define CLIENT_ROUTER_MAC	56,1452
#define BACKEND_IP	57,1488
#define CLIENT_NODE_IP	58,1519
#define BACKEND_NODE_IP	59,1554
#define BACKEND_PORT	60,1590
#define CLIENT_CLUSTER_ID	61,1624
#define CLIENT_IDENTITY	62,1652
#undef IPV4_INTER_CLUSTER_SNAT64,1728
#define IPV4_INTER_CLUSTER_SNAT 65,1759
#define CLIENT_INTER_CLUSTER_SNAT_PORT 68,1874
#define skb_get_tunnel_key 71,2015
int mock_skb_get_tunnel_key(73,2067
#define DEBUG86,2428
#define _send_drop_notify 89,2465
int mock_send_drop_notify(92,2537
#define TO_OVERLAY 110,2985
#define FROM_OVERLAY 111,3006
	__uint(114,3039
	__uint(115,3079
	__uint(116,3113
	__array(117,3138
pktgen_to_overlay(126,3323
pktgen_from_overlay(168,4162
PKTGEN(209,4982
SETUP(218,5191
CHECK(228,5475
PKTGEN(307,7751
SETUP(313,7890
CHECK(320,8056
PKTGEN(375,9454
SETUP(381,9594
CHECK(388,9760

tests/fib_tests.c,693
#define HAVE_FIB_NEIGH 5,144
#define HAVE_FIB_IFINDEX 7,232
#define CTX_REDIRECT_ENTERED 13,329
struct ctx_redirect_recorder 15,364
	const struct __sk_buff *ctx;ctx16,395
	__u32 ifindex;17,425
	__u64 flags;18,441
} redir_recorder 19,455
void reset_redir_recorder(21,480
#define ctx_redirect 28,606
long mock_ctx_redirect(30,646
#define REDIR_NEIGH_ENTERED 40,917
struct redir_neigh_recorder 42,951
	__u32 ifindex;43,981
	struct bpf_redir_neigh *params;params44,997
	int plen;45,1030
	__u32 flags;46,1041
} redir_neigh_recorder 47,1055
void reset_redir_neigh_recorder(49,1086
#define redirect_neigh 57,1226
long mock_redirect_neigh(59,1270
CHECK(75,1689
CHECK(183,4916

tests/jhash_test.c,14
CHECK(10,189

tests/l4lb_ipip_health_check_host.c,1063
#define ETH_HLEN 10,244
#define ENABLE_IPV4	13,300
#define ENABLE_IPV6	14,323
#define ENABLE_NODEPORT	15,346
#define ENABLE_DSR	16,373
#define DSR_ENCAP_IPIP	17,395
#define DSR_ENCAP_MODE	18,421
#define ENABLE_HEALTH_CHECK	19,460
#define DISABLE_LOOPBACK_LB21,491
#define CLIENT_IP	23,520
#define CLIENT_PORT	24,550
#define ENCAP_IFINDEX	26,589
#define FRONTEND_IP	28,616
#define FRONTEND_PORT	29,648
#define BACKEND_IP	31,688
#define BACKEND_PORT	32,719
#define ENCAP4_IFINDEX	34,760
#define ENCAP6_IFINDEX	35,787
#define SOCKET_COOKIE	37,815
static volatile const __u8 *client_mac client_mac39,841
static volatile const __u8 *backend_mac backend_mac40,891
#define get_socket_cookie 42,943
__u64 mock_get_socket_cookie(44,993
#define ctx_redirect 49,1094
mock_ctx_redirect(52,1176
#define skb_set_tunnel_key 61,1385
int mock_skb_set_tunnel_key(63,1437
#define SECCTX_FROM_IPCACHE 77,1788
#define TO_NETDEV	81,1842
	__uint(84,1872
	__uint(85,1912
	__uint(86,1946
	__array(87,1971
PKTGEN(95,2170
SETUP(140,3101
CHECK(158,3500

tests/tc_egressgw_redirect.c,485
#define LXC_IPV4 9,161
#define ETH_HLEN 13,313
#define ENABLE_IPV416,369
#define ENABLE_NODEPORT17,389
#define ENABLE_EGRESS_GATEWAY18,413
#define ENABLE_MASQUERADE_IPV419,443
#define ENCAP_IFINDEX 20,474
#define SECCTX_FROM_IPCACHE 22,499
#define FROM_CONTAINER 28,579
	__uint(31,614
	__uint(32,654
	__uint(33,688
	__array(34,713
PKTGEN(44,971
SETUP(52,1156
CHECK(66,1538
PKTGEN(82,2014
SETUP(90,2237
CHECK(105,2750
PKTGEN(122,3322
SETUP(131,3556
CHECK(145,3969

tests/host_only_socket_lb_test.c,585
#define ENABLE_IPV4 10,208
#undef ENABLE_HEALTH_CHECK11,230
#define ENABLE_SOCKET_LB_HOST_ONLY 12,257
#define DST_PORT 14,295
#define DST_PORT_HOSTNS 15,317
#define BACKEND_PORT 16,346
#define HAVE_NETNS_COOKIE 18,373
#define HOST_NETNS_COOKIE 21,444
int my_get_netns_cookie(27,621
#define get_netns_cookie(32,767
#define SVC_KEY_VALUE(36,846
#define BE_KEY_VALUE(51,1143
CHECK(60,1299
	struct { __u32 key;70,1530
	struct { __u32 key; struct lb4_backend value;70,1530
	struct { struct lb4_key key;73,1629
	struct { struct lb4_key key; struct lb4_service value;73,1629

tests/tc_nodeport_lb4_nat_backend.c,786
#define ETH_HLEN 10,244
#define ENABLE_IPV413,300
#define ENABLE_NODEPORT14,320
#define ENABLE_HOST_ROUTING15,344
#define DISABLE_LOOPBACK_LB17,373
#define USE_BPF_PROG_FOR_INGRESS_POLICY20,472
#undef FORCE_LOCAL_POLICY_EVAL_AT_SOURCE21,512
#define CLIENT_IP	23,554
#define CLIENT_PORT	24,584
#define FRONTEND_IP	26,623
#define FRONTEND_PORT	27,655
#define LB_IP	29,691
#define LB_PORT	30,719
#define BACKEND_IP	32,755
#define BACKEND_PORT	33,786
#define SECCTX_FROM_IPCACHE 35,827
static volatile const __u8 *node_mac node_mac43,953
static volatile const __u8 *backend_mac backend_mac44,1003
#define FROM_NETDEV	46,1056
#define TO_NETDEV	47,1078
	__uint(50,1108
	__uint(51,1148
	__uint(52,1182
	__array(53,1207
PKTGEN(65,1487
SETUP(112,2466
CHECK(130,3006

tests/drop_notify_test.c,172
#define DROP_NOTIFY17,669
#define ep_tail_call(33,1230
#undef ep_tail_call42,1600
static int __send_drop_notify_res;44,1621
void mock_tail_call(47,1735
CHECK(56,2098

tests/pktgen.h,5040
#define __TEST_PKTGEN__5,121
static volatile const __u8 mac_one[mac_one32,960
static volatile const __u8 mac_two[mac_two33,1039
static volatile const __u8 mac_three[mac_three34,1118
static volatile const __u8 mac_four[mac_four35,1197
static volatile const __u8 mac_five[mac_five36,1276
static volatile const __u8 mac_six[mac_six37,1355
#define IPV4(43,1556
#define v4_ext_one	46,1696
#define v4_ext_two	47,1735
#define v4_ext_three	48,1774
#define v4_node_one	51,1862
#define v4_node_two	52,1901
#define v4_node_three	53,1940
#define v4_svc_one	56,2031
#define v4_svc_two	57,2071
#define v4_svc_three	58,2111
#define v4_pod_one	61,2199
#define v4_pod_two	62,2239
#define v4_pod_three	63,2279
static volatile const __u8 v6_pod_one[v6_pod_one66,2367
static volatile const __u8 v6_pod_two[v6_pod_two68,2473
static volatile const __u8 v6_pod_three[v6_pod_three70,2579
static volatile const __u8 v6_node_one[v6_node_one74,2734
static volatile const __u8 v6_node_two[v6_node_two76,2841
static volatile const __u8 v6_node_three[v6_node_three78,2948
#define tcp_src_one	82,3099
#define tcp_src_two	83,3138
#define tcp_src_three	84,3177
#define tcp_svc_one	86,3219
#define tcp_svc_two	87,3255
#define tcp_svc_three	88,3292
#define default_data 90,3331
#define NEXTHDR_HOP 92,3375
#define NEXTHDR_TCP 93,3447
#define NEXTHDR_UDP 94,3506
#define NEXTHDR_IPV6 95,3565
#define NEXTHDR_ROUTING 96,3624
#define NEXTHDR_FRAGMENT 97,3686
#define NEXTHDR_GRE 98,3765
#define NEXTHDR_ESP 99,3823
#define NEXTHDR_AUTH 100,3901
#define NEXTHDR_ICMP 101,3970
#define NEXTHDR_NONE 102,4031
#define NEXTHDR_DEST 103,4092
#define NEXTHDR_SCTP 104,4166
#define NEXTHDR_MOBILITY 105,4226
#define NEXTHDR_MAX 107,4290
struct sctphdr 110,4386
	__be16 source;111,4403
	__be16 dest;112,4419
	__be32 vtag;113,4433
	__le32 checksum;114,4447
struct arphdreth 118,4510
	__be16		ar_hrd;119,4529
	__be16		ar_pro;120,4582
	unsigned char	ar_hln;121,4635
	unsigned char	ar_pln;122,4694
	__be16		ar_op;123,4753
	unsigned char	ar_sha[ar_sha124,4799
	__be32		ar_sip;125,4862
	unsigned char	ar_tha[ar_tha126,4908
	__be32		ar_tip;127,4971
} __packed;128,5017
enum pkt_layer 130,5030
	PKT_LAYER_NONE,131,5047
	PKT_LAYER_ETH,134,5082
	PKT_LAYER_8021Q,135,5098
	PKT_LAYER_IPV4,138,5134
	PKT_LAYER_IPV6,139,5151
	PKT_LAYER_ARP,140,5168
	PKT_LAYER_IPV6_HOP_BY_HOP,143,5215
	PKT_LAYER_IPV6_AUTH,144,5243
	PKT_LAYER_IPV6_DEST,145,5265
	PKT_LAYER_TCP,148,5305
	PKT_LAYER_UDP,149,5321
	PKT_LAYER_ICMP,150,5337
	PKT_LAYER_ICMPV6,151,5354
	PKT_LAYER_SCTP,152,5373
	PKT_LAYER_ESP,153,5390
	PKT_LAYER_GENEVE,156,5428
	PKT_LAYER_VXLAN,157,5447
	PKT_LAYER_DATA,160,5484
#define IPV6_DEFAULT_HOPLIMIT 163,5505
#define PKT_BUILDER_LAYERS 166,5598
#define MAX_PACKET_OFF 168,5628
struct pktgen 171,5680
	struct __ctx_buff *ctx;ctx172,5696
	__u64 cur_off;173,5721
	__u64 layer_offsets[layer_offsets174,5737
	enum pkt_layer layers[layers175,5779
void pktgen__init(179,5850
int pktgen__free_layer(191,6128
void *pktgen__push_rawhdr(pktgen__push_rawhdr204,6382
struct ethhdr *pktgen__push_ethhdr(pktgen__push_ethhdr239,7410
void ethhdr__set_macs(246,7649
struct iphdr *pktgen__push_iphdr(pktgen__push_iphdr255,7916
void ipv6hdr__set_addrs(267,8261
struct ipv6hdr *pktgen__push_ipv6hdr(pktgen__push_ipv6hdr275,8467
struct iphdr *pktgen__push_default_iphdr_with_options(pktgen__push_default_iphdr_with_options283,8742
struct iphdr *pktgen__push_default_iphdr(pktgen__push_default_iphdr304,9170
struct ipv6_opt_hdr *pktgen__append_ipv6_extension_header(pktgen__append_ipv6_extension_header311,9360
struct ipv6hdr *pktgen__push_default_ipv6hdr(pktgen__push_default_ipv6hdr347,10117
struct arphdreth *pktgen__push_arphdr_ethernet(pktgen__push_arphdr_ethernet365,10536
struct arphdreth *pktgen__push_default_arphdr_ethernet(pktgen__push_default_arphdr_ethernet372,10750
struct tcphdr *pktgen__push_tcphdr(pktgen__push_tcphdr389,11159
struct tcphdr *pktgen__push_default_tcphdr(pktgen__push_default_tcphdr397,11417
struct ip_esp_hdr *pktgen__push_esphdr(pktgen__push_esphdr419,11855
struct ip_esp_hdr *pktgen__push_default_esphdr(pktgen__push_default_esphdr427,12121
struct sctphdr *pktgen__push_sctphdr(pktgen__push_sctphdr443,12436
struct udphdr *pktgen__push_udphdr(pktgen__push_udphdr451,12686
struct udphdr *pktgen__push_default_udphdr(pktgen__push_default_udphdr458,12885
struct vxlanhdr *pktgen__push_vxlanhdr(pktgen__push_vxlanhdr473,13190
struct vxlanhdr *pktgen__push_default_vxlanhdr(pktgen__push_default_vxlanhdr480,13397
struct genevehdr *pktgen__push_genevehdr(pktgen__push_genevehdr497,13750
struct genevehdr *pktgen__push_default_genevehdr_with_options(pktgen__push_default_genevehdr_with_options507,14026
struct genevehdr *pktgen__push_default_genevehdr(pktgen__push_default_genevehdr522,14368
void *pktgen__push_data_room(pktgen__push_data_room537,14712
void *pktgen__push_data(pktgen__push_data570,15616
void pktgen__finish(588,16046

tests/xdp_nodeport_lb4_test.c,538
#define ENABLE_IPV48,141
#define ENABLE_NODEPORT9,161
#define ENABLE_NODEPORT_ACCELERATION10,185
#define fib_lookup 12,223
static const char fib_smac[fib_smac14,259
static const char fib_dmac[fib_dmac15,329
long mock_fib_lookup(17,400
	__uint(31,734
	__uint(32,774
	__uint(33,808
	__array(34,833
#define FRONTEND_IP 41,943
#define FRONTEND_PORT 42,990
#define BACKEND_IP 43,1015
#define BACKEND_PORT 44,1061
static __always_inline int build_packet(48,1172
SETUP(117,2875
CHECK(136,3312
SETUP(200,4745
CHECK(217,5073

tests/tc_lxc_policy_drop.c,529
#define LXC_IPV4 9,161
#define ETH_HLEN 13,313
#define ENABLE_IPV416,369
#define CLIENT_IP	18,390
#define CLIENT_PORT	19,420
#define SERVER_IP	21,459
#define SERVER_PORT	22,489
#define NODE_IP	24,528
#define SECCTX_FROM_IPCACHE 26,559
static volatile const __u8 *client_mac client_mac28,590
static volatile const __u8 *server_mac server_mac29,640
#define FROM_CONTAINER 33,713
	__uint(36,748
	__uint(37,788
	__uint(38,822
	__array(39,847
PKTGEN(48,1049
__u64 drop_count;93,1967
SETUP(95,1986
CHECK(114,2419

tests/lib/lb.h,105
lb_v4_add_service(6,144
lb_v4_add_backend(32,922
lb_v6_add_service(63,1801
lb_v6_add_backend(91,2627

tests/lib/ipcache.h,57
ipcache_v4_add_entry(5,125
ipcache_v6_add_entry(24,618

tests/lib/egressgw.h,1268
#define CLIENT_IP	4,97
#define CLIENT_PORT	5,127
#define CLIENT_NODE_IP	6,165
#define GATEWAY_NODE_IP	8,202
#define EXTERNAL_SVC_IP	10,240
#define EXTERNAL_SVC_PORT	11,276
#define EGRESS_IP	13,321
#define EGRESS_IP2	14,357
static volatile const __u8 *client_mac client_mac16,395
static volatile const __u8 *gateway_mac gateway_mac17,446
static volatile const __u8 *ext_svc_mac ext_svc_mac18,497
enum egressgw_test 20,551
	TEST_SNAT1 21,572
	TEST_SNAT2 22,608
	TEST_SNAT_EXCL_CIDR 23,644
	TEST_REDIRECT 24,680
	TEST_REDIRECT_EXCL_CIDR 25,716
	TEST_REDIRECT_SKIP_NO_GATEWAY 26,752
	TEST_XDP_REPLY 27,788
struct egressgw_test_ctx 30,828
	enum egressgw_test test;31,855
	enum ct_dir dir;32,881
	__u64 tx_packets;33,899
	__u64 rx_packets;34,918
	__u32 status_code;35,937
static __always_inline __be16 client_port(38,961
static __always_inline void add_egressgw_policy_entry(43,1063
static __always_inline void del_egressgw_policy_entry(60,1502
static __always_inline void add_allow_all_egress_policy(72,1802
static __always_inline void del_allow_all_egress_policy(84,2046
static __always_inline int egressgw_pktgen(94,2218
static __always_inline int egressgw_snat_check(164,3932
static __always_inline int egressgw_status_check(266,7023

tests/lib/endpoint.h,59
endpoint_v4_add_entry(5,125
endpoint_v6_add_entry(27,664

tests/hairpin_sctp_flow.c,418
#define LXC_IPV4 7,177
#undef QUIET_CT11,275
#define ETH_HLEN 17,421
#define ENABLE_IPV420,476
#define ENABLE_SCTP21,496
#define USE_BPF_PROG_FOR_INGRESS_POLICY24,587
#undef FORCE_LOCAL_POLICY_EVAL_AT_SOURCE25,627
#define ctx_redirect_peer 27,669
mock_ctx_redirect_peer(29,760
	__uint(42,1025
	__uint(43,1065
	__uint(44,1099
	__array(45,1124
SETUP(63,1669
CHECK(122,3067
SETUP(169,4192
CHECK(217,5234

tests/inter_cluster_snat_clusterip_client_lxc.c,1002
#define CLIENT_MAC	12,191
#define CLIENT_ROUTER_MAC	13,219
#define BACKEND_ROUTER_MAC	14,253
#define CLIENT_IP	15,290
#define BACKEND_IP	16,320
#define CLIENT_PORT	17,351
#define BACKEND_PORT	18,384
#define BACKEND_NODE_IP	19,418
#define FRONTEND_IP	20,454
#define FRONTEND_PORT	21,486
#define BACKEND_CLUSTER_ID	22,521
#define BACKEND_IDENTITY	23,550
#define ENCAP_IFINDEX 30,704
#define LXC_IPV4 33,791
#define HAVE_LPM_TRIE_MAP_TYPE36,850
#define ENABLE_IPV439,943
#define TUNNEL_MODE42,1008
#define ENABLE_NODEPORT45,1112
#define ENABLE_CLUSTER_AWARE_ADDRESSING48,1213
#undef CLUSTER_ID57,1459
#define CLUSTER_ID 58,1477
#undef EVENT_SOURCE63,1596
#define FROM_CONTAINER 75,1740
#define HANDLE_POLICY 76,1765
	__uint(79,1799
	__uint(80,1839
	__uint(81,1873
	__array(82,1898
pktgen_from_lxc(91,2089
pktgen_to_lxc(133,2902
PKTGEN(174,3685
SETUP(180,3825
CHECK(211,4665
PKTGEN(292,6870
SETUP(298,7013
CHECK(315,7542
PKTGEN(387,9476
SETUP(393,9616
CHECK(400,9788

tests/xdp_nodeport_lb4_nat_lb.c,1398
#define ETH_HLEN 10,244
#define ENABLE_IPV413,300
#define ENABLE_NODEPORT14,320
#define ENABLE_NODEPORT_ACCELERATION15,344
#define DISABLE_LOOPBACK_LB17,382
#define USE_BPF_PROG_FOR_INGRESS_POLICY20,481
#undef FORCE_LOCAL_POLICY_EVAL_AT_SOURCE21,521
#define CLIENT_IP	23,563
#define CLIENT_PORT	24,593
#define FRONTEND_IP_LOCAL	26,632
#define FRONTEND_IP_REMOTE	27,669
#define FRONTEND_PORT	28,707
#define LB_IP	30,743
#define IPV4_DIRECT_ROUTING	31,771
#define BACKEND_IP_LOCAL	33,806
#define BACKEND_IP_REMOTE	34,842
#define BACKEND_PORT	35,879
#define fib_lookup 37,920
static volatile const __u8 *client_mac client_mac39,956
static volatile const __u8 lb_mac[lb_mac41,1052
static volatile const __u8 *node_mac node_mac42,1138
static volatile const __u8 *local_backend_mac local_backend_mac43,1188
static volatile const __u8 *remote_backend_mac remote_backend_mac44,1246
static __be16 nat_source_port;46,1306
static bool fail_fib;47,1337
long mock_fib_lookup(49,1360
#define FROM_NETDEV	74,2015
	__uint(77,2047
	__uint(78,2087
	__uint(79,2121
	__array(80,2146
PKTGEN(91,2385
SETUP(136,3322
CHECK(156,3959
PKTGEN(219,5676
SETUP(264,6602
CHECK(281,7101
static __always_inline int build_reply(336,8532
static __always_inline int check_reply(380,9437
PKTGEN(435,10938
SETUP(441,11071
CHECK(450,11312
PKTGEN(460,11601
SETUP(466,11749
CHECK(477,12020

tests/ipsec_from_host_test.c,653
#define ROUTER_IP7,159
#undef ROUTER_IP9,209
#define NODE_ID 11,227
#define ENCRYPT_KEY 12,248
#define ENABLE_IPV413,270
#define ENABLE_IPV614,290
#define ENABLE_IPSEC15,310
#define TUNNEL_MODE16,331
#define HAVE_ENCAP17,351
#define ENCAP_IFINDEX 18,370
#define SECCTX_FROM_IPCACHE 19,394
#define skb_set_tunnel_key 21,425
#define ctx_redirect 22,476
int mock_skb_set_tunnel_key(24,516
int mock_ctx_redirect(39,898
#define FROM_HOST 52,1144
#define ESP_SEQUENCE 53,1164
	__uint(56,1201
	__uint(57,1241
	__uint(58,1275
	__array(59,1300
PKTGEN(66,1418
SETUP(102,2174
CHECK(118,2733
PKTGEN(189,4567
SETUP(224,5342
CHECK(236,5712

node_config.h,6249
#define __NODE_CONFIG__5,121
#define CLUSTER_ID 19,364
#define NODE_MAC 23,461
#define HOST_IFINDEX 30,638
#define CILIUM_IFINDEX 31,661
#define NATIVE_DEV_MAC_BY_IFINDEX(32,686
 #define SECCTX_FROM_IPCACHE 40,970
#define TUNNEL_PORT 43,1038
#define TUNNEL_PROTOCOL_VXLAN 44,1063
#define TUNNEL_PROTOCOL_GENEVE 45,1095
#define TUNNEL_PROTOCOL 47,1152
#define HOST_ID 50,1206
#define WORLD_ID 51,1224
#define UNMANAGED_ID 52,1243
#define HEALTH_ID 53,1266
#define INIT_ID 54,1286
#define LOCAL_NODE_ID 55,1304
#define REMOTE_NODE_ID 56,1328
#define KUBE_APISERVER_NODE_ID 57,1353
#define HOST_IFINDEX_MAC 58,1386
#define NODEPORT_PORT_MIN 59,1462
#define NODEPORT_PORT_MAX 60,1494
#define NODEPORT_PORT_MIN_NAT 61,1526
#define NODEPORT_PORT_MAX_NAT 62,1580
#define CT_CONNECTION_LIFETIME_TCP	64,1617
#define CT_CONNECTION_LIFETIME_NONTCP	65,1658
#define CT_SERVICE_LIFETIME_TCP	66,1699
#define CT_SERVICE_LIFETIME_NONTCP	67,1738
#define CT_SERVICE_CLOSE_REBALANCE	68,1776
#define CT_SYN_TIMEOUT	69,1814
#define CT_CLOSE_TIMEOUT	70,1842
#define CT_REPORT_INTERVAL	71,1871
# define CT_REPORT_FLAGS	73,1925
#define KERNEL_HZ 76,1964
#define ENABLE_IDENTITY_MARK 78,2011
#define HASH_INIT4_SEED 80,2043
#define HASH_INIT6_SEED 81,2074
# define L2_ANNOUNCEMENTS_MAX_LIVENESS 84,2144
#define IPV4_MASK 88,2224
#define IPV4_GATEWAY 89,2249
#define IPV4_LOOPBACK 90,2281
#define IPV4_ENCRYPT_IFACE 91,2314
#  define IPV4_SNAT_EXCLUSION_DST_CIDR 93,2383
#  define IPV4_SNAT_EXCLUSION_DST_CIDR_LEN 94,2433
#define SNAT_MAPPING_IPV4 97,2539
#define PER_CLUSTER_SNAT_MAPPING_IPV4 98,2594
#define IPV4_INTER_CLUSTER_SNAT 100,2756
#define SNAT_MAPPING_IPV4_SIZE 102,2806
#define NODEPORT_NEIGH4_SIZE 103,2844
#define CAPTURE4_RULES 105,2909
#define CAPTURE4_SIZE 106,2954
#  define IPV4_NATIVE_ROUTING_CIDR 108,3016
#  define IPV4_NATIVE_ROUTING_CIDR_LEN 109,3062
#  define IPV6_SNAT_EXCLUSION_DST_CIDR 115,3220
#  define IPV6_SNAT_EXCLUSION_DST_CIDR_MASK 116,3314
#define SNAT_MAPPING_IPV6 119,3468
#define PER_CLUSTER_SNAT_MAPPING_IPV6 120,3523
#define SNAT_MAPPING_IPV6_SIZE 121,3602
#define NODEPORT_NEIGH6_SIZE 122,3640
#define CAPTURE6_RULES 124,3705
#define CAPTURE6_SIZE 125,3750
#define EGRESS_POLICY_MAP 128,3804
#define SRV6_VRF_MAP4 129,3862
#define SRV6_VRF_MAP6 130,3908
#define SRV6_POLICY_MAP4 131,3954
#define SRV6_POLICY_MAP6 132,4006
#define SRV6_SID_MAP 133,4058
#define SRV6_STATE_MAP4 134,4100
#define SRV6_STATE_MAP6 135,4148
#define ENDPOINTS_MAP 136,4196
#define EVENTS_MAP 137,4234
#define SIGNAL_MAP 138,4272
#define METRICS_MAP 139,4311
#define POLICY_CALL_MAP 140,4351
#define AUTH_MAP 141,4394
#define CONFIG_MAP 142,4428
#define IPCACHE_MAP 143,4474
#define NODE_MAP 144,4514
#define ENCRYPT_MAP 145,4552
#define L2_RESPONDER_MAP4 146,4598
#define TUNNEL_MAP 147,4652
#define VTEP_MAP 148,4694
#define LB6_REVERSE_NAT_MAP 149,4732
#define LB6_SERVICES_MAP_V2 150,4788
#define LB6_BACKEND_MAP 151,4841
#define LB6_REVERSE_NAT_SK_MAP 152,4890
#define LB6_REVERSE_NAT_SK_MAP_SIZE 153,4948
#define LB4_REVERSE_NAT_MAP 154,4991
#define LB4_SERVICES_MAP_V2 155,5047
#define LB4_BACKEND_MAP 156,5100
#define LB4_REVERSE_NAT_SK_MAP 157,5149
#define LB4_REVERSE_NAT_SK_MAP_SIZE 158,5207
#define LB4_AFFINITY_MAP 159,5250
#define LB6_AFFINITY_MAP 160,5300
#define LB_AFFINITY_MATCH_MAP 161,5350
#define LB_MAGLEV_LUT_SIZE 162,5410
#define LB4_MAGLEV_MAP_OUTER 163,5443
#define LB6_MAGLEV_MAP_OUTER 164,5501
#define THROTTLE_MAP 165,5559
#define THROTTLE_MAP_SIZE 166,5601
#define ENABLE_ARP_RESPONDER167,5633
#define TUNNEL_ENDPOINT_MAP_SIZE 168,5662
#define VTEP_MAP_SIZE 169,5701
#define ENDPOINTS_MAP_SIZE 170,5725
#define METRICS_MAP_SIZE 171,5758
#define CILIUM_NET_MAC 172,5789
#define CILIUM_LB_REV_NAT_MAP_MAX_ENTRIES	173,5864
#define CILIUM_LB_SERVICE_MAP_MAX_ENTRIES	174,5912
#define CILIUM_LB_BACKENDS_MAP_MAX_ENTRIES	175,5960
#define CILIUM_LB_AFFINITY_MAP_MAX_ENTRIES	176,6009
#define CILIUM_LB_REV_NAT_MAP_MAX_ENTRIES	177,6058
#define CILIUM_LB_MAGLEV_MAP_MAX_ENTRIES	178,6106
#define POLICY_MAP_SIZE 179,6153
#define AUTH_MAP_SIZE 180,6183
#define CONFIG_MAP_SIZE 181,6212
#define IPCACHE_MAP_SIZE 182,6240
#define NODE_MAP_SIZE 183,6272
#define SRV6_VRF_MAP_SIZE 184,6300
#define SRV6_POLICY_MAP_SIZE 185,6332
#define SRV6_SID_MAP_SIZE 186,6367
#define SRV6_STATE_MAP_SIZE 187,6399
#define L2_RESPONSER_MAP4_SIZE 188,6433
#define POLICY_PROG_MAP_SIZE 189,6469
#define IPV4_FRAG_DATAGRAMS_MAP 190,6517
#define CILIUM_IPV4_FRAG_MAP_MAX_ENTRIES 191,6581
#define LB_DEBUG193,6646
#define MONITOR_AGGREGATION 196,6698
#define MTU 198,6735
#define EPHEMERAL_MIN 199,6752
#define CT_MAP_TCP6 201,6871
#define CT_MAP_ANY6 202,6917
#define CT_MAP_TCP4 203,6963
#define CT_MAP_ANY4 204,7009
#define PER_CLUSTER_CT_TCP6 205,7055
#define PER_CLUSTER_CT_ANY6 206,7115
#define PER_CLUSTER_CT_TCP4 207,7175
#define PER_CLUSTER_CT_ANY4 208,7235
#define CT_MAP_SIZE_TCP 209,7295
#define CT_MAP_SIZE_ANY 210,7324
#define CONNTRACK_ACCOUNTING211,7353
#define LB4_HEALTH_MAP 212,7382
#define LB6_HEALTH_MAP 213,7428
# define WORLD_CIDRS4_MAP 216,7560
# define WORLD_CIDRS4_MAP_SIZE 217,7611
#define NODEPORT_NEIGH4 222,7730
#define NODEPORT_NEIGH6 225,7799
# define DIRECT_ROUTING_DEV_IFINDEX 230,7880
#   define IPV4_DIRECT_ROUTING 233,7968
#  define IPV4_RSS_PREFIX 235,8010
#  define IPV4_RSS_PREFIX_BITS 236,8056
#   define IPV6_DIRECT_ROUTING 240,8148
#  define IPV6_RSS_PREFIX 242,8233
#  define IPV6_RSS_PREFIX_BITS 243,8279
# define IS_L3_DEV(248,8348
# define LB4_SRC_RANGE_MAP	252,8420
# define LB4_SRC_RANGE_MAP_SIZE	253,8476
# define LB6_SRC_RANGE_MAP	254,8513
# define LB6_SRC_RANGE_MAP_SIZE	255,8569
# define LB_SELECTION_RANDOM	259,8635
# define LB_SELECTION_MAGLEV	260,8666
# define LB_SELECTION_FIRST	261,8697
# define LB_SELECTION	262,8727
# define WG_IFINDEX	266,8802
# define VTEP_MASK 270,8852
#define VLAN_FILTER(273,8888
#define CIDR_IDENTITY_RANGE_START 292,9153
#define CIDR_IDENTITY_RANGE_END 293,9203
# define NAT_46X64_PREFIX_0 296,9291
# define NAT_46X64_PREFIX_1 297,9321
# define NAT_46X64_PREFIX_2 298,9351
# define NAT_46X64_PREFIX_3 299,9381

custom/bpf_custom.c,143
#define TO_STRING(9,166
#define STRINGIFY(10,190
#define BPF_CUSTOM_PROG_FILE 21,578
#define BPF_CUSTOM_PROG_NAME 26,709
__section(31,795

custom/bytecount.h,127
	__uint(5,106
	__type(6,140
	__type(7,161
	__uint(8,184
} bytecount_map __section_maps_btf;9,212
void custom_prog(12,272

filter_config.h,318
#define CIDR4_HMAP_ELEMS 8,235
#define CIDR4_LMAP_ELEMS 9,265
#define CIDR4_HMAP_NAME 10,295
#define CIDR4_LMAP_NAME 11,326
#define CIDR4_FILTER12,357
#define CIDR4_LPM_PREFILTER13,378
#define CIDR6_HMAP_NAME 14,406
#define CIDR6_LMAP_NAME 15,437
#define CIDR6_FILTER16,468
#define CIDR6_LPM_PREFILTER17,489

bpf_overlay.c,532
#define IS_BPF_OVERLAY 10,194
#define SKIP_ICMPV6_NS_HANDLING15,324
#define SKIP_SRV6_HANDLING19,439
static __always_inline int handle_ipv6(43,927
__section_tail(170,4485
static __always_inline int ipv4_host_delivery(185,4893
static __always_inline int handle_inter_cluster_revsnat(207,5477
__section_tail(265,7154
static __always_inline int handle_ipv4(280,7570
__section_tail(434,11867
__section_tail(458,12498
static __always_inline bool is_esp(514,14013
int cil_from_overlay(548,14781
int cil_to_overlay(666,17932

bpf_network.c,29
int cil_from_network(15,283

bpf_xdp.c,1306
#define SKIP_POLICY_MAP 11,221
#define SKIP_ICMPV6_NS_HANDLING16,352
#define SKIP_ICMPV6_HOPLIMIT_HANDLING22,595
#define SKIP_SRV6_HANDLING26,716
#undef ENABLE_HEALTH_CHECK31,855
	__uint(42,1054
	__type(43,1088
	__type(44,1121
	__uint(45,1153
	__uint(46,1191
	__uint(47,1231
} CIDR4_HMAP_NAME __section_maps_btf;48,1270
	__uint(52,1345
	__type(53,1383
	__type(54,1416
	__uint(55,1448
	__uint(56,1486
	__uint(57,1526
} CIDR4_LMAP_NAME __section_maps_btf;58,1565
	__uint(65,1693
	__type(66,1727
	__type(67,1760
	__uint(68,1792
	__uint(69,1830
	__uint(70,1870
} CIDR6_HMAP_NAME __section_maps_btf;71,1909
	__uint(75,1984
	__type(76,2022
	__type(77,2055
	__uint(78,2087
	__uint(79,2125
	__uint(80,2165
} CIDR6_LMAP_NAME __section_maps_btf;81,2204
bpf_xdp_exit(87,2374
__section_tail(97,2558
static __always_inline int check_v4_lb(203,5138
static __always_inline int check_v4_lb(210,5364
static __always_inline int check_v4(217,5533
static __always_inline int check_v4(242,6208
__section_tail(251,6409
static __always_inline int check_v6_lb(278,6967
static __always_inline int check_v6_lb(285,7193
static __always_inline int check_v6(292,7362
static __always_inline int check_v6(317,8054
static __always_inline int check_filters(324,8200
int cil_xdp_entry(354,8736

netdev_config.h,126
#define DROP_NOTIFY8,235
#define DEBUG10,274
#define SECLABEL 12,295
#define SECLABEL_NB 13,314
#define CALLS_MAP 14,342

bpf_lxc.c,1366
#define IS_BPF_LXC 15,274
#define SKIP_SRV6_HANDLING19,378
#define EVENT_SOURCE 21,406
#undef LB_SELECTION45,1139
#define LB_SELECTION 46,1159
# define ENABLE_PER_PACKET_LB 73,2075
static __always_inline int __per_packet_lb_svc_xlate_4(79,2163
static __always_inline int __per_packet_lb_svc_xlate_6(127,3479
select_ct_map4(185,5174
static __always_inline int drop_for_direction(200,5632
#define TAIL_CT_LOOKUP4(231,6301
#define TAIL_CT_LOOKUP6(274,7827
encode_custom_prog_meta(328,9961
	__uint(347,10485
	__type(348,10527
	__type(349,10548
	__uint(350,10583
} CT_TAIL_CALL_BUFFER6 __section_maps_btf;351,10608
static __always_inline int handle_ipv6_from_lxc(358,10927
declare_tailcall_if(707,21727
TAIL_CT_LOOKUP6(730,22402
__section_tail(761,23370
	__uint(776,23733
	__type(777,23775
	__type(778,23796
	__uint(779,23831
} CT_TAIL_CALL_BUFFER4 __section_maps_btf;780,23856
static __always_inline int handle_ipv4_from_lxc(787,24175
declare_tailcall_if(1234,38311
TAIL_CT_LOOKUP4(1258,38987
__section_tail(1292,39932
__section_tail(1309,40367
int cil_from_container(1343,41512
ipv6_policy(1397,42709
declare_tailcall_if(1562,48012
__section_tail(1607,49536
TAIL_CT_LOOKUP6(1690,52031
declare_tailcall_if(1897,59014
__section_tail(1945,60696
TAIL_CT_LOOKUP4(2022,63058
__section_tail(2090,65276
int cil_to_container(2139,66380

source_names_to_ids.h,120
#define HEADER_NAMES_TO_IDS_H_4,127
#define _strcase_(6,159
__source_file_name_to_id(20,664
#undef _strcase_38,1069

lib/time_cache.h,234
#define __LIB_TIME_CACHE_H_5,125
	__uint(14,280
	__type(15,322
	__type(16,343
	__uint(17,366
	__uint(18,404
} cilium_ktime_cache __section_maps_btf;19,429
#define bpf_ktime_cache_set(26,619
#define bpf_ktime_cache_get(36,928

lib/l3.h,363
#define __LIB_L3_H_5,117
#  define FORCE_LOCAL_POLICY_EVAL_AT_SOURCE24,633
static __always_inline int ipv6_l3(29,713
static __always_inline int ipv4_l3(52,1232
l3_local_delivery(73,1710
static __always_inline int ipv6_local_delivery(134,4195
static __always_inline int ipv4_local_delivery(160,5067
static __always_inline __u8 get_min_encrypt_key(182,5756

lib/tailcall.h,829
#define TAILCALL_H4,115
#define __eval(8,156
#define __and_00 10,197
#define __and_01 11,216
#define __and_10 12,235
#define __and_11 13,254
#define __and_0(14,273
#define __and_1(15,312
#define __and(16,351
#define __or_00 18,393
#define __or_01 19,411
#define __or_10 20,429
#define __or_11 21,447
#define __or_0(22,465
#define __or_1(23,502
#define __or(24,539
#define __or3_1(26,579
#define __or3_0(27,604
#define __or3(28,638
#define __or4_1(30,686
#define __or4_0(31,713
#define __or4(32,762
#define __not_0 34,816
#define __not_1 35,834
#define __not(36,852
#define __declare_tailcall_if_0(97,2425
#define __declare_tailcall_if_1(99,2497
#define declare_tailcall_if(101,2585
#define __invoke_tailcall_if_0(104,2678
#define __invoke_tailcall_if_1(106,2737
#define invoke_tailcall_if(111,2872

lib/jhash.h,407
#define __JHASH_H_7,242
#define JHASH_INITVAL	12,309
static __always_inline __u32 rol32(14,343
#define __jhash_mix(19,461
#define __jhash_final(29,740
static __always_inline __u32 jhash(40,1003
static __always_inline __u32 __jhash_nwords(84,2076
static __always_inline __u32 jhash_3words(94,2257
static __always_inline __u32 jhash_2words(100,2422
static __always_inline __u32 jhash_1word(105,2571

lib/pcap.h,2124
#define __LIB_PCAP_H_5,119
struct pcap_timeval 15,272
	__u32 tv_sec;16,294
	__u32 tv_usec;17,309
struct pcap_timeoff 20,329
	__u64 tv_boot;21,351
struct pcap_pkthdr 24,371
		struct pcap_timeval ts;30,540
		struct pcap_timeoff to;31,566
	__u32 caplen;33,596
	__u32 len;34,611
struct capture_msg 37,627
	struct pcap_pkthdr hdr;45,898
static __always_inline void cilium_capture(48,927
static __always_inline void __cilium_capture_in(77,1645
static __always_inline void __cilium_capture_out(88,2015
# define capture_enabled 101,2553
struct capture_cache 104,2623
	bool  rule_seen;105,2646
	__u16 rule_id;106,2664
	__u16 cap_len;107,2680
	__uint(111,2709
	__type(112,2751
	__type(113,2772
	__uint(114,2810
	__uint(115,2848
} cilium_capture_cache __section_maps_btf;116,2873
struct capture_rule 118,2917
	__u16 rule_id;119,2939
	__u16 reserved;120,2955
	__u32 cap_len;121,2972
struct capture4_wcard 125,3027
	__be32 saddr;126,3051
	__be32 daddr;127,3090
	__be16 sport;128,3129
	__be16 dport;129,3173
	__u8   nexthdr;130,3217
	__u8   smask;131,3259
	__u8   dmask;132,3300
	__u8   flags;133,3341
struct capture6_wcard 137,3415
	union v6addr saddr;138,3439
	union v6addr daddr;139,3482
	__be16 sport;140,3525
	__be16 dport;141,3573
	__u8   nexthdr;142,3621
	__u8   smask;143,3667
	__u8   dmask;144,3712
	__u8   flags;145,3757
	__uint(150,3828
	__type(151,3862
	__type(152,3899
	__uint(153,3936
	__uint(154,3974
	__uint(155,4011
} CAPTURE4_RULES __section_maps_btf;156,4050
cilium_capture4_masked_key(159,4116
# define PREFIX_MASKS4	180,4992
cilium_capture4_classify_wcard(218,5837
	__uint(262,6812
	__type(263,6846
	__type(264,6883
	__uint(265,6920
	__uint(266,6958
	__uint(267,6995
} CAPTURE6_RULES __section_maps_btf;268,7034
cilium_capture6_masked_key(271,7100
# define PREFIX_MASKS6	290,7790
cilium_capture6_classify_wcard(340,8897
cilium_capture_classify_wcard(386,10034
cilium_capture_candidate(411,10492
cilium_capture_cached(435,11043
cilium_capture_in(458,11663
cilium_capture_out(468,11888
cilium_capture_in(484,12307
cilium_capture_out(489,12397

lib/mono.h,186
#define __LIB_MONO_H_5,119
# define BPF_MONO_SCALER	9,278
# define bpf_mono_now(10,305
# define bpf_sec_to_mono(11,359
# define bpf_mono_now(13,436
# define bpf_sec_to_mono(14,481

lib/identity.h,379
#define __LIB_IDENTITY_H_5,123
static __always_inline bool identity_in_range(9,168
static __always_inline bool identity_is_remote_node(14,329
static __always_inline bool identity_is_node(34,1389
static __always_inline bool identity_is_reserved(57,2135
static __always_inline bool identity_is_cluster(80,2775
static __always_inline __u32 inherit_identity_from_host(93,3040

lib/lb.h,6052
#define __LB_H_5,113
	__uint(17,302
	__type(18,336
	__type(19,357
	__uint(20,397
	__uint(21,435
	__uint(22,492
} LB6_REVERSE_NAT_MAP __section_maps_btf;23,534
	__uint(26,586
	__type(27,620
	__type(28,650
	__uint(29,686
	__uint(30,724
	__uint(31,781
} LB6_SERVICES_MAP_V2 __section_maps_btf;32,823
	__uint(35,875
	__type(36,909
	__type(37,930
	__uint(38,966
	__uint(39,1004
	__uint(40,1062
} LB6_BACKEND_MAP __section_maps_btf;41,1104
	__uint(45,1183
	__type(46,1221
	__type(47,1260
	__uint(48,1300
	__uint(49,1338
} LB6_AFFINITY_MAP __section_maps_btf;50,1396
	__uint(55,1482
	__type(56,1520
	__type(57,1560
	__uint(58,1582
	__uint(59,1620
	__uint(60,1666
} LB6_SRC_RANGE_MAP __section_maps_btf;61,1705
	__uint(66,1789
	__type(67,1827
	__type(68,1856
	__uint(69,1891
	__uint(70,1929
} LB6_HEALTH_MAP __section_maps_btf;71,1987
	__uint(76,2081
	__type(77,2123
	__type(78,2144
	__uint(79,2167
	__uint(80,2205
	__uint(81,2261
} LB6_MAGLEV_MAP_OUTER __section_maps_btf;89,2524
	__uint(95,2670
	__type(96,2704
	__type(97,2725
	__uint(98,2765
	__uint(99,2803
	__uint(100,2860
} LB4_REVERSE_NAT_MAP __section_maps_btf;101,2902
	__uint(104,2954
	__type(105,2988
	__type(106,3018
	__uint(107,3054
	__uint(108,3092
	__uint(109,3149
} LB4_SERVICES_MAP_V2 __section_maps_btf;110,3191
	__uint(113,3243
	__type(114,3277
	__type(115,3298
	__uint(116,3334
	__uint(117,3372
	__uint(118,3430
} LB4_BACKEND_MAP __section_maps_btf;119,3472
	__uint(123,3551
	__type(124,3589
	__type(125,3628
	__uint(126,3668
	__uint(127,3706
} LB4_AFFINITY_MAP __section_maps_btf;128,3764
	__uint(133,3850
	__type(134,3888
	__type(135,3928
	__uint(136,3950
	__uint(137,3988
	__uint(138,4034
} LB4_SRC_RANGE_MAP __section_maps_btf;139,4073
	__uint(144,4157
	__type(145,4195
	__type(146,4224
	__uint(147,4259
	__uint(148,4297
} LB4_HEALTH_MAP __section_maps_btf;149,4355
	__uint(154,4449
	__type(155,4491
	__type(156,4512
	__uint(157,4535
	__uint(158,4573
	__uint(159,4629
} LB4_MAGLEV_MAP_OUTER __section_maps_btf;167,4892
	__uint(173,5050
	__type(174,5084
	__type(175,5124
	__uint(176,5146
	__uint(177,5184
	__uint(178,5242
} LB_AFFINITY_MATCH_MAP __section_maps_btf;179,5284
#define REV_NAT_F_TUPLE_SADDR	182,5336
# define DSR_XLATE_MODE	184,5391
# define DSR_XLATE_FRONTEND	185,5418
#define cilium_dbg_lb 188,5471
#define cilium_dbg_lb(190,5510
static __always_inline bool lb_is_svc_proto(193,5552
bool lb4_svc_is_loadbalancer(208,5800
bool lb6_svc_is_loadbalancer(214,5947
bool lb4_svc_is_nodeport(220,6094
bool lb6_svc_is_nodeport(230,6306
bool lb4_svc_is_external_ip(240,6518
bool lb6_svc_is_external_ip(246,6663
bool lb4_svc_is_hostport(252,6808
bool lb6_svc_is_hostport(258,6947
bool lb4_svc_is_loopback(264,7086
bool lb6_svc_is_loopback(270,7226
bool lb4_svc_has_src_range_check(276,7366
bool lb6_svc_has_src_range_check(286,7604
static __always_inline bool lb_skip_l4_dnat(295,7819
bool lb4_svc_is_two_scopes(301,7943
bool lb6_svc_is_two_scopes(307,8072
bool lb4_svc_is_affinity(313,8201
bool lb6_svc_is_affinity(319,8325
static __always_inline bool __lb_svc_is_routable(324,8426
bool lb4_svc_is_routable(330,8557
bool lb6_svc_is_routable(336,8683
bool lb4_svc_is_localredirect(342,8809
bool lb4_svc_is_l7loadbalancer(348,8944
bool lb6_svc_is_l7loadbalancer(358,9144
static __always_inline int reverse_map_l4_port(367,9321
lb_l4_xlate(414,10385
static __always_inline int __lb6_rev_nat(439,11070
lb6_lookup_rev_nat_entry(479,12154
static __always_inline int lb6_rev_nat(493,12596
lb6_fill_key(506,12930
lb6_extract_tuple(529,13605
bool lb6_src_range_ok(561,14346
lb6_to_lb4_service(586,14883
struct lb6_service *lb6_lookup_service(lb6_lookup_service596,15070
static __always_inline struct lb6_backend *__lb6_lookup_backend(__lb6_lookup_backend618,15774
lb6_lookup_backend(624,15961
struct lb6_service *__lb6_lookup_backend_slot(__lb6_lookup_backend_slot636,16240
struct lb6_service *lb6_lookup_backend_slot(lb6_lookup_backend_slot642,16387
lb6_select_backend_id(661,16955
lb6_select_backend_id(673,17355
lb6_select_backend_id(696,18105
static __always_inline int lb6_xlate(709,18488
__lb6_affinity_backend_id(741,19347
lb6_affinity_backend_id_by_addr(779,20254
__lb6_update_affinity(786,20439
lb6_update_affinity_by_addr(805,20935
lb6_affinity_backend_id_by_netns(813,21176
lb6_update_affinity_by_netns(824,21453
lb6_to_lb4(834,21753
static __always_inline int lb6_local(849,22107
static __always_inline void lb6_ctx_store_state(993,26328
static __always_inline void lb6_ctx_restore_state(1006,26796
struct lb6_service *lb6_lookup_service(lb6_lookup_service1026,27402
struct lb6_service *__lb6_lookup_backend_slot(__lb6_lookup_backend_slot1033,27609
__lb6_lookup_backend(1039,27754
lb6_to_lb4_service(1045,27855
static __always_inline int __lb4_rev_nat(1052,27984
lb4_lookup_rev_nat_entry(1128,30133
static __always_inline int lb4_rev_nat(1143,30559
lb4_fill_key(1158,30992
lb4_extract_tuple(1180,31627
bool lb4_src_range_ok(1217,32402
lb4_to_lb6_service(1242,32924
struct lb4_service *lb4_lookup_service(lb4_lookup_service1252,33111
static __always_inline struct lb4_backend *__lb4_lookup_backend(__lb4_lookup_backend1274,33844
lb4_lookup_backend(1280,34031
struct lb4_service *__lb4_lookup_backend_slot(__lb4_lookup_backend_slot1292,34310
struct lb4_service *lb4_lookup_backend_slot(lb4_lookup_backend_slot1298,34457
lb4_select_backend_id(1317,35025
lb4_select_backend_id(1329,35425
lb4_select_backend_id(1352,36175
lb4_xlate(1366,36570
__lb4_affinity_backend_id(1417,38031
lb4_affinity_backend_id_by_addr(1459,39159
__lb4_update_affinity(1466,39344
lb4_update_affinity_by_addr(1485,39814
lb4_affinity_backend_id_by_netns(1493,40055
lb4_update_affinity_by_netns(1504,40332
lb4_to_lb6(1514,40632
static __always_inline int lb4_local(1530,40981
static __always_inline void lb4_ctx_store_state(1710,46686
lb4_ctx_restore_state(1730,47343
__sock_cookie sock_local_cookie(1762,48276

lib/policy.h,420
#define __LIB_POLICY_H_5,121
__account_and_check(15,269
__policy_can_access(35,793
policy_can_access_ingress(215,6662
static __always_inline bool is_encap(241,7273
policy_can_egress(248,7439
static __always_inline int policy_can_egress6(273,8066
static __always_inline int policy_can_egress4(283,8440
static __always_inline void policy_mark_skip(300,9055
static __always_inline void policy_clear_mark(305,9165

lib/high_scale_ipcache.h,209
#define __LIB_HIGH_SCALE_IPCACHE_H_5,133
# define WORLD_CIDR_STATIC_PREFIX4	13,315
#define WORLD_CIDR_PREFIX_LEN4(16,457
world_cidrs_lookup4(19,579
needs_encapsulation(33,894
decapsulate_overlay(54,1657

lib/fib.h,243
#define __LIB_FIB_H_5,118
maybe_add_l2_hdr(15,270
static __always_inline bool fib_ok(38,883
fib_do_redirect(68,2252
fib_redirect(173,5301
fib_lookup_v6(265,8078
fib_redirect_v6(281,8622
fib_lookup_v4(314,9515
fib_redirect_v4(325,9903

lib/common.h,20959
#define __LIB_COMMON_H_5,121
#define AF_INET 22,406
#define AF_INET6 26,449
#define IP_DF 30,491
#define EVENT_SOURCE 34,541
# define THIS_MTU 41,700
#define CONDITIONAL_PREALLOC 45,754
#define CONDITIONAL_PREALLOC 47,791
#define HAVE_ENCAP52,983
#define NOT_VTEP_DST 57,1115
	XFER_PKT_NO_SVC	62,1207
	XFER_UNUSED	63,1273
	XFER_PKT_SNAT_DONE	64,1299
	XFER_FLAGS 69,1429
	XFER_ENCAP_NODEID 70,1464
	XFER_ENCAP_SECLABEL 71,1488
	XFER_ENCAP_DSTID 72,1514
	XFER_ENCAP_PORT 73,1537
	XFER_ENCAP_ADDR 74,1559
#define BPF_FIB_MAP_NO_NEIGH	78,1625
#define CILIUM_CALL_DROP_NOTIFY	80,1659
#define CILIUM_CALL_ERROR_NOTIFY	81,1695
#define CILIUM_CALL_HANDLE_ICMP6_NS	87,1955
#define CILIUM_CALL_SEND_ICMP6_TIME_EXCEEDED	88,1994
#define CILIUM_CALL_ARP	89,2041
#define CILIUM_CALL_IPV4_FROM_LXC	90,2070
#define CILIUM_CALL_IPV4_FROM_NETDEV	91,2107
#define CILIUM_CALL_IPV4_FROM_OVERLAY	92,2171
#define CILIUM_CALL_IPV46_RFC8215	93,2236
#define CILIUM_CALL_IPV64_RFC8215	94,2273
#define CILIUM_CALL_IPV6_FROM_LXC	95,2310
#define CILIUM_CALL_IPV6_FROM_NETDEV	96,2348
#define CILIUM_CALL_IPV6_FROM_OVERLAY	97,2412
#define CILIUM_CALL_IPV4_TO_LXC_POLICY_ONLY	98,2477
#define CILIUM_CALL_IPV4_TO_HOST_POLICY_ONLY	99,2524
#define CILIUM_CALL_IPV6_TO_LXC_POLICY_ONLY	100,2605
#define CILIUM_CALL_IPV6_TO_HOST_POLICY_ONLY	101,2652
#define CILIUM_CALL_IPV4_TO_ENDPOINT	102,2733
#define CILIUM_CALL_IPV6_TO_ENDPOINT	103,2774
#define CILIUM_CALL_IPV4_NODEPORT_NAT_EGRESS	104,2815
#define CILIUM_CALL_IPV6_NODEPORT_NAT_EGRESS	105,2863
#define CILIUM_CALL_IPV4_NODEPORT_REVNAT	106,2911
#define CILIUM_CALL_IPV6_NODEPORT_REVNAT	107,2955
#define CILIUM_CALL_IPV4_NODEPORT_NAT_FWD	108,2999
#define CILIUM_CALL_IPV4_NODEPORT_DSR	109,3044
#define CILIUM_CALL_IPV6_NODEPORT_DSR	110,3086
#define CILIUM_CALL_IPV4_FROM_HOST	111,3128
#define CILIUM_CALL_IPV6_FROM_HOST	112,3167
#define CILIUM_CALL_IPV6_NODEPORT_NAT_FWD	113,3206
#define CILIUM_CALL_IPV4_FROM_LXC_CONT	114,3251
#define CILIUM_CALL_IPV6_FROM_LXC_CONT	115,3294
#define CILIUM_CALL_IPV4_CT_INGRESS	116,3337
#define CILIUM_CALL_IPV4_CT_INGRESS_POLICY_ONLY	117,3377
#define CILIUM_CALL_IPV4_CT_EGRESS	118,3428
#define CILIUM_CALL_IPV6_CT_INGRESS	119,3467
#define CILIUM_CALL_IPV6_CT_INGRESS_POLICY_ONLY	120,3507
#define CILIUM_CALL_IPV6_CT_EGRESS	121,3558
#define CILIUM_CALL_SRV6_ENCAP	122,3597
#define CILIUM_CALL_SRV6_DECAP	123,3633
#define CILIUM_CALL_SRV6_REPLY	124,3669
#define CILIUM_CALL_IPV4_NODEPORT_NAT_INGRESS	125,3705
#define CILIUM_CALL_IPV6_NODEPORT_NAT_INGRESS	126,3754
#define CILIUM_CALL_IPV4_NODEPORT_SNAT_FWD	127,3803
#define CILIUM_CALL_IPV6_NODEPORT_SNAT_FWD	128,3849
#define CILIUM_CALL_IPV4_NODEPORT_DSR_INGRESS	129,3895
#define CILIUM_CALL_IPV6_NODEPORT_DSR_INGRESS	130,3944
#define CILIUM_CALL_IPV4_INTER_CLUSTER_REVSNAT	131,3993
#define CILIUM_CALL_IPV4_CONT_FROM_HOST	132,4043
#define CILIUM_CALL_IPV4_CONT_FROM_NETDEV	133,4087
#define CILIUM_CALL_IPV6_CONT_FROM_HOST	134,4132
#define CILIUM_CALL_IPV6_CONT_FROM_NETDEV	135,4176
#define CILIUM_CALL_SIZE	136,4221
typedef __u64 mac_t;138,4252
union v6addr 140,4274
		__u32 p1;142,4299
		__u32 p2;143,4311
		__u32 p3;144,4323
		__u32 p4;145,4335
		__u64 d1;148,4361
		__u64 d2;149,4373
	__u8 addr[addr151,4389
} __packed;152,4405
static __always_inline bool validate_ethertype_l2_off(154,4418
static __always_inline bool validate_ethertype(182,5047
____revalidate_data_pull(189,5242
__revalidate_data_pull(214,5889
#define revalidate_data_pull(229,6508
#define revalidate_data_l3_off(232,6655
#define revalidate_data(239,6982
#define BPF_V6(243,7158
#define BPF_V6_1(244,7222
#define BPF_V6_2(245,7276
#define ENDPOINT_KEY_IPV4 251,7362
#define ENDPOINT_KEY_IPV6 252,7390
struct endpoint_key 257,7522
			__u32		ip4;260,7564
			__u32		pad1;261,7579
			__u32		pad2;262,7595
			__u32		pad3;263,7611
		union v6addr	ip6;265,7632
	__u8 family;267,7656
	__u8 key;268,7670
	__u8 cluster_id;269,7681
	__u8 pad;270,7699
} __packed;271,7710
struct tunnel_key 273,7723
			__u32		ip4;276,7763
			__u32		pad1;277,7778
			__u32		pad2;278,7794
			__u32		pad3;279,7810
		union v6addr	ip6;281,7831
	__u8 family;283,7855
	__u8 cluster_id;284,7869
	__u16 pad;285,7887
} __packed;286,7899
struct tunnel_value 288,7912
			__u32		ip4;291,7954
			__u32		pad1;292,7969
			__u32		pad2;293,7985
			__u32		pad3;294,8001
		union v6addr	ip6;296,8022
	__u8 family;298,8046
	__u8 key;299,8060
	__u16 pad;300,8071
} __packed;301,8083
#define ENDPOINT_F_HOST	303,8096
struct endpoint_info 306,8199
	__u32		ifindex;307,8222
	__u16		unused;308,8239
	__u16		lxc_id;309,8298
	__u32		flags;310,8314
	mac_t		mac;311,8329
	mac_t		node_mac;312,8342
	__u32		sec_id;313,8360
	__u32		pad[pad314,8376
struct edt_id 317,8396
	__u64		id;318,8412
struct edt_info 321,8428
	__u64		bps;322,8446
	__u64		t_last;323,8459
	__u64		t_horizon_drop;324,8475
	__u64		pad[pad325,8499
struct remote_endpoint_info 328,8519
	__u32		sec_identity;329,8549
	__u32		tunnel_endpoint;330,8571
	__u16		pad;331,8596
	__u8		key;332,8609
struct policy_key 354,9811
	struct bpf_lpm_trie_key lpm_key;355,9831
	__u32		sec_label;356,9865
	__u8		egress:egress357,9884
			pad:pad358,9901
	__u8		protocol;359,9911
	__u16		dport;360,9983
#define POLICY_FULL_PREFIX	364,10111
struct policy_entry 367,10216
	__be16		proxy_port;368,10238
	__u8		deny:deny369,10259
			wildcard_protocol:wildcard_protocol370,10274
			wildcard_dport:wildcard_dport371,10333
			pad:pad372,10386
	__u8		auth_type;373,10396
	__u16		pad1;374,10414
	__u16		pad2;375,10428
	__u64		packets;376,10442
	__u64		bytes;377,10459
struct auth_key 380,10478
	__u32       local_sec_label;381,10496
	__u32       remote_sec_label;382,10526
	__u16       remote_node_id;383,10557
	__u8        auth_type;384,10612
	__u8        pad;385,10636
struct auth_info 389,10727
	__u64       expiration;390,10746
	RUNTIME_CONFIG_UTIME_OFFSET 397,10838
	RUNTIME_CONFIG_AGENT_LIVENESS 401,11029
struct metrics_key 404,11069
	__u8      reason;405,11090
	__u8      dir:dir406,11140
		  pad:pad407,11185
	__u16     reserved[reserved408,11196
struct metrics_value 412,11261
	__u64	count;413,11284
	__u64	bytes;414,11298
struct egress_gw_policy_key 417,11316
	struct bpf_lpm_trie_key lpm_key;418,11346
	__u32 saddr;419,11380
	__u32 daddr;420,11394
struct egress_gw_policy_entry 423,11412
	__u32 egress_ip;424,11444
	__u32 gateway_ip;425,11462
struct srv6_vrf_key4 428,11485
	struct bpf_lpm_trie_key lpm;429,11508
	__u32 src_ip;430,11538
	__u32 dst_cidr;431,11553
struct srv6_vrf_key6 434,11574
	struct bpf_lpm_trie_key lpm;435,11597
	union v6addr src_ip;436,11627
	union v6addr dst_cidr;437,11649
struct srv6_policy_key4 440,11677
	struct bpf_lpm_trie_key lpm;441,11703
	__u32 vrf_id;442,11733
	__u32 dst_cidr;443,11748
struct srv6_policy_key6 446,11769
	struct bpf_lpm_trie_key lpm;447,11795
	__u32 vrf_id;448,11825
	union v6addr dst_cidr;449,11840
struct srv6_ipv4_2tuple 452,11868
	__u32 src;453,11894
	__u32 dst;454,11906
struct srv6_ipv6_2tuple 457,11922
	union v6addr src;458,11948
	union v6addr dst;459,11967
struct vtep_key 462,11990
	__u32 vtep_ip;463,12008
struct vtep_value 466,12028
	__u64 vtep_mac;467,12048
	__u32 tunnel_endpoint;468,12065
	POLICY_INGRESS 472,12100
	POLICY_EGRESS 473,12121
	POLICY_MATCH_NONE 477,12152
	POLICY_MATCH_L3_ONLY 478,12176
	POLICY_MATCH_L3_L4 479,12203
	POLICY_MATCH_L4_ONLY 480,12228
	POLICY_MATCH_ALL 481,12255
	POLICY_MATCH_L3_PROTO 482,12278
	POLICY_MATCH_PROTO_ONLY 483,12306
	CAPTURE_INGRESS 487,12347
	CAPTURE_EGRESS 488,12369
	CILIUM_NOTIFY_UNSPEC,492,12401
	CILIUM_NOTIFY_DROP,493,12424
	CILIUM_NOTIFY_DBG_MSG,494,12445
	CILIUM_NOTIFY_DBG_CAPTURE,495,12469
	CILIUM_NOTIFY_TRACE,496,12497
	CILIUM_NOTIFY_POLICY_VERDICT,497,12519
	CILIUM_NOTIFY_CAPTURE,498,12550
	CILIUM_NOTIFY_TRACE_SOCK,499,12574
#define NOTIFY_COMMON_HDR 502,12605
#define NOTIFY_CAPTURE_HDR 508,12701
#define __notify_common_hdr(514,12905
#define __notify_pktcap_hdr(520,13039
#define NOTIFY_CAPTURE_VER 526,13226
#define TRACE_PAYLOAD_LEN 529,13282
# define BPF_F_PSEUDO_HDR 533,13348
#define IS_ERR(536,13409
#define POLICY_ACT_PROXY_REDIRECT 539,13537
#define DROP_UNUSED1	548,13894
#define DROP_UNUSED2	549,13934
#define DROP_INVALID_SIP	550,13974
#define DROP_POLICY	551,14004
#define DROP_INVALID	552,14030
#define DROP_CT_INVALID_HDR	553,14057
#define DROP_FRAG_NEEDED	554,14090
#define DROP_CT_UNKNOWN_PROTO	555,14120
#define DROP_UNUSED4	556,14155
#define DROP_UNKNOWN_L3	557,14195
#define DROP_MISSED_TAIL_CALL	558,14225
#define DROP_WRITE_ERROR	559,14260
#define DROP_UNKNOWN_L4	560,14290
#define DROP_UNKNOWN_ICMP_CODE	561,14320
#define DROP_UNKNOWN_ICMP_TYPE	562,14356
#define DROP_UNKNOWN_ICMP6_CODE	563,14392
#define DROP_UNKNOWN_ICMP6_TYPE	564,14429
#define DROP_NO_TUNNEL_KEY	565,14466
#define DROP_UNUSED5	566,14498
#define DROP_UNUSED6	567,14538
#define DROP_UNKNOWN_TARGET	568,14578
#define DROP_UNROUTABLE	569,14611
#define DROP_UNUSED7	570,14641
#define DROP_CSUM_L3	571,14681
#define DROP_CSUM_L4	572,14708
#define DROP_CT_CREATE_FAILED	573,14735
#define DROP_INVALID_EXTHDR	574,14770
#define DROP_FRAG_NOSUPPORT	575,14803
#define DROP_NO_SERVICE	576,14836
#define DROP_UNUSED8	577,14866
#define DROP_NO_TUNNEL_ENDPOINT 578,14906
#define DROP_NAT_46X64_DISABLED	579,14943
#define DROP_EDT_HORIZON	580,14980
#define DROP_UNKNOWN_CT	581,15010
#define DROP_HOST_UNREACHABLE	582,15040
#define DROP_NO_CONFIG	583,15075
#define DROP_UNSUPPORTED_L2	584,15104
#define DROP_NAT_NO_MAPPING	585,15137
#define DROP_NAT_UNSUPP_PROTO	586,15170
#define DROP_NO_FIB	587,15205
#define DROP_ENCAP_PROHIBITED	588,15231
#define DROP_INVALID_IDENTITY	589,15266
#define DROP_UNKNOWN_SENDER	590,15301
#define DROP_NAT_NOT_NEEDED	591,15334
#define DROP_IS_CLUSTER_IP	592,15421
#define DROP_FRAG_NOT_FOUND	593,15453
#define DROP_FORBIDDEN_ICMP6	594,15486
#define DROP_NOT_IN_SRC_RANGE	595,15520
#define DROP_PROXY_LOOKUP_FAILED	596,15555
#define DROP_PROXY_SET_FAILED	597,15593
#define DROP_PROXY_UNKNOWN_PROTO	598,15628
#define DROP_POLICY_DENY	599,15666
#define DROP_VLAN_FILTERED	600,15696
#define DROP_INVALID_VNI	601,15728
#define DROP_INVALID_TC_BUFFER 602,15758
#define DROP_NO_SID	603,15795
#define DROP_MISSING_SRV6_STATE	604,15821
#define DROP_NAT46	605,15858
#define DROP_NAT64	606,15883
#define DROP_POLICY_AUTH_REQUIRED	607,15908
#define DROP_CT_NO_MAP_FOUND	608,15947
#define DROP_SNAT_NO_MAP_FOUND	609,15981
#define DROP_INVALID_CLUSTER_ID	610,16017
#define DROP_DSR_ENCAP_UNSUPP_PROTO	611,16054
#define DROP_NO_EGRESS_GATEWAY	612,16095
#define DROP_UNENCRYPTED_TRAFFIC	613,16131
#define DROP_TTL_EXCEEDED	614,16169
#define DROP_NO_NODE_ID	615,16200
#define NAT_PUNT_TO_STACK	617,16231
#define NAT_NEEDED	618,16277
#define NAT_46X64_RECIRC	619,16308
#define REASON_FORWARDED	628,16644
#define REASON_PLAINTEXT	629,16672
#define REASON_DECRYPT	630,16700
#define REASON_LB_NO_BACKEND_SLOT	631,16727
#define REASON_LB_NO_BACKEND	632,16763
#define REASON_LB_REVNAT_UPDATE	633,16795
#define REASON_LB_REVNAT_STALE	634,16830
#define REASON_FRAG_PACKET	635,16864
#define REASON_FRAG_PACKET_UPDATE	636,16894
#define REASON_MISSED_CUSTOM_CALL	637,16931
#define LB_LOOKUP_SCOPE_EXT	640,17020
#define LB_LOOKUP_SCOPE_INT	641,17050
enum metric_dir 644,17143
	METRIC_INGRESS 645,17161
	METRIC_EGRESS,646,17182
	METRIC_SERVICE647,17198
} __packed;648,17214
#define MARK_MAGIC_HOST_MASK	668,18007
#define MARK_MAGIC_PROXY_EGRESS_EPID	669,18044
#define MARK_MAGIC_PROXY_INGRESS	670,18126
#define MARK_MAGIC_PROXY_EGRESS	671,18166
#define MARK_MAGIC_HOST	672,18206
#define MARK_MAGIC_DECRYPT	673,18239
#define MARK_MAGIC_ENCRYPT	674,18274
#define MARK_MAGIC_IDENTITY	675,18309
#define MARK_MAGIC_TO_PROXY	676,18373
#define MARK_MAGIC_SNAT_DONE	677,18409
#define MARK_MAGIC_KEY_MASK	679,18447
#define MARK_MAGIC_WG_ENCRYPTED	687,18740
#define MARK_MAGIC_HEALTH_IPIP_DONE	693,19006
#define MARK_MAGIC_HEALTH	698,19214
#define MARK_MAGIC_CLUSTER_ID	701,19344
#define MARK_MAGIC_CLUSTER_ID_MASK	702,19395
#define DSR_IPV4_OPT_TYPE	713,19772
#define DSR_IPV6_OPT_TYPE	724,20175
#define DSR_IPV6_OPT_LEN	725,20206
#define DSR_IPV6_EXT_LEN	726,20263
#define MAX_KEY_INDEX 729,20405
struct encrypt_config 732,20498
	__u8 encrypt_key;733,20522
} __packed;734,20541
static __always_inline __u32 or_encrypt_key(739,20624
#define TC_INDEX_F_SKIP_INGRESS_PROXY	750,20821
#define TC_INDEX_F_SKIP_EGRESS_PROXY	751,20861
#define TC_INDEX_F_SKIP_NODEPORT	752,20900
#define TC_INDEX_F_SKIP_RECIRCULATION	753,20935
#define TC_INDEX_F_SKIP_HOST_FIREWALL	754,20975
	CB_SRC_LABEL,767,21459
#define	CB_PORT	768,21474
#define	CB_HINT	769,21534
#define	CB_PROXY_MAGIC	770,21594
#define	CB_ENCRYPT_MAGIC	771,21660
#define	CB_DST_ENDPOINT_ID	772,21727
#define CB_SRV6_SID_1	773,21799
	CB_IFINDEX,774,21864
#define	CB_NAT_46X64	775,21877
#define	CB_ADDR_V4	776,21939
#define	CB_ADDR_V6_1	777,21999
#define	CB_IPCACHE_SRC_LABEL	778,22061
#define CB_SRV6_SID_2	779,22130
#define CB_CLUSTER_ID_EGRESS	780,22193
#define CB_HSIPC_ADDR_V4	781,22262
	CB_POLICY,782,22327
#define	CB_ADDR_V6_2	783,22339
#define CB_SRV6_SID_3	784,22400
#define	CB_CLUSTER_ID_INGRESS	785,22462
#define CB_HSIPC_PORT	786,22531
#define CB_DSR_SRC_LABEL	787,22593
	CB_NAT,788,22657
#define	CB_ADDR_V6_3	789,22666
#define	CB_FROM_HOST	790,22725
#define CB_SRV6_SID_4	791,22784
#define CB_DSR_L3_OFF	792,22844
	CB_CT_STATE,793,22904
#define	CB_ADDR_V6_4	794,22918
#define	CB_ENCRYPT_IDENTITY	795,22981
#define	CB_ENCRYPT_DST	798,23085
#define	CB_CUSTOM_CALLS	802,23219
#define	CB_SRV6_VRF_ID	803,23285
#define	CB_FROM_TUNNEL	804,23350
#define FROM_HOST_L7_LB 811,23567
#define TUPLE_F_OUT	813,23603
#define TUPLE_F_IN	814,23646
#define TUPLE_F_RELATED	815,23688
#define TUPLE_F_SERVICE	816,23753
enum ct_dir 818,23822
	CT_EGRESS,819,23836
	CT_INGRESS,820,23848
	CT_SERVICE,821,23861
} __packed;822,23874
#define NAT_MIN_EGRESS	825,23910
#define NAT_MIN_EGRESS	827,23962
enum ct_status 830,24008
	CT_NEW,831,24025
	CT_ESTABLISHED,832,24034
	CT_REPLY,833,24051
	CT_RELATED,834,24062
	CT_REOPENED,835,24075
} __packed;836,24089
	SVC_FLAG_EXTERNAL_IP 840,24154
	SVC_FLAG_NODEPORT 841,24209
	SVC_FLAG_EXT_LOCAL_SCOPE 842,24268
	SVC_FLAG_HOSTPORT 843,24340
	SVC_FLAG_AFFINITY 844,24402
	SVC_FLAG_LOADBALANCER 845,24469
	SVC_FLAG_ROUTABLE 846,24532
	SVC_FLAG_SOURCE_RANGE 847,24606
	SVC_FLAG_LOCALREDIRECT 852,24737
	SVC_FLAG_NAT_46X64 853,24796
	SVC_FLAG_L7LOADBALANCER 854,24856
	SVC_FLAG_LOOPBACK 855,24941
	SVC_FLAG_INT_LOCAL_SCOPE 856,25017
	SVC_FLAG_TWO_SCOPES 857,25089
	BE_STATE_ACTIVE	862,25254
	BE_STATE_TERMINATING,863,25277
	BE_STATE_QUARANTINED,864,25300
	BE_STATE_MAINTENANCE,865,25323
struct ipv6_ct_tuple 868,25350
	union v6addr	daddr;872,25480
	union v6addr	saddr;873,25501
	__be16		dport;877,25643
	__be16		sport;878,25659
	__u8		nexthdr;879,25675
	__u8		flags;880,25691
} __packed;881,25705
struct ipv4_ct_tuple 883,25718
	__be32		daddr;887,25848
	__be32		saddr;888,25864
	__be16		dport;892,26001
	__be16		sport;893,26017
	__u8		nexthdr;894,26033
	__u8		flags;895,26049
} __packed;896,26063
struct ct_entry 898,26076
	__u64 rx_packets;899,26094
		__u64 rx_bytes;905,26300
		__u64 backend_id;906,26318
	__u64 tx_packets;908,26342
	__u64 tx_bytes;909,26361
	__u32 lifetime;910,26378
	__u16 rx_closing:rx_closing911,26395
	      tx_closing:tx_closing912,26416
	      nat46:nat46913,26437
	      lb_loopback:lb_loopback914,26453
	      seen_non_syn:seen_non_syn915,26475
	      node_port:node_port916,26498
	      proxy_redirect:proxy_redirect917,26518
	      dsr:dsr918,26585
	      from_l7lb:from_l7lb919,26599
	      reserved1:reserved1920,26670
	      from_tunnel:from_tunnel921,26747
	      reserved:reserved922,26801
	__u16 rev_nat_index;923,26820
	__u16 ifindex;927,26971
	__u8  tx_flags_seen;932,27105
	__u8  rx_flags_seen;933,27127
	__u32 src_sec_id;935,27150
	__u32 last_tx_report;940,27355
	__u32 last_rx_report;941,27378
struct lb6_key 944,27405
	union v6addr address;945,27422
	__be16 dport;946,27480
	__u16 backend_slot;947,27544
	__u8 proto;948,27618
	__u8 scope;949,27681
	__u8 pad[pad950,27751
struct lb6_service 954,27800
		__u32 backend_id;956,27830
		__u32 affinity_timeout;957,27883
		__u32 l7_lb_proxy_port;958,27949
	__u16 count;960,28049
	__u16 rev_nat_index;961,28063
	__u8 flags;962,28085
	__u8 flags2;963,28098
	__u8 pad[pad964,28112
struct lb6_backend 968,28161
	union v6addr address;969,28182
	__be16 port;970,28205
	__u8 proto;971,28219
	__u8 flags;972,28232
	__u8 cluster_id;973,28245
	__u8 pad[pad977,28405
struct lb6_health 980,28423
	struct lb6_backend peer;981,28443
struct lb6_reverse_nat 984,28473
	union v6addr address;985,28498
	__be16 port;986,28521
} __packed;987,28535
struct ipv6_revnat_tuple 989,28548
	__sock_cookie cookie;990,28575
	union v6addr address;991,28598
	__be16 port;992,28621
	__u16 pad;993,28635
struct ipv6_revnat_entry 996,28651
	union v6addr address;997,28678
	__be16 port;998,28701
	__u16 rev_nat_index;999,28715
struct lb4_key 1002,28741
	__be32 address;1003,28758
	__be16 dport;1004,28811
	__u16 backend_slot;1005,28875
	__u8 proto;1006,28949
	__u8 scope;1007,29012
	__u8 pad[pad1008,29082
struct lb4_service 1011,29100
		__u32 backend_id;1013,29130
		__u32 affinity_timeout;1014,29183
		__u32 l7_lb_proxy_port;1015,29249
	__u16 count;1020,29452
	__u16 rev_nat_index;1021,29466
	__u8 flags;1022,29528
	__u8 flags2;1023,29541
	__u8  pad[pad1024,29555
struct lb4_backend 1027,29574
	__be32 address;1028,29595
	__be16 port;1029,29649
	__u8 proto;1030,29685
	__u8 flags;1031,29748
	__u8 cluster_id;1032,29761
	__u8 pad[pad1036,29921
struct lb4_health 1039,29939
	struct lb4_backend peer;1040,29959
struct lb4_reverse_nat 1043,29989
	__be32 address;1044,30014
	__be16 port;1045,30031
} __packed;1046,30045
struct ipv4_revnat_tuple 1048,30058
	__sock_cookie cookie;1049,30085
	__be32 address;1050,30108
	__be16 port;1051,30125
	__u16 pad;1052,30139
struct ipv4_revnat_entry 1055,30155
	__be32 address;1056,30182
	__be16 port;1057,30199
	__u16 rev_nat_index;1058,30213
union lb4_affinity_client_id 1061,30239
	__u32 client_ip;1062,30270
	__net_cookie client_cookie;1063,30288
} __packed;1064,30317
struct lb4_affinity_key 1066,30330
	union lb4_affinity_client_id client_id;1067,30356
	__u16 rev_nat_id;1068,30397
	__u8 netns_cookie:netns_cookie1069,30416
	     reserved:reserved1070,30438
	__u8 pad1;1071,30456
	__u32 pad2;1072,30468
} __packed;1073,30481
union lb6_affinity_client_id 1075,30494
	union v6addr client_ip;1076,30525
	__net_cookie client_cookie;1077,30550
} __packed;1078,30579
struct lb6_affinity_key 1080,30592
	union lb6_affinity_client_id client_id;1081,30618
	__u16 rev_nat_id;1082,30659
	__u8 netns_cookie:netns_cookie1083,30678
	     reserved:reserved1084,30700
	__u8 pad1;1085,30718
	__u32 pad2;1086,30730
} __packed;1087,30743
struct lb_affinity_val 1089,30756
	__u64 last_used;1090,30781
	__u32 backend_id;1091,30799
	__u32 pad;1092,30818
} __packed;1093,30830
struct lb_affinity_match 1095,30843
	__u32 backend_id;1096,30870
	__u16 rev_nat_id;1097,30889
	__u16 pad;1098,30908
} __packed;1099,30920
struct ct_state 1101,30933
	__u16 rev_nat_index;1102,30951
	__u16 loopback:loopback1104,31001
	__u16 loopback_disabled:loopback_disabled1106,31026
	      node_port:node_port1108,31061
	      dsr:dsr1109,31081
	      syn:syn1110,31095
	      proxy_redirect:proxy_redirect1111,31109
	      from_l7lb:from_l7lb1112,31176
	      reserved1:reserved11113,31247
	      from_tunnel:from_tunnel1114,31324
	      reserved:reserved1115,31378
	__be32 addr;1117,31425
	__be32 svc_addr;1118,31439
	__u32 src_sec_id;1120,31464
	__u16 ifindex;1121,31483
	__u32 backend_id;1122,31499
static __always_inline bool ct_state_is_from_l7lb(1125,31555
#define SRC_RANGE_STATIC_PREFIX(1134,31735
struct lb4_src_range_key 1137,31837
	struct bpf_lpm_trie_key lpm_key;1138,31864
	__u16 rev_nat_id;1139,31898
	__u16 pad;1140,31917
	__u32 addr;1141,31929
struct lb6_src_range_key 1144,31946
	struct bpf_lpm_trie_key lpm_key;1145,31973
	__u16 rev_nat_id;1146,32007
	__u16 pad;1147,32026
	union v6addr addr;1148,32038
static __always_inline int redirect_ep(1151,32062
static __always_inline __u64 ctx_adjust_hroom_flags(1173,32796
struct lpm_v4_key 1182,32944
	struct bpf_lpm_trie_key lpm;1183,32964
	__u8 addr[addr1184,32994
struct lpm_v6_key 1187,33013
	struct bpf_lpm_trie_key lpm;1188,33033
	__u8 addr[addr1189,33063
struct lpm_val 1192,33083
	__u8 flags;1194,33127
#define TUNNEL_KEY_WITHOUT_SRC_IP 1200,33288

lib/ghash.h,110
#define __GHASH_H_5,116
#define U32MAX_DIV_GOLDEN_RATIO 7,136
static __always_inline __u32 hash_32(54,2844

lib/trace.h,1483
#define __LIB_TRACE__23,787
enum trace_point 32,944
	TRACE_TO_LXC,33,963
	TRACE_TO_PROXY,34,978
	TRACE_TO_HOST,35,995
	TRACE_TO_STACK,36,1011
	TRACE_TO_OVERLAY,37,1028
	TRACE_FROM_LXC,38,1047
	TRACE_FROM_PROXY,39,1064
	TRACE_FROM_HOST,40,1083
	TRACE_FROM_STACK,41,1101
	TRACE_FROM_OVERLAY,42,1120
	TRACE_FROM_NETWORK,43,1141
	TRACE_TO_NETWORK,44,1162
} __packed;45,1181
enum trace_reason 48,1233
	TRACE_REASON_POLICY 49,1253
	TRACE_REASON_CT_ESTABLISHED 50,1284
	TRACE_REASON_CT_REPLY 51,1331
	TRACE_REASON_CT_RELATED 52,1366
	TRACE_REASON_CT_REOPENED 53,1405
	TRACE_REASON_UNKNOWN,54,1446
	TRACE_REASON_ENCRYPTED 58,1602
} __packed;59,1634
	TRACE_AGGREGATE_NONE 63,1686
	TRACE_AGGREGATE_RX 64,1754
	TRACE_AGGREGATE_ACTIVE_CT 65,1821
#define MONITOR_AGGREGATION 69,1926
update_trace_metrics(81,2215
struct trace_ctx 126,3532
	enum trace_reason reason;127,3551
	__u32 monitor;128,3578
struct trace_notify 134,3722
	__u32		src_label;136,3764
	__u32		dst_label;137,3783
	__u16		dst_id;138,3802
	__u8		reason;139,3818
	__u8		ipv6:ipv6140,3833
	__u8		pad:pad141,3848
	__u32		ifindex;142,3862
			__be32		orig_ip4;145,3899
			__u32		orig_pad1;146,3920
			__u32		orig_pad2;147,3941
			__u32		orig_pad3;148,3962
		union v6addr	orig_ip6;150,3988
emit_trace_notify(155,4049
send_trace_notify(185,4864
send_trace_notify4(216,5715
send_trace_notify6(248,6561
send_trace_notify(282,7449
send_trace_notify4(291,7778
send_trace_notify6(301,8149

lib/endian.h,1194
#define __LIB_ENDIAN_H_5,121
#define ___bpf_mvb(10,193
#define ___bpf_swab16(12,272
#define ___bpf_swab32(16,376
#define ___bpf_swab64(22,546
# define __bpf_ntohs(33,894
# define __bpf_htons(34,941
# define __bpf_constant_ntohs(35,988
# define __bpf_constant_htons(36,1038
# define __bpf_ntohl(37,1088
# define __bpf_htonl(38,1135
# define __bpf_constant_ntohl(39,1182
# define __bpf_constant_htonl(40,1232
# define __bpf_be64_to_cpu(41,1282
# define __bpf_cpu_to_be64(42,1334
# define __bpf_constant_be64_to_cpu(43,1386
# define __bpf_constant_cpu_to_be64(44,1442
# define __bpf_ntohs(46,1543
# define __bpf_htons(47,1573
# define __bpf_constant_ntohs(48,1603
# define __bpf_constant_htons(49,1640
# define __bpf_ntohl(50,1677
# define __bpf_htonl(51,1707
# define __bpf_constant_ntohl(52,1737
# define __bpf_constant_htonl(53,1774
# define __bpf_be64_to_cpu(54,1811
# define __bpf_cpu_to_be64(55,1846
# define __bpf_constant_be64_to_cpu(56,1881
# define __bpf_constant_cpu_to_be64(57,1925
#define bpf_htons(62,2030
#define bpf_ntohs(65,2131
#define bpf_htonl(68,2232
#define bpf_ntohl(71,2333
#define bpf_cpu_to_be64(74,2434
#define bpf_be64_to_cpu(77,2552

lib/nat.h,4847
#define __LIB_NAT__6,149
enum  nat_dir 27,556
	NAT_DIR_EGRESS 28,572
	NAT_DIR_INGRESS 29,604
} __packed;30,635
struct nat_entry 32,648
	__u64 created;33,667
	__u64 needs_ct;34,683
	__u64 pad1;35,729
	__u64 pad2;36,761
# define SNAT_COLLISION_RETRIES	40,826
# define SNAT_SIGNAL_THRES	41,863
# define SNAT_COLLISION_RETRIES	43,900
# define SNAT_SIGNAL_THRES	44,936
static __always_inline __u16 __snat_clamp_port_range(47,975
__snat_try_keep_port(54,1169
__snat_lookup(61,1389
__snat_update(67,1523
struct ipv4_nat_entry 81,1847
	struct nat_entry common;82,1871
		struct lb4_reverse_nat nat_info;84,1906
			__be32 to_saddr;86,1952
			__be16 to_sport;87,1972
			__be32 to_daddr;90,2008
			__be16 to_dport;91,2028
struct ipv4_nat_target 96,2061
	__be32 addr;97,2086
	const __u16 min_port;98,2100
	const __u16 max_port;99,2145
	bool from_local_endpoint;100,2190
	bool egress_gateway;101,2217
	__u32 cluster_id;102,2295
	bool needs_ct;103,2314
	__uint(108,2396
	__type(109,2434
	__type(110,2470
	__uint(111,2509
	__uint(112,2547
} SNAT_MAPPING_IPV4 __section_maps_btf;113,2593
struct per_cluster_snat_mapping_ipv4_inner_map 116,2673
	__uint(117,2722
	__type(118,2760
	__type(119,2796
	__uint(120,2835
} per_cluster_snat_mapping_ipv4_1 __section_maps_btf,124,2907
  per_cluster_snat_mapping_ipv4_2 __section_maps_btf;125,2961
	__uint(129,3032
	__type(130,3075
	__type(131,3096
	__uint(132,3119
	__uint(133,3157
	__array(134,3184
} PER_CLUSTER_SNAT_MAPPING_IPV4 __section_maps_btf;136,3267
} PER_CLUSTER_SNAT_MAPPING_IPV4 __section_maps_btf 138,3325
	__uint(149,3541
	__type(150,3579
	__type(151,3612
	__uint(152,3644
	__uint(153,3682
	__uint(154,3711
} IP_MASQ_AGENT_IPV4 __section_maps_btf;155,3750
get_cluster_snat_map_v4(159,3829
struct ipv4_nat_entry *snat_v4_lookup(snat_v4_lookup169,4153
static __always_inline int snat_v4_new_mapping(174,4281
snat_v4_nat_handle_mapping(261,6707
snat_v4_rev_nat_handle_mapping(313,8034
snat_v4_icmp_rewrite_ingress_embedded(357,9177
snat_v4_icmp_rewrite_egress_embedded(432,11598
static __always_inline int snat_v4_rewrite_egress(487,13229
static __always_inline int snat_v4_rewrite_ingress(544,14854
snat_v4_nat_can_skip(607,16623
snat_v4_rev_nat_can_skip(622,17024
snat_v4_create_dsr(634,17429
static __always_inline void snat_v4_init_tuple(660,18005
snat_v4_needs_masquerade(685,18941
snat_v4_nat_handle_icmp_frag_needed(827,23298
__snat_v4_nat(906,25610
snat_v4_nat(930,26244
		__be16 sport;936,26479
		__be16 dport;937,26495
snat_v4_rev_nat_handle_icmp_frag_needed(989,27726
snat_v4_rev_nat(1065,29881
		__be16 sport;1074,30153
		__be16 dport;1075,30169
int snat_v4_nat(1131,31536
int snat_v4_rev_nat(1138,31709
struct ipv6_nat_entry 1145,31859
	struct nat_entry common;1146,31883
		struct lb6_reverse_nat nat_info;1148,31918
			union v6addr to_saddr;1150,31964
			__be16       to_sport;1151,31990
			union v6addr to_daddr;1154,32032
			__be16       to_dport;1155,32058
struct ipv6_nat_target 1160,32097
	union v6addr addr;1161,32122
	const __u16 min_port;1162,32142
	const __u16 max_port;1163,32187
	bool from_local_endpoint;1164,32232
	bool needs_ct;1165,32259
	__uint(1170,32341
	__type(1171,32379
	__type(1172,32415
	__uint(1173,32454
	__uint(1174,32492
} SNAT_MAPPING_IPV6 __section_maps_btf;1175,32538
	__uint(1179,32627
	__type(1180,32670
	__type(1181,32691
	__uint(1182,32714
	__uint(1183,32752
} PER_CLUSTER_SNAT_MAPPING_IPV6 __section_maps_btf;1190,32973
	__uint(1195,33075
	__type(1196,33113
	__type(1197,33146
	__uint(1198,33178
	__uint(1199,33216
	__uint(1200,33245
} IP_MASQ_AGENT_IPV6 __section_maps_btf;1201,33284
get_cluster_snat_map_v6(1205,33363
struct ipv6_nat_entry *snat_v6_lookup(snat_v6_lookup1215,33687
static __always_inline int snat_v6_update(1220,33815
static __always_inline int snat_v6_new_mapping(1229,34088
snat_v6_nat_handle_mapping(1299,35824
snat_v6_rev_nat_handle_mapping(1345,36997
static __always_inline int snat_v6_icmp_rewrite_embedded(1380,37923
static __always_inline int snat_v6_rewrite_egress(1443,39898
static __always_inline int snat_v6_rewrite_ingress(1494,41326
snat_v6_nat_can_skip(1553,42942
snat_v6_rev_nat_can_skip(1562,43183
snat_v6_create_dsr(1570,43431
static __always_inline void snat_v6_init_tuple(1596,44030
snat_v6_needs_masquerade(1606,44350
__snat_v6_nat(1693,46905
snat_v6_nat(1717,47506
		__be16 sport;1723,47723
		__be16 dport;1724,47739
snat_v6_rev_nat_handle_icmp_pkt_toobig(1769,48758
snat_v6_rev_nat(1861,51316
		__be16 sport;1871,51610
		__be16 dport;1872,51626
int snat_v6_nat(1928,52985
int snat_v6_rev_nat(1935,53158
snat_remap_rfc8215(1944,53388
__snat_v6_has_v4_complete(1954,53657
snat_v6_has_v4_match_rfc8215(1967,54043
snat_v6_has_v4_match(1977,54316
snat_v6_has_v4_match(1987,54578

lib/tunnel.h,1176
#define __LIB_TUNNEL_H_5,121
#define GENEVE_OPT_TYPE_CRIT	14,338
#define DSR_GENEVE_OPT_CLASS	23,601
#define DSR_GENEVE_OPT_TYPE	24,637
#define DSR_IPV4_GENEVE_OPT_LEN	25,695
#define DSR_IPV6_GENEVE_OPT_LEN	27,801
struct geneve_opt_hdr 30,908
	__be16 opt_class;31,932
	__u8 type;32,951
	__u8 length:length34,995
	     rsvd:rsvd35,1011
	__u8 rsvd:rsvd37,1031
	     length:length38,1045
struct geneve_dsr_opt4 42,1072
	struct geneve_opt_hdr hdr;43,1097
	__be32	addr;44,1125
	__be16	port;45,1139
	__u16	pad;46,1153
struct geneve_dsr_opt6 49,1169
	struct geneve_opt_hdr hdr;50,1194
	struct in6_addr addr;51,1222
	__be16	port;52,1245
	__u16	pad;53,1259
struct genevehdr 56,1275
	__u8 opt_len:opt_len58,1326
	     ver:ver59,1343
	__u8 rsvd:rsvd60,1356
	     critical:critical61,1370
	     control:control62,1388
	__u8 ver:ver64,1411
	     opt_len:opt_len65,1424
	__u8 control:control66,1441
	     critical:critical67,1458
	     rsvd:rsvd68,1476
	__be16 protocol_type;70,1497
	__u8 vni[vni71,1520
	__u8 reserved;72,1534
struct vxlanhdr 75,1554
	__be32 vx_flags;76,1572
	__be32 vx_vni;77,1590
tunnel_vni_to_sec_identity(81,1639

lib/clustermesh.h,75
#define _H_LIB_CLUSTERMESH_H_3,92
extract_cluster_id_from_identity(6,152

lib/drop.h,564
#define __LIB_DROP__15,439
struct drop_notify 24,578
	__u32		src_label;26,619
	__u32		dst_label;27,638
	__u32		dst_id;28,657
	__u16		line;29,692
	__u8		file;30,706
	__s8		ext_error;31,719
	__u32		ifindex;32,737
__section_tail(52,1627
_send_drop_notify(98,3010
int _send_drop_notify(133,4163
#define __DROP_REASON(154,4934
#define __DROP_REASON_EXT(166,5375
#define __MAGIC_FILE__ 173,5576
#define send_drop_notify(175,5646
#define send_drop_notify_error(179,5845
#define send_drop_notify_ext(183,6030
#define send_drop_notify_error_ext(187,6255

lib/nodeport.h,3240
#define __NODEPORT_H_5,119
struct dsr_opt_v6 33,681
	struct ipv6_opt_hdr hdr;34,701
	__u8 opt_type;35,727
	__u8 opt_len;36,743
	union v6addr addr;37,758
	__be16 port;38,778
	__u16 pad;39,792
struct dsr_opt_v4 42,808
	__u8 type;43,828
	__u8 len;44,840
	__u16 port;45,851
	__u32 addr;46,864
static __always_inline bool nodeport_uses_dsr(49,881
bpf_skip_recirculation(63,1205
nodeport_add_tunnel_encap(77,1537
nodeport_add_tunnel_encap_opt(92,2076
static __always_inline bool dsr_fail_needs_reply(108,2630
static __always_inline bool dsr_is_too_big(117,2807
nodeport_fib_lookup_and_redirect(128,3061
static __always_inline bool nodeport_uses_dsr6(151,3587
nodeport_has_nat_conflict_ipv6(157,3745
static __always_inline int nodeport_snat_fwd_ipv6(189,4606
static __always_inline void rss_gen_src6(237,5743
static __always_inline int dsr_set_ipip6(266,6407
		__be16 payload_len;275,6707
		__u8 nexthdr;276,6729
		__u8 hop_limit;277,6745
static __always_inline int dsr_set_ext6(306,7640
static __always_inline int encap_geneve_dsr_opt6(359,9127
static __always_inline int find_dsr_v6(443,11287
nodeport_extract_dsr_v6(495,12493
nodeport_dsr_lookup_v6_nat_entry(556,13797
static __always_inline int xlate_dsr_v6(561,13909
static __always_inline int dsr_reply_icmp6(580,14369
__section_tail(686,17883
declare_tailcall_if(770,20047
nodeport_rev_dnat_get_info_ipv6(846,21956
__section_tail(876,22681
__section_tail(908,23449
declare_tailcall_if(941,24247
declare_tailcall_if(989,25653
static __always_inline int nodeport_lb6(1116,28647
nodeport_rev_dnat_fwd_ipv6(1301,34142
static __always_inline int rev_nodeport_lb6(1355,35612
__section_tail(1470,38743
__section_tail(1507,39748
__handle_nat_fwd_ipv6(1535,40402
static __always_inline int handle_nat_fwd_ipv6(1556,40881
declare_tailcall_if(1564,41056
static __always_inline bool nodeport_uses_dsr4(1599,41917
nodeport_has_nat_conflict_ipv4(1605,42075
static __always_inline int nodeport_snat_fwd_ipv4(1636,42928
static __always_inline __be32 rss_gen_src4(1689,44392
static __always_inline int dsr_set_ipip4(1705,44859
		__be16 tot_len;1714,45131
		__be16 id;1715,45149
		__be16 frag_off;1716,45162
		__u8   ttl;1717,45181
		__u8   protocol;1718,45195
		__be32 saddr;1719,45214
		__be32 daddr;1720,45230
static __always_inline int dsr_set_opt4(1758,46321
static __always_inline int encap_geneve_dsr_opt4(1816,47949
nodeport_extract_dsr_v4(1979,52492
nodeport_dsr_lookup_v4_nat_entry(2059,54678
static __always_inline int xlate_dsr_v4(2064,54790
static __always_inline int dsr_reply_icmp4(2083,55285
__section_tail(2200,59083
declare_tailcall_if(2258,60590
nodeport_rev_dnat_get_info_ipv4(2355,63301
declare_tailcall_if(2384,63994
declare_tailcall_if(2444,65987
static __always_inline int nodeport_lb4(2554,69013
nodeport_rev_dnat_fwd_ipv4(2769,75335
static __always_inline int rev_nodeport_lb4(2865,78193
__section_tail(2967,81387
__section_tail(3003,82382
__handle_nat_fwd_ipv4(3034,83158
static __always_inline int handle_nat_fwd_ipv4(3057,83821
declare_tailcall_if(3068,84118
health_encap_v4(3111,85309
health_encap_v6(3133,85933
lb_handle_health(3155,86550
static __always_inline int handle_nat_fwd(3203,87801

lib/proxy_hairpin.h,163
#define __LIB_PROXY_HAIRPIN_H_5,128
ctx_redirect_to_proxy_hairpin(23,524
ctx_redirect_to_proxy_hairpin_ipv4(67,1646
ctx_redirect_to_proxy_hairpin_ipv6(75,1845

lib/dbg.h,2950
#define __LIB_DBG__5,117
	DBG_UNSPEC,9,163
	DBG_GENERIC,10,176
	DBG_LOCAL_DELIVERY,11,248
	DBG_ENCAP,12,269
	DBG_LXC_FOUND,13,281
	DBG_POLICY_DENIED,14,297
	DBG_CT_LOOKUP,15,317
	DBG_CT_LOOKUP_REV,16,347
	DBG_CT_MATCH,17,380
	DBG_CT_CREATED,18,395
	DBG_CT_CREATED2,19,426
	DBG_ICMP6_HANDLE,20,457
	DBG_ICMP6_REQUEST,21,476
	DBG_ICMP6_NS,22,496
	DBG_ICMP6_TIME_EXCEEDED,23,511
	DBG_CT_VERDICT,24,537
	DBG_DECAP,25,554
	DBG_PORT_MAP,26,566
	DBG_ERROR_RET,27,581
	DBG_TO_HOST,28,597
	DBG_TO_STACK,29,611
	DBG_PKT_HASH,30,626
	DBG_LB6_LOOKUP_FRONTEND,31,641
	DBG_LB6_LOOKUP_FRONTEND_FAIL,32,667
	DBG_LB6_LOOKUP_BACKEND_SLOT,33,698
	DBG_LB6_LOOKUP_BACKEND_SLOT_SUCCESS,34,728
	DBG_LB6_LOOKUP_BACKEND_SLOT_V2_FAIL,35,766
	DBG_LB6_LOOKUP_BACKEND_FAIL,36,804
	DBG_LB6_REVERSE_NAT_LOOKUP,37,834
	DBG_LB6_REVERSE_NAT,38,863
	DBG_LB4_LOOKUP_FRONTEND,39,885
	DBG_LB4_LOOKUP_FRONTEND_FAIL,40,911
	DBG_LB4_LOOKUP_BACKEND_SLOT,41,942
	DBG_LB4_LOOKUP_BACKEND_SLOT_SUCCESS,42,972
	DBG_LB4_LOOKUP_BACKEND_SLOT_V2_FAIL,43,1010
	DBG_LB4_LOOKUP_BACKEND_FAIL,44,1048
	DBG_LB4_REVERSE_NAT_LOOKUP,45,1078
	DBG_LB4_REVERSE_NAT,46,1107
	DBG_LB4_LOOPBACK_SNAT,47,1129
	DBG_LB4_LOOPBACK_SNAT_REV,48,1153
	DBG_CT_LOOKUP4,49,1181
	DBG_RR_BACKEND_SLOT_SEL,50,1198
	DBG_REV_PROXY_LOOKUP,51,1224
	DBG_REV_PROXY_FOUND,52,1247
	DBG_REV_PROXY_UPDATE,53,1269
	DBG_L4_POLICY,54,1292
	DBG_NETDEV_IN_CLUSTER,55,1308
	DBG_NETDEV_ENCAP4,56,1375
	DBG_CT_LOOKUP4_1,57,1439
	DBG_CT_LOOKUP4_2,61,1541
	DBG_CT_CREATED4,65,1648
	DBG_CT_LOOKUP6_1,69,1765
	DBG_CT_LOOKUP6_2,73,1897
	DBG_CT_CREATED6,77,2004
	DBG_SKIP_PROXY,81,2121
	DBG_L4_CREATE,84,2200
	DBG_IP_ID_MAP_FAILED4,88,2307
	DBG_IP_ID_MAP_FAILED6,92,2394
	DBG_IP_ID_MAP_SUCCEED4,96,2496
	DBG_IP_ID_MAP_SUCCEED6,100,2586
	DBG_LB_STALE_CT,104,2691
	DBG_INHERIT_IDENTITY,108,2794
	DBG_SK_LOOKUP4,111,2864
	DBG_SK_LOOKUP6,115,2959
	DBG_SK_ASSIGN,119,3084
	DBG_L7_LB,122,3146
	DBG_CAPTURE_UNSPEC,130,3325
	DBG_CAPTURE_FROM_RESERVED1,131,3346
	DBG_CAPTURE_FROM_RESERVED2,132,3375
	DBG_CAPTURE_FROM_RESERVED3,133,3404
	DBG_CAPTURE_DELIVERY,134,3433
	DBG_CAPTURE_FROM_LB,135,3456
	DBG_CAPTURE_AFTER_V46,136,3478
	DBG_CAPTURE_AFTER_V64,137,3502
	DBG_CAPTURE_PROXY_PRE,138,3526
	DBG_CAPTURE_PROXY_POST,139,3550
	DBG_CAPTURE_SNAT_PRE,140,3575
	DBG_CAPTURE_SNAT_POST,141,3598
#define EVENT_SOURCE 145,3647
# define printk(169,4204
struct debug_msg 176,4360
	__u32		arg1;178,4398
	__u32		arg2;179,4412
	__u32		arg3;180,4426
static __always_inline void cilium_dbg(183,4444
static __always_inline void cilium_dbg3(196,4752
struct debug_capture_msg 210,5083
	__u32		arg1;212,5130
	__u32		arg2;213,5144
static __always_inline void cilium_dbg_capture2(216,5162
static __always_inline void cilium_dbg_capture(233,5651
# define printk(239,5809
void cilium_dbg(243,5884
void cilium_dbg3(249,6049
void cilium_dbg_capture(256,6246
void cilium_dbg_capture2(262,6393

lib/hash.h,136
#define __HASH_H_5,115
static __always_inline __u32 hash_from_tuple_v4(13,335
static __always_inline __u32 hash_from_tuple_v6(20,550

lib/icmp6.h,1384
#define __LIB_ICMP6__5,149
#define ICMP6_TYPE_OFFSET 14,293
#define ICMP6_CSUM_OFFSET 15,357
#define ICMP6_ND_TARGET_OFFSET 16,449
#define ICMP6_ND_OPTS 17,531
#define ICMP6_UNREACH_MSG_TYPE	19,631
#define ICMP6_PARAM_ERR_MSG_TYPE	20,665
#define ICMP6_ECHO_REQUEST_MSG_TYPE	21,700
#define ICMP6_ECHO_REPLY_MSG_TYPE	22,740
#define ICMP6_MULT_LIST_QUERY_TYPE	23,778
#define ICMP6_NS_MSG_TYPE	24,817
#define ICMP6_NA_MSG_TYPE	25,848
#define ICMP6_RR_MSG_TYPE	26,879
#define ICMP6_INV_NS_MSG_TYPE	27,910
#define ICMP6_MULT_LIST_REPORT_V2_TYPE	28,945
#define ICMP6_SEND_NS_MSG_TYPE	29,988
#define ICMP6_SEND_NA_MSG_TYPE	30,1024
#define ICMP6_MULT_RA_MSG_TYPE	31,1060
#define ICMP6_MULT_RT_MSG_TYPE	32,1096
#define SKIP_HOST_FIREWALL	34,1133
#define ACTION_UNKNOWN_ICMP6_NS 40,1288
static __always_inline int icmp6_load_type(43,1348
static __always_inline int icmp6_send_reply(48,1522
send_icmp6_ndisc_adv(99,3031
static __always_inline __be32 compute_icmp6_csum(162,4837
static __always_inline int __icmp6_send_time_exceeded(175,5190
__section_tail(262,7893
static __always_inline int icmp6_send_time_exceeded(290,8699
static __always_inline int __icmp6_handle_ns(301,8989
__section_tail(332,9772
static __always_inline int icmp6_handle_ns(356,10443
is_icmp6_ndp(368,10741
static __always_inline int icmp6_ndp_handle(379,11031
icmp6_host_handle(398,11551

lib/host_firewall.h,535
#define __LIB_HOST_FIREWALL_H_5,128
ipv6_host_policy_egress_lookup(19,439
__ipv6_host_policy_egress(46,1303
ipv6_host_policy_egress(112,3623
ipv6_host_policy_ingress_lookup(127,4032
__ipv6_host_policy_ingress(163,5192
ipv6_host_policy_ingress(235,7772
whitelist_snated_egress_connections(257,8382
ipv4_host_policy_egress_lookup(285,9396
__ipv4_host_policy_egress(312,10343
ipv4_host_policy_egress(385,12928
ipv4_host_policy_ingress_lookup(400,13390
__ipv4_host_policy_ingress(431,14385
ipv4_host_policy_ingress(512,17224

lib/conntrack_map.h,1741
#define __LIB_CONNTRACK_MAP_H_5,128
	__uint(14,279
	__type(15,317
	__type(16,353
	__uint(17,386
	__uint(18,424
} CT_MAP_TCP6 __section_maps_btf;19,463
	__uint(22,507
	__type(23,545
	__type(24,581
	__uint(25,614
	__uint(26,652
} CT_MAP_ANY6 __section_maps_btf;27,691
	__uint(43,1302
	__type(44,1345
	__type(45,1366
	__uint(46,1389
	__uint(47,1427
} PER_CLUSTER_CT_TCP6 __section_maps_btf;54,1635
	__uint(57,1687
	__type(58,1730
	__type(59,1751
	__uint(60,1774
	__uint(61,1812
} PER_CLUSTER_CT_ANY6 __section_maps_btf;68,2020
get_ct_map6(72,2100
get_cluster_ct_map6(81,2264
get_cluster_ct_any_map6(98,2731
	__uint(110,3007
	__type(111,3045
	__type(112,3081
	__uint(113,3114
	__uint(114,3152
} CT_MAP_TCP4 __section_maps_btf;115,3191
	__uint(118,3235
	__type(119,3273
	__type(120,3309
	__uint(121,3342
	__uint(122,3380
} CT_MAP_ANY4 __section_maps_btf;123,3419
struct per_cluster_ct_map4_inner_map 126,3493
		__uint(127,3532
		__type(128,3571
		__type(129,3608
		__uint(130,3642
} per_cluster_ct_tcp4_1 __section_maps_btf,134,3708
  per_cluster_ct_tcp4_2 __section_maps_btf,135,3752
  per_cluster_ct_any4_1 __section_maps_btf,136,3796
  per_cluster_ct_any4_2 __section_maps_btf;137,3840
	__uint(141,3901
	__type(142,3944
	__type(143,3965
	__uint(144,3988
	__uint(145,4026
	__array(146,4092
} PER_CLUSTER_CT_TCP4 __section_maps_btf;148,4165
} PER_CLUSTER_CT_TCP4 __section_maps_btf 150,4213
	__uint(159,4359
	__type(160,4402
	__type(161,4423
	__uint(162,4446
	__uint(163,4484
	__array(164,4550
} PER_CLUSTER_CT_ANY4 __section_maps_btf;166,4623
} PER_CLUSTER_CT_ANY4 __section_maps_btf 168,4671
get_ct_map4(178,4845
get_cluster_ct_map4(187,5009
get_cluster_ct_any_map4(204,5476

lib/policy_log.h,527
#define __LIB_POLICY_LOG__14,415
#define POLICY_VERDICT_LOG_FILTER 22,575
struct policy_verdict_notify 25,654
	__u32	remote_label;27,705
	__s32	verdict;28,726
	__u16	dst_port;29,742
	__u8	proto;30,759
	__u8	dir:dir31,772
		ipv6:ipv632,785
		match_type:match_type33,795
		audited:audited34,811
		pad0:pad035,824
	__u8	auth_type;36,834
	__u8	pad1;37,851
	__u16	pad2;38,888
static __always_inline bool policy_verdict_filter_allow(41,930
send_policy_verdict_notify(52,1199
send_policy_verdict_notify(86,2171

lib/metrics.h,147
#define __LIB_METRICS__9,168
static __always_inline void update_metrics(24,497
static __always_inline enum metric_dir ct_to_metrics_dir(50,1086

lib/config.h,215
#define _H_LIB_CONFIG_H_3,87
#define __ARG_PLACEHOLDER_1 7,163
#define __take_second_arg(8,194
#define __is_defined(10,246
#define ___is_defined(11,300
#define ____is_defined(12,377
#define is_defined(14,452

lib/maps.h,3620
#define __LIB_MAPS_H_5,119
	__uint(14,234
	__type(15,268
	__type(16,303
	__uint(17,341
	__uint(18,379
	__uint(19,421
} ENDPOINTS_MAP __section_maps_btf;20,463
	__uint(23,509
	__type(24,550
	__type(25,584
	__uint(26,622
	__uint(27,660
	__uint(28,700
} METRICS_MAP __section_maps_btf;29,742
struct bpf_elf_map __section_maps POLICY_CALL_MAP 34,873
struct bpf_elf_map __section_maps POLICY_EGRESSCALL_MAP 46,1231
	__uint(58,1531
	__type(59,1565
	__type(60,1594
	__uint(61,1627
	__uint(62,1665
	__uint(63,1706
} THROTTLE_MAP __section_maps_btf;64,1745
	__uint(70,1888
	__type(71,1926
	__type(72,1959
	__uint(73,1996
	__uint(74,2034
	__uint(75,2073
} POLICY_MAP __section_maps_btf;76,2112
	__uint(82,2236
	__type(83,2270
	__type(84,2301
	__uint(85,2335
	__uint(86,2373
	__uint(87,2410
} AUTH_MAP __section_maps_btf;88,2449
	__uint(98,2725
	__type(99,2760
	__type(100,2781
	__uint(101,2804
	__uint(102,2842
} CONFIG_MAP __section_maps_btf;103,2881
struct bpf_elf_map __section_maps CALLS_MAP 108,2994
	__uint(121,3279
	__type(122,3313
	__type(123,3346
	__uint(124,3383
	__uint(125,3421
	__uint(126,3469
} TUNNEL_MAP __section_maps_btf;127,3511
struct bpf_elf_map __section_maps CUSTOM_CALLS_MAP 137,3871
#define CUSTOM_CALLS_IDX_IPV4_INGRESS	146,4139
#define CUSTOM_CALLS_IDX_IPV4_EGRESS	147,4179
#define CUSTOM_CALLS_IDX_IPV6_INGRESS	148,4218
#define CUSTOM_CALLS_IDX_IPV6_EGRESS	149,4258
struct ipcache_key 152,4351
	struct bpf_lpm_trie_key lpm_key;153,4372
	__u16 pad1;154,4406
	__u8 cluster_id;155,4419
	__u8 family;156,4437
			__u32		ip4;159,4471
			__u32		pad4;160,4486
			__u32		pad5;161,4502
			__u32		pad6;162,4518
		union v6addr	ip6;164,4539
} __packed;166,4563
	__uint(170,4656
	__type(171,4694
	__type(172,4728
	__uint(173,4773
	__uint(174,4811
	__uint(175,4851
} IPCACHE_MAP __section_maps_btf;176,4890
	__uint(179,4934
	__type(180,4969
	__type(181,4990
	__uint(182,5029
	__uint(183,5067
} ENCRYPT_MAP __section_maps_btf;184,5092
struct node_key 186,5127
	__u16 pad1;187,5145
	__u8 pad2;188,5158
	__u8 family;189,5170
			__u32 ip4;192,5204
			__u32 pad4;193,5218
			__u32 pad5;194,5233
			__u32 pad6;195,5248
		union v6addr    ip6;197,5268
	__uint(202,5308
	__type(203,5342
	__type(204,5373
	__uint(205,5396
	__uint(206,5434
	__uint(207,5471
} NODE_MAP __section_maps_btf;208,5510
struct l2_responder_v4_key 210,5542
	__u32 ip4;211,5571
	__u32 ifindex;212,5583
struct l2_responder_v4_stats 215,5603
	__u64 responses_sent;216,5634
	__uint(220,5670
	__type(221,5704
	__type(222,5746
	__uint(223,5792
	__uint(224,5830
	__uint(225,5876
} L2_RESPONDER_MAP4 __section_maps_btf;226,5915
	__uint(230,5994
	__type(231,6032
	__type(232,6075
	__uint(233,6122
	__uint(234,6160
	__uint(235,6189
} EGRESS_POLICY_MAP __section_maps_btf;236,6228
# define SRV6_VRF_MAP(241,6324
# define SRV6_POLICY_MAP(251,6673
# define SRV6_STATE_MAP(261,7045
SRV6_VRF_MAP(271,7470
    __uint(281,7613
    __type(282,7650
    __type(283,7691
    __uint(284,7735
    __uint(285,7776
    __uint(286,7820
} SRV6_SID_MAP __section_maps_btf;287,7862
	__uint(292,7951
	__type(293,7985
	__type(294,8016
	__uint(295,8051
	__uint(296,8089
	__uint(297,8126
} VTEP_MAP __section_maps_btf;298,8168
struct world_cidrs_key4 302,8258
	struct bpf_lpm_trie_key lpm_key;303,8284
	__u32 ip;304,8318
} __packed;305,8329
	__uint(308,8351
	__type(309,8389
	__type(310,8428
	__uint(311,8450
	__uint(312,8488
	__uint(313,8533
} WORLD_CIDRS4_MAP __section_maps_btf;314,8572
static __always_inline void ep_tail_call(318,8674

lib/csum.h,269
#define __LIB_CSUM_H_5,119
#define TCP_CSUM_OFF 11,215
#define UDP_CSUM_OFF 12,269
struct csum_offset 14,324
	__u16 offset;15,345
	__u16 flags;16,360
static __always_inline void csum_l4_offset_and_flags(29,806
static __always_inline int csum_l4_replace(74,2085

lib/proxy.h,486
#define __LIB_PROXY_H_5,120
assign_socket_tcp(15,315
assign_socket_udp(45,1008
assign_socket(70,1576
combine_ports(93,2322
#define CTX_REDIRECT_FN(98,2420
CTX_REDIRECT_FN(161,5195
#undef CTX_REDIRECT_FN168,5450
ctx_redirect_to_proxy4(242,8209
ctx_redirect_to_proxy6(251,8493
#define IP_TUPLE_EXTRACT_FN(259,8753
IP_TUPLE_EXTRACT_FN(286,9542
static __always_inline bool tc_index_skip_ingress_proxy(367,11724
static __always_inline bool tc_index_skip_egress_proxy(381,12109

lib/trace_sock.h,951
#define __LIB_TRACE_SOCK__18,619
enum l4_protocol 26,753
	L4_PROTOCOL_UNKNOWN 27,772
	L4_PROTOCOL_TCP 28,798
	L4_PROTOCOL_UDP 29,820
} __packed;30,842
enum xlate_point 33,918
	XLATE_UNKNOWN 34,937
	XLATE_PRE_DIRECTION_FWD 35,957
	XLATE_POST_DIRECTION_FWD 36,1026
	XLATE_PRE_DIRECTION_REV 37,1096
	XLATE_POST_DIRECTION_REV 38,1165
} __packed;39,1235
struct ip 41,1248
			__be32 ip4;44,1280
			__u32 pad1;45,1295
			__u32 pad2;46,1310
			__u32 pad3;47,1325
		union v6addr ip6;49,1345
	} __packed;50,1365
struct trace_sock_notify 54,1407
	__u8 type;55,1434
	__u8 xlate_point;56,1446
	struct ip dst_ip;57,1465
	__u16 dst_port;58,1484
	__u64 sock_cookie;59,1501
	__u64 cgroup_id;60,1521
	__u8 l4_proto;61,1539
	__u8 ipv6 62,1555
	__u8 pad 63,1571
} __packed;64,1586
parse_protocol(67,1639
send_trace_sock_notify4(79,1857
send_trace_sock_notify6(104,2490
send_trace_sock_notify4(129,3160
send_trace_sock_notify6(136,3367

lib/overloadable.h,36
#define __LIB_OVERLOADABLE_H_5,127

lib/ipv4.h,919
#define __LIB_IPV4__5,118
struct ipv4_frag_id 12,202
	__be32	daddr;13,224
	__be32	saddr;14,239
	__be16	id;15,254
	__u8	proto;16,296
	__u8	pad;17,309
} __packed;18,320
struct ipv4_frag_l4ports 20,333
	__be16	sport;21,360
	__be16	dport;22,375
} __packed;23,390
	__uint(27,441
	__type(28,479
	__type(29,514
	__uint(30,556
	__uint(31,594
} IPV4_FRAG_DATAGRAMS_MAP __section_maps_btf;32,650
ipv4_csum_update_by_value(36,731
ipv4_csum_update_by_diff(44,974
static __always_inline int ipv4_load_daddr(50,1144
static __always_inline int ipv4_dec_ttl(56,1319
static __always_inline int ipv4_hdrlen(74,1699
static __always_inline bool ipv4_is_fragment(79,1790
static __always_inline bool ipv4_is_not_first_fragment(93,2233
static __always_inline bool ipv4_has_l4_header(100,2512
static __always_inline bool ipv4_is_in_subnet(105,2631
ipv4_frag_get_l4ports(113,2862
ipv4_handle_fragmentation(128,3237

lib/time.h,326
#define __LIB_TIME_H_5,119
#define NSEC_PER_SEC	10,189
#define NSEC_PER_MSEC	11,239
#define NSEC_PER_USEC	12,281
#define bpf_ktime_get_sec(15,351
#define bpf_ktime_get_msec(17,436
#define bpf_ktime_get_usec(19,523
#define bpf_ktime_get_nsec(21,610
#define bpf_jiffies_to_sec(25,696
#define bpf_sec_to_jiffies(27,769

lib/encap.h,402
#define __LIB_ENCAP_H_5,120
__encap_with_nodeid(21,401
__encap_and_redirect_with_nodeid(47,1176
encap_and_redirect_with_nodeid(85,2571
__encap_and_redirect_lxc(98,2996
encap_and_redirect_lxc(144,4795
encap_and_redirect_netdev(185,6026
tunnel_gen_src_port_v4(200,6465
tunnel_gen_src_port_v6(212,6698
__encap_with_nodeid_opt(225,6990
set_geneve_dsr_opt4(253,7782
set_geneve_dsr_opt6(264,8104

lib/eps.h,424
#define __LIB_EPS_H_5,118
__lookup_ip6_endpoint(13,267
lookup_ip6_endpoint(24,510
__lookup_ip4_endpoint(30,683
lookup_ip4_endpoint(41,909
#define IPCACHE_STATIC_PREFIX	47,1081
#define IPCACHE_PREFIX_LEN(50,1221
#define V6_CACHE_KEY_LEN 52,1292
ipcache_lookup6(55,1411
#define V4_CACHE_KEY_LEN 74,1821
ipcache_lookup4(77,1933
#define lookup_ip6_remote_endpoint(95,2316
#define lookup_ip4_remote_endpoint(97,2438

lib/static_data.h,446
#define __LIB_STATIC_DATA_H_5,126
#define fetch_u16(13,292
#define fetch_u32(14,331
#define fetch_u32_i(15,370
#define fetch_u64(16,419
#define fetch_u64_i(17,451
#define fetch_ipv6(18,500
#define fetch_mac(19,559
#define SEC_DEFINE 21,633
#define DEFINE_U16(23,722
#define DEFINE_U32(24,793
#define DEFINE_U32_I(25,864
#define DEFINE_U64(26,935
#define DEFINE_U64_I(27,1006
#define DEFINE_IPV6(29,1078
#define DEFINE_MAC(37,1539

lib/qm.h,68
#define __QM_H_5,113
static inline void reset_queue_mapping(9,156

lib/events.h,150
#define __LIB_EVENTS_H_5,121
	__uint(10,177
	__uint(11,223
	__uint(12,257
	__uint(13,293
	__uint(14,331
} EVENTS_MAP __section_maps_btf;15,366

lib/nat_46x64.h,761
#define __LIB_NAT_46X64__5,123
static __always_inline __maybe_unused bool is_v4_in_v6(16,297
static __always_inline __maybe_unused bool is_v4_in_v6_rfc8215(31,614
void build_v4_in_v6(48,1029
void build_v4_in_v6_rfc8215(57,1226
void build_v4_from_v6(68,1533
static __always_inline int get_csum_offset(73,1617
static __always_inline int icmp4_to_icmp6(103,2171
static __always_inline int icmp6_to_icmp4(183,4336
static __always_inline int ipv4_to_ipv6(260,6343
static __always_inline int ipv6_to_ipv4(317,8222
nat46_rfc8215(375,10052
nat64_rfc8215(388,10383
#define NAT46x64_MODE_XLATE	399,10673
#define NAT46x64_MODE_ROUTE	400,10703
static __always_inline bool nat46x64_cb_route(402,10734
static __always_inline bool nat46x64_cb_xlate(407,10874

lib/auth.h,48
#define __LIB_AUTH_H_5,119
auth_lookup(13,247

lib/utime.h,106
#define __LIB_UTIME_H_5,120
#define UTIME_SHIFT 17,563
_utime_get_offset(20,615
utime_get_time(37,963

lib/stubs.h,270
#define __STUBS_H_5,116
#  define NATIVE_DEV_IFINDEX 10,252
#  define DSR_ENCAP_MODE 13,315
#  define DSR_ENCAP_IPIP 14,342
#  define DSR_ENCAP_GENEVE 15,369
#  define IPV4_MASQUERADE 18,472
#  define IPV4_DIRECT_ROUTING 21,537
#  define IPV6_MASQUERADE_V25,723

lib/arp.h,341
#define __LIB_ARP__5,117
struct arp_eth 13,245
	unsigned char		ar_sha[ar_sha14,262
	__be32                  ar_sip;15,296
	unsigned char		ar_tha[ar_tha16,329
	__be32                  ar_tip;17,363
} __packed;18,396
static __always_inline int arp_check(21,453
arp_prepare_response(33,820
arp_validate(52,1508
arp_respond(76,2125

lib/neigh.h,604
#define __LIB_NEIGH_H_5,120
	__uint(15,291
	__type(16,329
	__type(17,373
	__uint(18,418
	__uint(19,456
} NODEPORT_NEIGH6 __section_maps_btf;20,500
static __always_inline int neigh_record_ip6(22,539
static __always_inline union macaddr *neigh_lookup_ip6(neigh_lookup_ip644,1051
neigh_lookup_ip6(50,1230
	__uint(58,1413
	__type(59,1451
	__type(60,1490
	__uint(61,1535
	__uint(62,1573
} NODEPORT_NEIGH4 __section_maps_btf;63,1617
static __always_inline int neigh_record_ip4(65,1656
static __always_inline union macaddr *neigh_lookup_ip4(neigh_lookup_ip487,2166
neigh_lookup_ip4(93,2339

lib/wireguard.h,89
#define __WIREGUARD_H_7,145
wg_maybe_redirect_to_encrypt(17,312
strict_allow(119,3404

lib/l4.h,519
#define __LIB_L4_H_5,117
#define TCP_DPORT_OFF 13,240
#define TCP_SPORT_OFF 14,294
#define UDP_DPORT_OFF 15,350
#define UDP_SPORT_OFF 16,404
union tcp_flags 18,461
		__u8 upper_bits;20,489
		__u8 lower_bits;21,508
		__u16 pad;22,527
	__u32 value;24,544
static __always_inline __u8 tcp_flags_to_u8(27,562
static __always_inline int l4_modify_port(49,1300
static __always_inline int l4_load_port(62,1677
static __always_inline int l4_load_ports(68,1830
static __always_inline int l4_load_tcp_flags(74,1991

lib/lxc.h,192
#define __LIB_LXC_H_5,118
#define TEMPLATE_LXC_ID 19,349
int is_valid_lxc_src_ip(23,435
int is_valid_lxc_src_ipv4(37,681
int is_valid_lxc_src_ip(48,941
int is_valid_lxc_src_ipv4(54,1040

lib/signal.h,602
#define __LIB_SIGNAL_H_5,121
	__uint(11,201
	__uint(12,247
	__uint(13,281
	__uint(14,317
	__uint(15,355
} SIGNAL_MAP __section_maps_btf;16,390
	SIGNAL_NAT_FILL_UP 19,431
	SIGNAL_CT_FILL_UP,20,456
	SIGNAL_AUTH_REQUIRED,21,476
	SIGNAL_PROTO_V4 25,510
	SIGNAL_PROTO_V6,26,532
struct signal_msg 29,554
	__u32 signal_nr;30,574
			__u32 proto;33,612
		struct auth_key auth;35,633
#define SEND_SIGNAL(44,873
static __always_inline void send_signal_nat_fill_up(54,1164
static __always_inline void send_signal_ct_fill_up(60,1321
static __always_inline void send_signal_auth_required(66,1475

lib/ipv6.h,1536
#define __LIB_IPV6__5,118
#define IPV6_MAX_HEADERS 12,237
#define NEXTHDR_HOP 14,265
#define NEXTHDR_TCP 15,337
#define NEXTHDR_UDP 16,396
#define NEXTHDR_IPV6 17,455
#define NEXTHDR_ROUTING 18,514
#define NEXTHDR_FRAGMENT 19,576
#define NEXTHDR_GRE 20,655
#define NEXTHDR_ESP 21,713
#define NEXTHDR_AUTH 22,791
#define NEXTHDR_ICMP 23,860
#define NEXTHDR_NONE 24,921
#define NEXTHDR_DEST 25,982
#define NEXTHDR_SCTP 26,1056
#define NEXTHDR_MOBILITY 27,1116
#define NEXTHDR_MAX 29,1180
static __always_inline int ipv6_optlen(31,1217
static __always_inline int ipv6_authlen(36,1331
static __always_inline int ipv6_hdrlen_offset(41,1446
static __always_inline int ipv6_hdrlen(81,2290
static __always_inline void ipv6_addr_copy(86,2425
static __always_inline bool ipv6_addr_equals(93,2565
static __always_inline int ipv6_addr_in_net(102,2772
#define GET_PREFIX(114,3145
static __always_inline void ipv6_addr_clear_suffix(118,3281
static __always_inline int ipv6_dec_hoplimit(130,3555
static __always_inline int ipv6_load_saddr(147,3976
static __always_inline int ipv6_store_saddr(155,4288
static __always_inline int ipv6_load_daddr(161,4473
ipv6_store_daddr(170,4812
static __always_inline int ipv6_load_nexthdr(175,4967
static __always_inline int ipv6_store_nexthdr(183,5252
static __always_inline int ipv6_load_paylen(190,5468
static __always_inline int ipv6_store_paylen(198,5749
static __always_inline __be32 ipv6_pseudohdr_checksum(205,5962
static __always_inline int ipv6_addr_is_mapped(223,6520

lib/ids.h,171
#define __LIB_IDS_H_5,118
#define CILIUM_MAP_POLICY	7,140
#define CILIUM_MAP_CALLS	8,168
#define CILIUM_MAP_CUSTOM_CALLS	9,195
#define CILIUM_MAP_EGRESSPOLICY	10,229

lib/encrypt.h,129
#define __LIB_ENCRYPT_H_5,122
set_ipsec_encrypt_mark(16,317
set_ipsec_encrypt(32,701
do_decrypt(47,1267
do_decrypt(109,2731

lib/conntrack.h,2254
#define __LIB_CONNTRACK_H_5,124
enum ct_action 20,359
	ACTION_UNSPEC,21,376
	ACTION_CREATE,22,392
	ACTION_CLOSE,23,408
enum ct_scope 26,427
	SCOPE_FORWARD,27,443
	SCOPE_REVERSE,28,459
	SCOPE_BIDIR,29,475
struct ct_buffer4 33,512
	struct ipv4_ct_tuple tuple;34,532
	struct ct_state ct_state;35,561
	__u32 monitor;36,588
	int ret;37,604
struct ct_buffer6 42,644
	struct ipv6_ct_tuple tuple;43,664
	struct ct_state ct_state;44,693
	__u32 monitor;45,720
	int ret;46,736
static __always_inline enum ct_action ct_tcp_select_action(50,757
static __always_inline bool ct_entry_seen_both_syns(61,1019
static __always_inline __u32 __ct_update_timeout(88,2303
static __always_inline __u32 ct_update_timeout(160,5432
static __always_inline void ct_reset_closing(184,6134
static __always_inline bool ct_entry_alive(190,6256
static __always_inline bool ct_entry_closing(195,6384
ct_entry_expired_rebalance(201,6540
__ct_lookup(213,6938
ct_lookup_select_tuple_type(304,9605
#define DEFINE_FUNC_CT_IS_REPLY(329,10419
ipv6_extract_tuple(349,10954
static __always_inline void ct_flip_tuple_dir6(381,11703
ipv6_ct_tuple_swap_addrs(390,11911
ipv6_ct_tuple_swap_ports(400,12161
__ipv6_ct_tuple_reverse(415,12597
ipv6_ct_tuple_reverse(422,12751
ct_extract_ports6(429,12895
DEFINE_FUNC_CT_IS_REPLY(489,14252
ct_lazy_lookup6(549,15878
static __always_inline int ct_lookup6(559,16234
ipv4_extract_tuple(578,16727
static __always_inline void ct_flip_tuple_dir4(604,17318
ipv4_ct_tuple_swap_addrs(613,17526
ipv4_ct_tuple_swap_ports(622,17703
__ipv4_ct_tuple_reverse(637,18139
ipv4_ct_tuple_reverse(644,18293
static __always_inline int ipv4_ct_extract_l4_ports(650,18410
ct_extract_ports4(679,19247
DEFINE_FUNC_CT_IS_REPLY(739,20549
ct_lazy_lookup4(820,22984
static __always_inline int ct_lookup4(832,23391
static __always_inline int ct_create6(851,23934
static __always_inline int ct_create4(922,25968
__ct_has_nodeport_egress_entry(1030,28992
ct_has_nodeport_egress_entry4(1052,29740
ct_has_dsr_egress_entry4(1070,30203
ct_has_nodeport_egress_entry6(1086,30547
ct_has_dsr_egress_entry6(1104,31010
ct_update_svc_entry(1120,31354
ct_update_rev_nat_index(1134,31648
ct_update_dsr(1147,31908
ct_update_nodeport(1159,32114

lib/edt.h,214
#define __EDT_H_5,114
static __always_inline void edt_set_aggregate(17,387
static __always_inline __u32 edt_get_aggregate(24,590
static __always_inline int edt_sched_departure(36,881
edt_set_aggregate(80,2062

lib/egress_gateway.h,499
#define __LIB_EGRESS_GATEWAY_H_5,129
#define ENABLE_EGRESS_GATEWAY_COMMON12,243
#define EGRESS_STATIC_PREFIX 20,456
#define EGRESS_PREFIX_LEN(21,506
#define EGRESS_IPV4_PREFIX 22,574
#define EGRESS_GATEWAY_NO_GATEWAY 26,760
#define EGRESS_GATEWAY_EXCLUDED_CIDR 27,798
struct egress_gw_policy_entry *lookup_ip4_egress_gw_policy(lookup_ip4_egress_gw_policy30,872
bool egress_gw_request_needs_redirect(41,1156
bool egress_gw_snat_needed(88,2596
bool egress_gw_reply_needs_redirect(109,3151

lib/eth.h,632
#define __LIB_ETH__5,117
#define ETH_HLEN 10,184
#define ETH_ALEN 14,237
union macaddr 17,264
		__u32 p1;19,290
		__u16 p2;20,302
	__u8 addr[addr22,318
static __always_inline int eth_addrcmp(25,337
static __always_inline int eth_is_bcast(37,521
static __always_inline int eth_load_saddr(50,718
static __always_inline int eth_store_saddr_aligned(56,876
static __always_inline int eth_store_saddr(62,1055
static __always_inline int eth_load_daddr(81,1587
static __always_inline int eth_store_daddr_aligned(87,1734
static __always_inline int eth_store_daddr(93,1902
static __always_inline int eth_store_proto(112,2419

lib/utils.h,157
#define __LIB_UTILS_H_5,120
#define __min(14,255
#define __max(22,387
#define min(30,519
#define max(33,577
#define min_t(36,635
#define max_t(39,682

lib/egress_policies.h,1297
#define __LIB_EGRESS_POLICIES_H_5,130
struct srv6_srh 13,250
	struct ipv6_rt_hdr rthdr;14,268
	__u8 first_segment;15,295
	__u8 flags;16,316
	__u16 reserved;17,329
	struct in6_addr segments[segments18,346
#  define SRV6_VRF_STATIC_PREFIX4	26,489
#  define SRV6_VRF_PREFIX4_LEN(29,614
#  define SRV6_VRF_IPV4_PREFIX 30,690
srv6_lookup_vrf4(32,776
#  define SRV6_POLICY_STATIC_PREFIX4	45,1072
#  define SRV6_POLICY_PREFIX4_LEN(48,1204
#  define SRV6_POLICY_IPV4_PREFIX 49,1286
srv6_lookup_policy4(51,1386
#  define SRV6_VRF_STATIC_PREFIX6	65,1719
#  define SRV6_VRF_PREFIX6_LEN(68,1844
#  define SRV6_VRF_IPV6_PREFIX 69,1920
srv6_lookup_vrf6(71,2006
# define SRV6_POLICY_STATIC_PREFIX6	84,2368
# define SRV6_POLICY_PREFIX6_LEN(87,2499
# define SRV6_POLICY_IPV6_PREFIX 88,2580
srv6_lookup_policy6(91,2681
srv6_lookup_sid(102,2962
is_srv6_packet(113,3145
srv6_encapsulation(125,3442
srv6_decapsulation(186,5385
srv6_create_state_entry(250,7115
srv6_lookup_state_entry4(295,8220
srv6_lookup_state_entry6(303,8438
srv6_handling4(310,8609
srv6_handling6(357,10317
srv6_handling(383,11070
srv6_reply(425,12030
srv6_load_meta_sid(465,12987
srv6_store_meta_sid(474,13309
srv6_refib(492,13976
__section_tail(540,15326
__section_tail(569,16039
__section_tail(590,16512

lib/overloadable_skb.h,736
#define __LIB_OVERLOADABLE_SKB_H_5,131
bpf_clear_meta(11,256
get_identity(26,584
get_epid(35,804
set_identity_mark(44,990
set_identity_meta(51,1216
set_encrypt_key_mark(60,1469
ctx_set_cluster_id_mark(69,1695
ctx_get_cluster_id_mark(75,1859
redirect_self(89,2189
neigh_resolver_available(98,2469
ctx_skip_nodeport_clear(104,2584
ctx_skip_nodeport_set(112,2769
ctx_skip_nodeport(120,2951
ctx_skip_host_fw_set(133,3250
ctx_skip_host_fw(139,3376
static __always_inline __maybe_unused __u32 ctx_get_xfer(148,3598
ctx_set_xfer(158,3885
ctx_move_xfer(164,4049
ctx_change_head(170,4186
static __always_inline void ctx_snat_done_set(175,4308
static __always_inline bool ctx_snat_done(181,4455
ctx_set_encap_info(188,4659

lib/overloadable_xdp.h,835
#define __LIB_OVERLOADABLE_XDP_H_5,131
bpf_clear_meta(11,255
get_identity(16,352
set_encrypt_dip(22,459
set_identity_mark(28,595
set_identity_meta(33,727
set_encrypt_key_mark(39,861
ctx_set_cluster_id_mark(45,1027
ctx_get_cluster_id_mark(50,1168
redirect_self(56,1288
redirect_neigh(62,1400
neigh_resolver_available(71,1633
#define RECIRC_MARKER	76,1684
#define XFER_MARKER	77,1738
ctx_skip_nodeport_clear(80,1835
ctx_skip_nodeport_set(88,2012
ctx_skip_nodeport(96,2187
ctx_get_xfer(106,2382
static __always_inline __maybe_unused void ctx_set_xfer(111,2509
static __always_inline __maybe_unused void ctx_move_xfer(120,2710
ctx_change_head(139,3227
static __always_inline void ctx_snat_done_set(146,3395
static __always_inline bool ctx_snat_done(151,3506
ctx_set_encap_info(159,3762
ctx_set_tunnel_opt(244,6031

bpf_host.c,1903
#define IS_BPF_HOST 10,190
#define EVENT_SOURCE 12,213
#define TEMPLATE_HOST_EP_ID 17,379
#define ACTION_UNKNOWN_ICMP6_NS 23,592
# define VLAN_FILTER(26,656
#define FROM_HOST_FLAG_NEED_HOSTFW 57,1435
#define FROM_HOST_FLAG_HOST_ID 58,1479
static __always_inline bool allow_vlan(60,1520
static __always_inline int rewrite_dmac_to_host(65,1705
#define SECCTX_FROM_IPCACHE_OK	82,2306
# define SECCTX_FROM_IPCACHE	84,2367
static __always_inline bool identity_from_ipcache_ok(87,2406
resolve_srcid_ipv6(95,2580
	__uint(132,3787
	__type(133,3829
	__type(134,3850
	__uint(135,3885
} CT_TAIL_CALL_BUFFER6 __section_maps_btf;136,3910
handle_ipv6(139,3981
handle_ipv6_cont(221,6122
tail_handle_ipv6_cont(368,10197
declare_tailcall_if(383,10600
declare_tailcall_if(389,10794
tail_handle_ipv6(396,11020
__section_tail(427,11963
__section_tail(433,12136
handle_to_netdev_ipv6(441,12355
resolve_srcid_ipv4(477,13289
	__uint(518,14625
	__type(519,14667
	__type(520,14688
	__uint(521,14723
} CT_TAIL_CALL_BUFFER4 __section_maps_btf;522,14748
handle_ipv4(525,14819
handle_ipv4_cont(610,17204
tail_handle_ipv4_cont(782,22351
declare_tailcall_if(797,22754
declare_tailcall_if(803,22948
tail_handle_ipv4(810,23174
__section_tail(841,24153
__section_tail(854,24609
handle_to_netdev_ipv4(862,24830
do_netdev_encrypt_pools(887,25569
do_netdev_encrypt(943,27433
static __always_inline int do_netdev_encrypt_encap(956,27712
static __always_inline int do_netdev_encrypt(997,28809
static __always_inline int handle_l2_announcement(1006,29035
do_netdev(1048,30102
handle_netdev(1191,34594
handle_srv6(1214,35157
int cil_from_netdev(1311,37580
int cil_from_host(1367,38830
int cil_to_netdev(1384,39333
int cil_to_host(1546,43618
declare_tailcall_if(1627,45541
declare_tailcall_if(1648,46136
to_host_from_lxc(1672,46862
from_host_to_lxc(1723,48127
__section_tail(1780,49712

tests/builtin_memcpy.h,0

tests/builtin_memcmp.h,0

tests/builtin_memzero.h,0

tests/builtin_memmove.h,0

include/bpf/features_xdp.h,0

include/bpf/features.h,0

include/bpf/features_skb.h,0
